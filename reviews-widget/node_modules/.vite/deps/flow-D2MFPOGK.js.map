{
  "version": 3,
  "sources": ["../../@lit-labs/virtualizer/src/layouts/shared/SizeCache.ts", "../../@lit-labs/virtualizer/src/layouts/shared/BaseLayout.ts", "../../@lit-labs/virtualizer/src/layouts/flow.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nexport interface SizeCacheConfig {\n  roundAverageSize?: boolean;\n}\n\nexport class SizeCache {\n  private _map = new Map<number | string, number>();\n  private _roundAverageSize = false;\n  totalSize = 0;\n\n  constructor(config?: SizeCacheConfig) {\n    if (config?.roundAverageSize === true) {\n      this._roundAverageSize = true;\n    }\n  }\n\n  set(index: number | string, value: number): void {\n    const prev = this._map.get(index) || 0;\n    this._map.set(index, value);\n    this.totalSize += value - prev;\n  }\n\n  get averageSize(): number {\n    if (this._map.size > 0) {\n      const average = this.totalSize / this._map.size;\n      return this._roundAverageSize ? Math.round(average) : average;\n    }\n    return 0;\n  }\n\n  getSize(index: number | string) {\n    return this._map.get(index);\n  }\n\n  clear() {\n    this._map.clear();\n    this.totalSize = 0;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  Layout,\n  ChildPositions,\n  Positions,\n  ScrollDirection,\n  Size,\n  dimension,\n  position,\n  PinOptions,\n  ScrollToCoordinates,\n  BaseLayoutConfig,\n  StateChangedMessage,\n  LayoutHostSink,\n} from './Layout.js';\n\ntype UpdateVisibleIndicesOptions = {\n  emit?: boolean;\n};\n\nexport function dim1(direction: ScrollDirection): dimension {\n  return direction === 'horizontal' ? 'width' : 'height';\n}\n\nexport function dim2(direction: ScrollDirection): dimension {\n  return direction === 'horizontal' ? 'height' : 'width';\n}\n\nexport function pos1(direction: ScrollDirection): position {\n  return direction === 'horizontal' ? 'left' : 'top';\n}\n\nexport function pos2(direction: ScrollDirection): position {\n  return direction === 'horizontal' ? 'top' : 'left';\n}\n\nexport abstract class BaseLayout<C extends BaseLayoutConfig> implements Layout {\n  /**\n   * The last set viewport scroll position.\n   */\n  private _latestCoords: Positions = {left: 0, top: 0};\n\n  /**\n   * Scrolling direction.\n   */\n  private _direction: ScrollDirection | null = null;\n\n  /**\n   * Dimensions of the viewport.\n   */\n  private _viewportSize: Size = {width: 0, height: 0};\n\n  public totalScrollSize: Size = {width: 0, height: 0};\n\n  public offsetWithinScroller: Positions = {left: 0, top: 0};\n\n  /**\n   * Flag for debouncing asynchronous reflow requests.\n   */\n  private _pendingReflow = false;\n\n  private _pendingLayoutUpdate = false;\n\n  protected _pin: PinOptions | null = null;\n\n  /**\n   * The index of the first item intersecting the viewport.\n   */\n  protected _firstVisible = 0;\n\n  /**\n   * The index of the last item intersecting the viewport.\n   */\n  protected _lastVisible = 0;\n\n  /**\n   * Pixel offset in the scroll direction of the first child.\n   */\n  protected _physicalMin = 0;\n\n  /**\n   * Pixel offset in the scroll direction of the last child.\n   */\n  protected _physicalMax = 0;\n\n  /**\n   * Index of the first child.\n   */\n  protected _first = -1;\n\n  /**\n   * Index of the last child.\n   */\n  protected _last = -1;\n\n  /**\n   * Length in the scrolling direction.\n   */\n  protected _sizeDim: dimension = 'height';\n\n  /**\n   * Length in the non-scrolling direction.\n   */\n  protected _secondarySizeDim: dimension = 'width';\n\n  /**\n   * Position in the scrolling direction.\n   */\n  protected _positionDim: position = 'top';\n\n  /**\n   * Position in the non-scrolling direction.\n   */\n  protected _secondaryPositionDim: position = 'left';\n\n  /**\n   * Current scroll offset in pixels.\n   */\n  protected _scrollPosition = 0;\n\n  /**\n   * Difference between current scroll offset and scroll offset calculated due\n   * to a reflow.\n   */\n  protected _scrollError = 0;\n\n  /**\n   * Total number of items that could possibly be displayed. Used to help\n   * calculate the scroll size.\n   */\n  protected _items: unknown[] = [];\n\n  /**\n   * The total (estimated) length of all items in the scrolling direction.\n   */\n  protected _scrollSize = 1;\n\n  /**\n   * Number of pixels beyond the viewport to still include\n   * in the active range of items.\n   */\n  // TODO (graynorton): Probably want to make this something we calculate based\n  // on viewport size, item size, other factors, possibly still with a dial of some kind\n  protected _overhang = 1000;\n\n  /**\n   * Call this to deliver messages (e.g. stateChanged, unpinned) to host\n   */\n  private _hostSink: LayoutHostSink;\n\n  protected _getDefaultConfig(): C {\n    return {\n      direction: 'vertical',\n    } as C;\n  }\n\n  constructor(hostSink: LayoutHostSink, config?: C) {\n    this._hostSink = hostSink;\n    // Delay setting config so that subclasses do setup work first\n    Promise.resolve().then(\n      () => (this.config = config || this._getDefaultConfig())\n    );\n  }\n\n  set config(config: C) {\n    Object.assign(this, Object.assign({}, this._getDefaultConfig(), config));\n  }\n\n  get config(): C {\n    return {\n      direction: this.direction,\n    } as C;\n  }\n\n  /**\n   * Maximum index of children + 1, to help estimate total height of the scroll\n   * space.\n   */\n  get items(): unknown[] {\n    return this._items;\n  }\n\n  set items(items: unknown[]) {\n    this._setItems(items);\n  }\n\n  protected _setItems(items: unknown[]) {\n    if (items !== this._items) {\n      this._items = items;\n      this._scheduleReflow();\n    }\n  }\n\n  /**\n   * Primary scrolling direction.\n   */\n  get direction(): ScrollDirection {\n    return this._direction!;\n  }\n  set direction(dir) {\n    // Force it to be either horizontal or vertical.\n    dir = dir === 'horizontal' ? dir : 'vertical';\n    if (dir !== this._direction) {\n      this._direction = dir;\n      this._sizeDim = dir === 'horizontal' ? 'width' : 'height';\n      this._secondarySizeDim = dir === 'horizontal' ? 'height' : 'width';\n      this._positionDim = dir === 'horizontal' ? 'left' : 'top';\n      this._secondaryPositionDim = dir === 'horizontal' ? 'top' : 'left';\n      this._triggerReflow();\n    }\n  }\n\n  /**\n   * Height and width of the viewport.\n   */\n  get viewportSize(): Size {\n    return this._viewportSize;\n  }\n  set viewportSize(dims) {\n    const {_viewDim1, _viewDim2} = this;\n    Object.assign(this._viewportSize, dims);\n    if (_viewDim2 !== this._viewDim2) {\n      // this._viewDim2Changed();\n      this._scheduleLayoutUpdate();\n    } else if (_viewDim1 !== this._viewDim1) {\n      this._checkThresholds();\n    }\n  }\n\n  /**\n   * Scroll offset of the viewport.\n   */\n  get viewportScroll(): Positions {\n    return this._latestCoords;\n  }\n  set viewportScroll(coords) {\n    Object.assign(this._latestCoords, coords);\n    const oldPos = this._scrollPosition;\n    this._scrollPosition = this._latestCoords[this._positionDim];\n    const change = Math.abs(oldPos - this._scrollPosition);\n    if (change >= 1) {\n      this._checkThresholds();\n    }\n  }\n\n  /**\n   * Perform a reflow if one has been scheduled.\n   */\n  reflowIfNeeded(force = false) {\n    if (force || this._pendingReflow) {\n      this._pendingReflow = false;\n      this._reflow();\n    }\n  }\n\n  set pin(options: PinOptions | null) {\n    this._pin = options;\n    this._triggerReflow();\n  }\n\n  get pin() {\n    if (this._pin !== null) {\n      const {index, block} = this._pin;\n      return {\n        index: Math.max(0, Math.min(index, this.items.length - 1)),\n        block,\n      };\n    }\n    return null;\n  }\n\n  _clampScrollPosition(val: number) {\n    return Math.max(\n      -this.offsetWithinScroller[this._positionDim],\n      Math.min(val, this.totalScrollSize[dim1(this.direction)] - this._viewDim1)\n    );\n  }\n\n  unpin() {\n    if (this._pin !== null) {\n      this._sendUnpinnedMessage();\n      this._pin = null;\n    }\n  }\n\n  /**\n   * Get the top and left positioning of the item at idx.\n   */\n  protected abstract _getItemPosition(idx: number): Positions;\n\n  /**\n   * Update _first and _last based on items that should be in the current\n   * range.\n   */\n  protected abstract _getActiveItems(): void;\n\n  protected abstract _getItemSize(_idx: number): Size;\n\n  /**\n   * Calculates (precisely or by estimating, if needed) the total length of all items in\n   * the scrolling direction, including spacing, caching the value in the `_scrollSize` field.\n   *\n   * Should return a minimum value of 1 to ensure at least one item is rendered.\n   * TODO (graynorton): Possibly no longer required, but leaving here until it can be verified.\n   */\n  protected abstract _updateScrollSize(): void;\n\n  protected _updateLayout(): void {\n    // Override\n  }\n\n  // protected _viewDim2Changed(): void {\n  //   this._scheduleLayoutUpdate();\n  // }\n\n  /**\n   * The height or width of the viewport, whichever corresponds to the scrolling direction.\n   */\n  protected get _viewDim1(): number {\n    return this._viewportSize[this._sizeDim];\n  }\n\n  /**\n   * The height or width of the viewport, whichever does NOT correspond to the scrolling direction.\n   */\n  protected get _viewDim2(): number {\n    return this._viewportSize[this._secondarySizeDim];\n  }\n\n  protected _scheduleReflow() {\n    this._pendingReflow = true;\n  }\n\n  protected _scheduleLayoutUpdate() {\n    this._pendingLayoutUpdate = true;\n    this._scheduleReflow();\n  }\n\n  // For triggering a reflow based on incoming changes to\n  // the layout config.\n  protected _triggerReflow() {\n    this._scheduleLayoutUpdate();\n    // TODO graynorton@: reflowIfNeeded() isn't really supposed\n    // to be called internally. Address in larger cleanup\n    // of virtualizer / layout interaction pattern.\n    // this.reflowIfNeeded(true);\n    Promise.resolve().then(() => this.reflowIfNeeded());\n  }\n\n  protected _reflow() {\n    if (this._pendingLayoutUpdate) {\n      this._updateLayout();\n      this._pendingLayoutUpdate = false;\n    }\n    this._updateScrollSize();\n    this._setPositionFromPin();\n    this._getActiveItems();\n    this._updateVisibleIndices();\n    this._sendStateChangedMessage();\n  }\n\n  /**\n   * If we are supposed to be pinned to a particular\n   * item or set of coordinates, we set `_scrollPosition`\n   * accordingly and adjust `_scrollError` as needed\n   * so that the virtualizer can keep the scroll\n   * position in the DOM in sync\n   */\n  protected _setPositionFromPin() {\n    if (this.pin !== null) {\n      const lastScrollPosition = this._scrollPosition;\n      const {index, block} = this.pin;\n      this._scrollPosition =\n        this._calculateScrollIntoViewPosition({\n          index,\n          block: block || 'start',\n        }) - this.offsetWithinScroller[this._positionDim];\n      this._scrollError = lastScrollPosition - this._scrollPosition;\n    }\n  }\n  /**\n   * Calculate the coordinates to scroll to, given\n   * a request to scroll to the element at a specific\n   * index.\n   *\n   * Supports the same positioning options (`start`,\n   * `center`, `end`, `nearest`) as the standard\n   * `Element.scrollIntoView()` method, but currently\n   * only considers the provided value in the `block`\n   * dimension, since we don't yet have any layouts\n   * that support virtualization in two dimensions.\n   */\n  protected _calculateScrollIntoViewPosition(options: PinOptions) {\n    const {block} = options;\n    const index = Math.min(this.items.length, Math.max(0, options.index));\n    const itemStartPosition = this._getItemPosition(index)[this._positionDim];\n    let scrollPosition = itemStartPosition;\n    if (block !== 'start') {\n      const itemSize = this._getItemSize(index)[this._sizeDim];\n      if (block === 'center') {\n        scrollPosition =\n          itemStartPosition - 0.5 * this._viewDim1 + 0.5 * itemSize;\n      } else {\n        const itemEndPosition = itemStartPosition - this._viewDim1 + itemSize;\n        if (block === 'end') {\n          scrollPosition = itemEndPosition;\n        } else {\n          // block === 'nearest'\n          const currentScrollPosition = this._scrollPosition;\n          scrollPosition =\n            Math.abs(currentScrollPosition - itemStartPosition) <\n            Math.abs(currentScrollPosition - itemEndPosition)\n              ? itemStartPosition\n              : itemEndPosition;\n        }\n      }\n    }\n    scrollPosition += this.offsetWithinScroller[this._positionDim];\n    return this._clampScrollPosition(scrollPosition);\n  }\n\n  public getScrollIntoViewCoordinates(\n    options: PinOptions\n  ): ScrollToCoordinates {\n    return {\n      [this._positionDim as position]:\n        this._calculateScrollIntoViewPosition(options),\n    } as ScrollToOptions;\n  }\n\n  private _sendUnpinnedMessage() {\n    this._hostSink({\n      type: 'unpinned',\n    });\n  }\n\n  private _sendVisibilityChangedMessage() {\n    this._hostSink({\n      type: 'visibilityChanged',\n      firstVisible: this._firstVisible,\n      lastVisible: this._lastVisible,\n    });\n  }\n\n  protected _sendStateChangedMessage() {\n    const childPositions: ChildPositions = new Map();\n    if (this._first !== -1 && this._last !== -1) {\n      for (let idx = this._first; idx <= this._last; idx++) {\n        childPositions.set(idx, this._getItemPosition(idx));\n      }\n    }\n    const message: StateChangedMessage = {\n      type: 'stateChanged',\n      scrollSize: {\n        [this._sizeDim]: this._scrollSize,\n        [this._secondarySizeDim]: null,\n      } as Size,\n      range: {\n        first: this._first,\n        last: this._last,\n        firstVisible: this._firstVisible,\n        lastVisible: this._lastVisible,\n      },\n      childPositions,\n    };\n    if (this._scrollError) {\n      message.scrollError = {\n        [this._positionDim]: this._scrollError,\n        [this._secondaryPositionDim]: 0,\n      } as Positions;\n      this._scrollError = 0;\n    }\n    this._hostSink(message);\n  }\n\n  /**\n   * Number of items to display.\n   */\n  private get _num(): number {\n    if (this._first === -1 || this._last === -1) {\n      return 0;\n    }\n    return this._last - this._first + 1;\n  }\n\n  private _checkThresholds() {\n    if ((this._viewDim1 === 0 && this._num > 0) || this._pin !== null) {\n      this._scheduleReflow();\n    } else {\n      const min = Math.max(0, this._scrollPosition - this._overhang);\n      const max = Math.min(\n        this._scrollSize,\n        this._scrollPosition + this._viewDim1 + this._overhang\n      );\n      if (this._physicalMin > min || this._physicalMax < max) {\n        this._scheduleReflow();\n      } else {\n        this._updateVisibleIndices({emit: true});\n      }\n    }\n  }\n\n  /**\n   * Find the indices of the first and last items to intersect the viewport.\n   * Emit a visibleindiceschange event when either index changes.\n   */\n  protected _updateVisibleIndices(options?: UpdateVisibleIndicesOptions) {\n    if (this._first === -1 || this._last === -1) return;\n\n    let firstVisible = this._first;\n    while (\n      firstVisible < this._last &&\n      Math.round(\n        this._getItemPosition(firstVisible)[this._positionDim] +\n          this._getItemSize(firstVisible)[this._sizeDim]\n      ) <= Math.round(this._scrollPosition)\n    ) {\n      firstVisible++;\n    }\n\n    let lastVisible = this._last;\n    while (\n      lastVisible > this._first &&\n      Math.round(this._getItemPosition(lastVisible)[this._positionDim]) >=\n        Math.round(this._scrollPosition + this._viewDim1)\n    ) {\n      lastVisible--;\n    }\n\n    if (\n      firstVisible !== this._firstVisible ||\n      lastVisible !== this._lastVisible\n    ) {\n      this._firstVisible = firstVisible;\n      this._lastVisible = lastVisible;\n      if (options && options.emit) {\n        this._sendVisibilityChangedMessage();\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {SizeCache} from './shared/SizeCache.js';\nimport {BaseLayout, dim1} from './shared/BaseLayout.js';\nimport {\n  Positions,\n  Size,\n  Margins,\n  margin,\n  ScrollDirection,\n  offsetAxis,\n  ChildMeasurements,\n  BaseLayoutConfig,\n  LayoutHostSink,\n} from './shared/Layout.js';\n\ntype ItemBounds = {\n  pos: number;\n  size: number;\n};\n\ntype FlowLayoutConstructor = {\n  prototype: FlowLayout;\n  new (hostSink: LayoutHostSink, config?: BaseLayoutConfig): FlowLayout;\n};\n\ntype FlowLayoutSpecifier = BaseLayoutConfig & {\n  type: FlowLayoutConstructor;\n};\n\ntype FlowLayoutSpecifierFactory = (\n  config?: BaseLayoutConfig\n) => FlowLayoutSpecifier;\n\nexport const flow: FlowLayoutSpecifierFactory = (config?: BaseLayoutConfig) =>\n  Object.assign(\n    {\n      type: FlowLayout,\n    },\n    config\n  );\n\nfunction leadingMargin(direction: ScrollDirection): margin {\n  return direction === 'horizontal' ? 'marginLeft' : 'marginTop';\n}\n\nfunction trailingMargin(direction: ScrollDirection): margin {\n  return direction === 'horizontal' ? 'marginRight' : 'marginBottom';\n}\n\nfunction offset(direction: ScrollDirection): offsetAxis {\n  return direction === 'horizontal' ? 'xOffset' : 'yOffset';\n}\n\nfunction collapseMargins(a: number, b: number): number {\n  const m = [a, b].sort();\n  return m[1] <= 0 ? Math.min(...m) : m[0] >= 0 ? Math.max(...m) : m[0] + m[1];\n}\n\nclass MetricsCache {\n  private _childSizeCache = new SizeCache();\n  private _marginSizeCache = new SizeCache();\n  private _metricsCache = new Map<number, Size & Margins>();\n\n  update(metrics: {[key: number]: Size & Margins}, direction: ScrollDirection) {\n    const marginsToUpdate = new Set<number>();\n    Object.keys(metrics).forEach((key) => {\n      const k = Number(key);\n      this._metricsCache.set(k, metrics[k]);\n      this._childSizeCache.set(k, metrics[k][dim1(direction)]);\n      marginsToUpdate.add(k);\n      marginsToUpdate.add(k + 1);\n    });\n    for (const k of marginsToUpdate) {\n      const a = this._metricsCache.get(k)?.[leadingMargin(direction)] || 0;\n      const b = this._metricsCache.get(k - 1)?.[trailingMargin(direction)] || 0;\n      this._marginSizeCache.set(k, collapseMargins(a, b));\n    }\n  }\n\n  get averageChildSize(): number {\n    return this._childSizeCache.averageSize;\n  }\n\n  get totalChildSize(): number {\n    return this._childSizeCache.totalSize;\n  }\n\n  get averageMarginSize(): number {\n    return this._marginSizeCache.averageSize;\n  }\n\n  get totalMarginSize(): number {\n    return this._marginSizeCache.totalSize;\n  }\n\n  getLeadingMarginValue(index: number, direction: ScrollDirection) {\n    return this._metricsCache.get(index)?.[leadingMargin(direction)] || 0;\n  }\n\n  getChildSize(index: number) {\n    return this._childSizeCache.getSize(index);\n  }\n\n  getMarginSize(index: number) {\n    return this._marginSizeCache.getSize(index);\n  }\n\n  clear() {\n    this._childSizeCache.clear();\n    this._marginSizeCache.clear();\n    this._metricsCache.clear();\n  }\n}\n\nexport class FlowLayout extends BaseLayout<BaseLayoutConfig> {\n  /**\n   * Initial estimate of item size\n   */\n  _itemSize: Size = {width: 100, height: 100};\n\n  /**\n   * Indices of children mapped to their (position and length) in the scrolling\n   * direction. Used to keep track of children that are in range.\n   */\n  _physicalItems = new Map<number, ItemBounds>();\n\n  /**\n   * Used in tandem with _physicalItems to track children in range across\n   * reflows.\n   */\n  _newPhysicalItems = new Map<number, ItemBounds>();\n\n  /**\n   * Width and height of children by their index.\n   */\n  _metricsCache = new MetricsCache();\n\n  /**\n   * anchorIdx is the anchor around which we reflow. It is designed to allow\n   * jumping to any point of the scroll size. We choose it once and stick with\n   * it until stable. _first and _last are deduced around it.\n   */\n  _anchorIdx: number | null = null;\n\n  /**\n   * Position in the scrolling direction of the anchor child.\n   */\n  _anchorPos: number | null = null;\n\n  /**\n   * Whether all children in range were in range during the previous reflow.\n   */\n  _stable = true;\n\n  private _measureChildren = true;\n\n  _estimate = true;\n\n  // protected _defaultConfig: BaseLayoutConfig = Object.assign({}, super._defaultConfig, {\n\n  // })\n\n  // constructor(config: Layout1dConfig) {\n  //   super(config);\n  // }\n\n  get measureChildren() {\n    return this._measureChildren;\n  }\n\n  /**\n   * Determine the average size of all children represented in the sizes\n   * argument.\n   */\n  updateItemSizes(sizes: ChildMeasurements) {\n    this._metricsCache.update(sizes as Size & Margins, this.direction);\n    // if (this._nMeasured) {\n    // this._updateItemSize();\n    this._scheduleReflow();\n    // }\n  }\n\n  /**\n   * Set the average item size based on the total length and number of children\n   * in range.\n   */\n  // _updateItemSize() {\n  //   // Keep integer values.\n  //   this._itemSize[this._sizeDim] = this._metricsCache.averageChildSize;\n  // }\n\n  _getPhysicalItem(idx: number): ItemBounds | undefined {\n    return this._newPhysicalItems.get(idx) ?? this._physicalItems.get(idx);\n  }\n\n  _getSize(idx: number): number | undefined {\n    const item = this._getPhysicalItem(idx);\n    return item && this._metricsCache.getChildSize(idx);\n  }\n\n  _getAverageSize(): number {\n    return this._metricsCache.averageChildSize || this._itemSize[this._sizeDim];\n  }\n\n  _estimatePosition(idx: number): number {\n    const c = this._metricsCache;\n    if (this._first === -1 || this._last === -1) {\n      return (\n        c.averageMarginSize +\n        idx * (c.averageMarginSize + this._getAverageSize())\n      );\n    } else {\n      if (idx < this._first) {\n        const delta = this._first - idx;\n        const refItem = this._getPhysicalItem(this._first);\n        return (\n          refItem!.pos -\n          (c.getMarginSize(this._first - 1) || c.averageMarginSize) -\n          (delta * c.averageChildSize + (delta - 1) * c.averageMarginSize)\n        );\n      } else {\n        const delta = idx - this._last;\n        const refItem = this._getPhysicalItem(this._last);\n        return (\n          refItem!.pos +\n          (c.getChildSize(this._last) || c.averageChildSize) +\n          (c.getMarginSize(this._last) || c.averageMarginSize) +\n          delta * (c.averageChildSize + c.averageMarginSize)\n        );\n      }\n    }\n  }\n\n  /**\n   * Returns the position in the scrolling direction of the item at idx.\n   * Estimates it if the item at idx is not in the DOM.\n   */\n  _getPosition(idx: number): number {\n    const item = this._getPhysicalItem(idx);\n    const {averageMarginSize} = this._metricsCache;\n    return idx === 0\n      ? this._metricsCache.getMarginSize(0) ?? averageMarginSize\n      : item\n        ? item.pos\n        : this._estimatePosition(idx);\n  }\n\n  _calculateAnchor(lower: number, upper: number): number {\n    if (lower <= 0) {\n      return 0;\n    }\n    if (upper > this._scrollSize - this._viewDim1) {\n      return this.items.length - 1;\n    }\n    return Math.max(\n      0,\n      Math.min(\n        this.items.length - 1,\n        Math.floor((lower + upper) / 2 / this._delta)\n      )\n    );\n  }\n\n  _getAnchor(lower: number, upper: number): number {\n    if (this._physicalItems.size === 0) {\n      return this._calculateAnchor(lower, upper);\n    }\n    if (this._first < 0) {\n      return this._calculateAnchor(lower, upper);\n    }\n    if (this._last < 0) {\n      return this._calculateAnchor(lower, upper);\n    }\n\n    const firstItem = this._getPhysicalItem(this._first),\n      lastItem = this._getPhysicalItem(this._last),\n      firstMin = firstItem!.pos,\n      lastMin = lastItem!.pos,\n      lastMax = lastMin + this._metricsCache.getChildSize(this._last)!;\n\n    if (lastMax < lower) {\n      // Window is entirely past physical items, calculate new anchor\n      return this._calculateAnchor(lower, upper);\n    }\n    if (firstMin > upper) {\n      // Window is entirely before physical items, calculate new anchor\n      return this._calculateAnchor(lower, upper);\n    }\n    // Window contains a physical item\n    // Find one, starting with the one that was previously first visible\n    let candidateIdx = this._firstVisible - 1;\n    let cMax = -Infinity;\n    while (cMax < lower) {\n      const candidate = this._getPhysicalItem(++candidateIdx);\n      cMax = candidate!.pos + this._metricsCache.getChildSize(candidateIdx)!;\n    }\n    return candidateIdx;\n  }\n\n  /**\n   * Updates _first and _last based on items that should be in the current\n   * viewed range.\n   */\n  _getActiveItems() {\n    if (this._viewDim1 === 0 || this.items.length === 0) {\n      this._clearItems();\n    } else {\n      this._getItems();\n    }\n  }\n\n  /**\n   * Sets the range to empty.\n   */\n  _clearItems() {\n    this._first = -1;\n    this._last = -1;\n    this._physicalMin = 0;\n    this._physicalMax = 0;\n    const items = this._newPhysicalItems;\n    this._newPhysicalItems = this._physicalItems;\n    this._newPhysicalItems.clear();\n    this._physicalItems = items;\n    this._stable = true;\n  }\n\n  /*\n   * Updates _first and _last based on items that should be in the given range.\n   */\n  _getItems() {\n    const items = this._newPhysicalItems;\n    this._stable = true;\n    let lower, upper;\n\n    // The anchorIdx is the anchor around which we reflow. It is designed to\n    // allow jumping to any point of the scroll size. We choose it once and\n    // stick with it until stable. first and last are deduced around it.\n\n    // If we have a pinned item, we anchor on it\n    if (this.pin !== null) {\n      const {index} = this.pin;\n      this._anchorIdx = index;\n      this._anchorPos = this._getPosition(index);\n    }\n\n    // Determine the lower and upper bounds of the region to be\n    // rendered, relative to the viewport\n    lower = this._scrollPosition - this._overhang; //leadingOverhang;\n    upper = this._scrollPosition + this._viewDim1 + this._overhang; // trailingOverhang;\n\n    if (upper < 0 || lower > this._scrollSize) {\n      this._clearItems();\n      return;\n    }\n\n    // If we are scrolling to a specific index or if we are doing another\n    // pass to stabilize a previously started reflow, we will already\n    // have an anchor. If not, establish an anchor now.\n    if (this._anchorIdx === null || this._anchorPos === null) {\n      this._anchorIdx = this._getAnchor(lower, upper);\n      this._anchorPos = this._getPosition(this._anchorIdx);\n    }\n\n    let anchorSize = this._getSize(this._anchorIdx);\n    if (anchorSize === undefined) {\n      this._stable = false;\n      anchorSize = this._getAverageSize();\n    }\n\n    const anchorLeadingMargin =\n      this._metricsCache.getMarginSize(this._anchorIdx) ??\n      this._metricsCache.averageMarginSize;\n    const anchorTrailingMargin =\n      this._metricsCache.getMarginSize(this._anchorIdx + 1) ??\n      this._metricsCache.averageMarginSize;\n\n    if (this._anchorIdx === 0) {\n      this._anchorPos = anchorLeadingMargin;\n    }\n\n    if (this._anchorIdx === this.items.length - 1) {\n      this._anchorPos = this._scrollSize - anchorTrailingMargin - anchorSize;\n    }\n\n    // Anchor might be outside bounds, so prefer correcting the error and keep\n    // that anchorIdx.\n    let anchorErr = 0;\n\n    if (this._anchorPos + anchorSize + anchorTrailingMargin < lower) {\n      anchorErr = lower - (this._anchorPos + anchorSize + anchorTrailingMargin);\n    }\n\n    if (this._anchorPos - anchorLeadingMargin > upper) {\n      anchorErr = upper - (this._anchorPos - anchorLeadingMargin);\n    }\n\n    if (anchorErr) {\n      this._scrollPosition -= anchorErr;\n      lower -= anchorErr;\n      upper -= anchorErr;\n      this._scrollError += anchorErr;\n    }\n\n    items.set(this._anchorIdx, {pos: this._anchorPos, size: anchorSize});\n\n    this._first = this._last = this._anchorIdx;\n    this._physicalMin = this._anchorPos - anchorLeadingMargin;\n    this._physicalMax = this._anchorPos + anchorSize + anchorTrailingMargin;\n\n    while (this._physicalMin > lower && this._first > 0) {\n      let size = this._getSize(--this._first);\n      if (size === undefined) {\n        this._stable = false;\n        size = this._getAverageSize();\n      }\n      let margin = this._metricsCache.getMarginSize(this._first);\n      if (margin === undefined) {\n        this._stable = false;\n        margin = this._metricsCache.averageMarginSize;\n      }\n      this._physicalMin -= size;\n      const pos = this._physicalMin;\n      items.set(this._first, {pos, size});\n      this._physicalMin -= margin;\n      if (this._stable === false && this._estimate === false) {\n        break;\n      }\n    }\n\n    while (this._physicalMax < upper && this._last < this.items.length - 1) {\n      let size = this._getSize(++this._last);\n      if (size === undefined) {\n        this._stable = false;\n        size = this._getAverageSize();\n      }\n      let margin = this._metricsCache.getMarginSize(this._last);\n      if (margin === undefined) {\n        this._stable = false;\n        margin = this._metricsCache.averageMarginSize;\n      }\n      const pos = this._physicalMax;\n      items.set(this._last, {pos, size});\n      this._physicalMax += size + margin;\n      if (!this._stable && !this._estimate) {\n        break;\n      }\n    }\n\n    // This handles the cases where we were relying on estimated sizes.\n    const extentErr = this._calculateError();\n    if (extentErr) {\n      this._physicalMin -= extentErr;\n      this._physicalMax -= extentErr;\n      this._anchorPos -= extentErr;\n      this._scrollPosition -= extentErr;\n      items.forEach((item) => (item.pos -= extentErr));\n      this._scrollError += extentErr;\n    }\n\n    if (this._stable) {\n      this._newPhysicalItems = this._physicalItems;\n      this._newPhysicalItems.clear();\n      this._physicalItems = items;\n    }\n  }\n\n  _calculateError(): number {\n    if (this._first === 0) {\n      return this._physicalMin;\n    } else if (this._physicalMin <= 0) {\n      return this._physicalMin - this._first * this._delta;\n    } else if (this._last === this.items.length - 1) {\n      return this._physicalMax - this._scrollSize;\n    } else if (this._physicalMax >= this._scrollSize) {\n      return (\n        this._physicalMax -\n        this._scrollSize +\n        (this.items.length - 1 - this._last) * this._delta\n      );\n    }\n    return 0;\n  }\n\n  override _reflow() {\n    const {_first, _last} = this;\n    super._reflow();\n    if (\n      (this._first === -1 && this._last == -1) ||\n      (this._first === _first && this._last === _last)\n    ) {\n      this._resetReflowState();\n    }\n  }\n\n  _resetReflowState() {\n    this._anchorIdx = null;\n    this._anchorPos = null;\n    this._stable = true;\n  }\n\n  _updateScrollSize() {\n    const {averageMarginSize} = this._metricsCache;\n    this._scrollSize = Math.max(\n      1,\n      this.items.length * (averageMarginSize + this._getAverageSize()) +\n        averageMarginSize\n    );\n  }\n\n  /**\n   * Returns the average size (precise or estimated) of an item in the scrolling direction,\n   * including any surrounding space.\n   */\n  protected get _delta(): number {\n    const {averageMarginSize} = this._metricsCache;\n    return this._getAverageSize() + averageMarginSize;\n  }\n\n  /**\n   * Returns the top and left positioning of the item at idx.\n   */\n  _getItemPosition(idx: number): Positions {\n    return {\n      [this._positionDim]: this._getPosition(idx),\n      [this._secondaryPositionDim]: 0,\n      [offset(this.direction)]: -(\n        this._metricsCache.getLeadingMarginValue(idx, this.direction) ??\n        this._metricsCache.averageMarginSize\n      ),\n    } as Positions;\n  }\n\n  /**\n   * Returns the height and width of the item at idx.\n   */\n  _getItemSize(idx: number): Size {\n    return {\n      [this._sizeDim]: this._getSize(idx) || this._getAverageSize(),\n      [this._secondarySizeDim]: this._itemSize[this._secondarySizeDim],\n    } as Size;\n  }\n\n  _viewDim2Changed() {\n    this._metricsCache.clear();\n    this._scheduleReflow();\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
