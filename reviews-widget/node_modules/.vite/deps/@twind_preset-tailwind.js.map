{
  "version": 3,
  "sources": ["../../@twind/src/baseTheme.ts", "../../@twind/src/preflight.ts", "../../@twind/src/internal/to-class-name.ts", "../../@twind/src/runtime.ts", "../../@twind/src/internal/format.ts", "../../@twind/src/utils.ts", "../../@twind/src/internal/precedence.ts", "../../@twind/src/internal/registry.ts", "../../@twind/src/internal/stringify.ts", "../../@twind/src/internal/sorted-insertion-index.ts", "../../@twind/src/colors.ts", "../../@twind/src/internal/serialize.ts", "../../@twind/src/internal/merge.ts", "../../@twind/src/internal/translate.ts", "../../@twind/src/internal/define.ts", "../../@twind/src/parse.ts", "../../@twind/src/internal/interleave.ts", "../../@twind/src/internal/interpolate.ts", "../../@twind/src/alias.ts", "../../@twind/src/internal/astish.ts", "../../@twind/src/css.ts", "../../@twind/src/animation.ts", "../../@twind/src/rules.ts", "../../@twind/src/autocomplete.ts", "../../@twind/src/cx.ts", "../../@twind/src/define-config.ts", "../../@twind/src/internal/warn.ts", "../../@twind/src/internal/context.ts", "../../@twind/src/twind.ts", "../../@twind/src/internal/theme.ts", "../../@twind/src/internal/changed.ts", "../../@twind/src/observe.ts", "../../@twind/src/sheets.ts", "../../@twind/src/inject-global.ts", "../../@twind/src/install.ts", "../../@twind/src/keyframes.ts", "../../@twind/src/ssr.ts", "../../@twind/src/internal/parse-html.ts", "../../@twind/src/style.ts", "../../@twind/src/tx.ts", "../../@twind/src/rules.ts", "../../@twind/src/variants.ts", "../../@twind/src/base.ts", "../../@twind/src/colors.ts", "../../@twind/src/index.ts"],
  "sourcesContent": ["/**\n * @module @twind/preset-tailwind/baseTheme\n */\n\nimport type { ThemeSection, ThemeSectionResolver } from '@twind/core'\nimport type { TailwindTheme } from './types'\n\nexport type OmitedSections =\n  | 'aria'\n  | 'backgroundPosition'\n  | 'colors'\n  | 'container'\n  | 'cursor'\n  | 'data'\n  | 'gridColumnEnd'\n  | 'gridColumnStart'\n  | 'gridRowEnd'\n  | 'gridRowStart'\n  | 'listStyleType'\n  | 'objectPosition'\n  | 'supports'\n  | 'transformOrigin'\n\nexport type StableSections =\n  | 'screens'\n  | 'columns'\n  | 'spacing'\n  | 'durations'\n  | 'borderRadius'\n  | 'borderWidth'\n  | 'boxShadow'\n  | 'fontFamily'\n  | 'fontSize'\n\nexport type BaseTheme = {\n  [Section in StableSections]: Section extends 'fontSize'\n    ? {\n        xs: [size: string, lineHeight: string]\n        sm: [size: string, lineHeight: string]\n        base: [size: string, lineHeight: string]\n        lg: [size: string, lineHeight: string]\n        xl: [size: string, lineHeight: string]\n        '2xl': [size: string, lineHeight: string]\n        '3xl': [size: string, lineHeight: string]\n        '4xl': [size: string, lineHeight: string]\n        '5xl': [size: string, lineHeight: string]\n        '6xl': [size: string, lineHeight: string]\n        '7xl': [size: string, lineHeight: string]\n        '8xl': [size: string, lineHeight: string]\n        '9xl': [size: string, lineHeight: string]\n      }\n    : TailwindTheme[Section]\n} & {\n  [Section in Exclude<keyof TailwindTheme, StableSections | OmitedSections>]: ThemeSection<\n    TailwindTheme[Section],\n    TailwindTheme\n  >\n} & {\n  [Section in OmitedSections]?: ThemeSection<TailwindTheme[Section], TailwindTheme>\n}\n\n/**\n * @experimental\n */\nconst theme: BaseTheme = {\n  screens: {\n    sm: '640px',\n    md: '768px',\n    lg: '1024px',\n    xl: '1280px',\n    '2xl': '1536px',\n  },\n\n  columns: {\n    auto: 'auto',\n    // Handled by plugin,\n    // 1: '1',\n    // 2: '2',\n    // 3: '3',\n    // 4: '4',\n    // 5: '5',\n    // 6: '6',\n    // 7: '7',\n    // 8: '8',\n    // 9: '9',\n    // 10: '10',\n    // 11: '11',\n    // 12: '12',\n    '3xs': '16rem',\n    '2xs': '18rem',\n    xs: '20rem',\n    sm: '24rem',\n    md: '28rem',\n    lg: '32rem',\n    xl: '36rem',\n    '2xl': '42rem',\n    '3xl': '48rem',\n    '4xl': '56rem',\n    '5xl': '64rem',\n    '6xl': '72rem',\n    '7xl': '80rem',\n  },\n\n  spacing: {\n    px: '1px',\n    0: '0px',\n    .../* #__PURE__ */ linear(4, 'rem', 4, 0.5, 0.5),\n    // 0.5: '0.125rem',\n    // 1: '0.25rem',\n    // 1.5: '0.375rem',\n    // 2: '0.5rem',\n    // 2.5: '0.625rem',\n    // 3: '0.75rem',\n    // 3.5: '0.875rem',\n    // 4: '1rem',\n    .../* #__PURE__ */ linear(12, 'rem', 4, 5),\n    // 5: '1.25rem',\n    // 6: '1.5rem',\n    // 7: '1.75rem',\n    // 8: '2rem',\n    // 9: '2.25rem',\n    // 10: '2.5rem',\n    // 11: '2.75rem',\n    // 12: '3rem',\n    14: '3.5rem',\n    .../* #__PURE__ */ linear(64, 'rem', 4, 16, 4),\n    // 16: '4rem',\n    // 20: '5rem',\n    // 24: '6rem',\n    // 28: '7rem',\n    // 32: '8rem',\n    // 36: '9rem',\n    // 40: '10rem',\n    // 44: '11rem',\n    // 48: '12rem',\n    // 52: '13rem',\n    // 56: '14rem',\n    // 60: '15rem',\n    // 64: '16rem',\n    72: '18rem',\n    80: '20rem',\n    96: '24rem',\n  },\n\n  durations: {\n    75: '75ms',\n    100: '100ms',\n    150: '150ms',\n    200: '200ms',\n    300: '300ms',\n    500: '500ms',\n    700: '700ms',\n    1000: '1000ms',\n  },\n\n  animation: {\n    none: 'none',\n    spin: 'spin 1s linear infinite',\n    ping: 'ping 1s cubic-bezier(0,0,0.2,1) infinite',\n    pulse: 'pulse 2s cubic-bezier(0.4,0,0.6,1) infinite',\n    bounce: 'bounce 1s infinite',\n  },\n\n  aspectRatio: {\n    auto: 'auto',\n    square: '1/1',\n    video: '16/9',\n  },\n\n  backdropBlur: /* #__PURE__ */ alias('blur'),\n  backdropBrightness: /* #__PURE__ */ alias('brightness'),\n  backdropContrast: /* #__PURE__ */ alias('contrast'),\n  backdropGrayscale: /* #__PURE__ */ alias('grayscale'),\n  backdropHueRotate: /* #__PURE__ */ alias('hueRotate'),\n  backdropInvert: /* #__PURE__ */ alias('invert'),\n  backdropOpacity: /* #__PURE__ */ alias('opacity'),\n  backdropSaturate: /* #__PURE__ */ alias('saturate'),\n  backdropSepia: /* #__PURE__ */ alias('sepia'),\n\n  backgroundColor: /* #__PURE__ */ alias('colors'),\n  backgroundImage: {\n    none: 'none',\n    // These are built-in\n    // 'gradient-to-t': 'linear-gradient(to top, var(--tw-gradient-stops))',\n    // 'gradient-to-tr': 'linear-gradient(to top right, var(--tw-gradient-stops))',\n    // 'gradient-to-r': 'linear-gradient(to right, var(--tw-gradient-stops))',\n    // 'gradient-to-br': 'linear-gradient(to bottom right, var(--tw-gradient-stops))',\n    // 'gradient-to-b': 'linear-gradient(to bottom, var(--tw-gradient-stops))',\n    // 'gradient-to-bl': 'linear-gradient(to bottom left, var(--tw-gradient-stops))',\n    // 'gradient-to-l': 'linear-gradient(to left, var(--tw-gradient-stops))',\n    // 'gradient-to-tl': 'linear-gradient(to top left, var(--tw-gradient-stops))',\n  },\n  backgroundOpacity: /* #__PURE__ */ alias('opacity'),\n  // backgroundPosition: {\n  //   // The following are already handled by the plugin:\n  //   // center, right, left, bottom, top\n  //   // 'bottom-10px-right-20px' -> bottom 10px right 20px\n  // },\n  backgroundSize: {\n    auto: 'auto',\n    cover: 'cover',\n    contain: 'contain',\n  },\n  blur: {\n    none: 'none',\n    0: '0',\n    sm: '4px',\n    DEFAULT: '8px',\n    md: '12px',\n    lg: '16px',\n    xl: '24px',\n    '2xl': '40px',\n    '3xl': '64px',\n  },\n  brightness: {\n    .../* #__PURE__ */ linear(200, '', 100, 0, 50),\n    // 0: '0',\n    // 50: '.5',\n    // 150: '1.5',\n    // 200: '2',\n\n    .../* #__PURE__ */ linear(110, '', 100, 90, 5),\n    // 90: '.9',\n    // 95: '.95',\n    // 100: '1',\n    // 105: '1.05',\n    // 110: '1.1',\n    75: '0.75',\n    125: '1.25',\n  },\n  borderColor: ({ theme }) => ({\n    DEFAULT: theme('colors.gray.200', 'currentColor'),\n    ...theme('colors'),\n  }),\n  borderOpacity: /* #__PURE__ */ alias('opacity'),\n  borderRadius: {\n    none: '0px',\n    sm: '0.125rem',\n    DEFAULT: '0.25rem',\n    md: '0.375rem',\n    lg: '0.5rem',\n    xl: '0.75rem',\n    '2xl': '1rem',\n    '3xl': '1.5rem',\n    '1/2': '50%',\n    full: '9999px',\n  },\n  borderSpacing: /* #__PURE__ */ alias('spacing'),\n  borderWidth: {\n    DEFAULT: '1px',\n    .../* #__PURE__ */ exponential(8, 'px'),\n    // 0: '0px',\n    // 2: '2px',\n    // 4: '4px',\n    // 8: '8px',\n  },\n  boxShadow: {\n    sm: '0 1px 2px 0 rgba(0,0,0,0.05)',\n    DEFAULT: '0 1px 3px 0 rgba(0,0,0,0.1), 0 1px 2px -1px rgba(0,0,0,0.1)',\n    md: '0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -2px rgba(0,0,0,0.1)',\n    lg: '0 10px 15px -3px rgba(0,0,0,0.1), 0 4px 6px -4px rgba(0,0,0,0.1)',\n    xl: '0 20px 25px -5px rgba(0,0,0,0.1), 0 8px 10px -6px rgba(0,0,0,0.1)',\n    '2xl': '0 25px 50px -12px rgba(0,0,0,0.25)',\n    inner: 'inset 0 2px 4px 0 rgba(0,0,0,0.05)',\n    none: '0 0 #0000',\n  },\n  boxShadowColor: alias('colors'),\n  // container: {},\n  // cursor: {\n  //   // Default values are handled by plugin\n  // },\n  caretColor: /* #__PURE__ */ alias('colors'),\n  accentColor: ({ theme }) => ({\n    auto: 'auto',\n    ...theme('colors'),\n  }),\n  contrast: {\n    .../* #__PURE__ */ linear(200, '', 100, 0, 50),\n    // 0: '0',\n    // 50: '.5',\n    // 150: '1.5',\n    // 200: '2',\n    75: '0.75',\n    125: '1.25',\n  },\n  content: {\n    none: 'none',\n  },\n  divideColor: /* #__PURE__ */ alias('borderColor'),\n  divideOpacity: /* #__PURE__ */ alias('borderOpacity'),\n  divideWidth: /* #__PURE__ */ alias('borderWidth'),\n  dropShadow: {\n    sm: '0 1px 1px rgba(0,0,0,0.05)',\n    DEFAULT: ['0 1px 2px rgba(0,0,0,0.1)', '0 1px 1px rgba(0,0,0,0.06)'],\n    md: ['0 4px 3px rgba(0,0,0,0.07)', '0 2px 2px rgba(0,0,0,0.06)'],\n    lg: ['0 10px 8px rgba(0,0,0,0.04)', '0 4px 3px rgba(0,0,0,0.1)'],\n    xl: ['0 20px 13px rgba(0,0,0,0.03)', '0 8px 5px rgba(0,0,0,0.08)'],\n    '2xl': '0 25px 25px rgba(0,0,0,0.15)',\n    none: '0 0 #0000',\n  },\n  fill: ({ theme }) => ({\n    ...theme('colors'),\n    none: 'none',\n  }),\n  grayscale: {\n    DEFAULT: '100%',\n    0: '0',\n  },\n  hueRotate: {\n    0: '0deg',\n    15: '15deg',\n    30: '30deg',\n    60: '60deg',\n    90: '90deg',\n    180: '180deg',\n  },\n  invert: {\n    DEFAULT: '100%',\n    0: '0',\n  },\n  flex: {\n    1: '1 1 0%',\n    auto: '1 1 auto',\n    initial: '0 1 auto',\n    none: 'none',\n  },\n  flexBasis: ({ theme }) => ({\n    ...theme('spacing'),\n    ...ratios(2, 6),\n    // '1/2': '50%',\n    // '1/3': '33.333333%',\n    // '2/3': '66.666667%',\n    // '1/4': '25%',\n    // '2/4': '50%',\n    // '3/4': '75%',\n    // '1/5': '20%',\n    // '2/5': '40%',\n    // '3/5': '60%',\n    // '4/5': '80%',\n    // '1/6': '16.666667%',\n    // '2/6': '33.333333%',\n    // '3/6': '50%',\n    // '4/6': '66.666667%',\n    // '5/6': '83.333333%',\n\n    ...ratios(12, 12),\n    // '1/12': '8.333333%',\n    // '2/12': '16.666667%',\n    // '3/12': '25%',\n    // '4/12': '33.333333%',\n    // '5/12': '41.666667%',\n    // '6/12': '50%',\n    // '7/12': '58.333333%',\n    // '8/12': '66.666667%',\n    // '9/12': '75%',\n    // '10/12': '83.333333%',\n    // '11/12': '91.666667%',\n\n    auto: 'auto',\n    full: '100%',\n  }),\n  flexGrow: {\n    DEFAULT: 1,\n    0: 0,\n  },\n  flexShrink: {\n    DEFAULT: 1,\n    0: 0,\n  },\n  fontFamily: {\n    sans: 'ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,\"Noto Sans\",sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\"'.split(\n      ',',\n    ),\n    serif: 'ui-serif,Georgia,Cambria,\"Times New Roman\",Times,serif'.split(','),\n    mono: 'ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace'.split(\n      ',',\n    ),\n  },\n  fontSize: {\n    xs: ['0.75rem', '1rem'],\n    sm: ['0.875rem', '1.25rem'],\n    base: ['1rem', '1.5rem'],\n    lg: ['1.125rem', '1.75rem'],\n    xl: ['1.25rem', '1.75rem'],\n    '2xl': ['1.5rem', '2rem'],\n    '3xl': ['1.875rem', '2.25rem'],\n    '4xl': ['2.25rem', '2.5rem'],\n    '5xl': ['3rem', '1'],\n    '6xl': ['3.75rem', '1'],\n    '7xl': ['4.5rem', '1'],\n    '8xl': ['6rem', '1'],\n    '9xl': ['8rem', '1'],\n  },\n  fontWeight: {\n    thin: '100',\n    extralight: '200',\n    light: '300',\n    normal: '400',\n    medium: '500',\n    semibold: '600',\n    bold: '700',\n    extrabold: '800',\n    black: '900',\n  },\n  gap: /* #__PURE__ */ alias('spacing'),\n  gradientColorStops: /* #__PURE__ */ alias('colors'),\n  gridAutoColumns: {\n    auto: 'auto',\n    min: 'min-content',\n    max: 'max-content',\n    fr: 'minmax(0,1fr)',\n  },\n  gridAutoRows: {\n    auto: 'auto',\n    min: 'min-content',\n    max: 'max-content',\n    fr: 'minmax(0,1fr)',\n  },\n  gridColumn: {\n    // span-X is handled by the plugin: span-1 -> span 1 / span 1\n    auto: 'auto',\n    'span-full': '1 / -1',\n  },\n  // gridColumnEnd: {\n  //   // Defaults handled by plugin\n  // },\n  // gridColumnStart: {\n  //   // Defaults handled by plugin\n  // },\n  gridRow: {\n    // span-X is handled by the plugin: span-1 -> span 1 / span 1\n    auto: 'auto',\n    'span-full': '1 / -1',\n  },\n  // gridRowStart: {\n  //   // Defaults handled by plugin\n  // },\n  // gridRowEnd: {\n  //   // Defaults handled by plugin\n  // },\n  gridTemplateColumns: {\n    // numbers are handled by the plugin: 1 -> repeat(1, minmax(0, 1fr))\n    none: 'none',\n  },\n  gridTemplateRows: {\n    // numbers are handled by the plugin: 1 -> repeat(1, minmax(0, 1fr))\n    none: 'none',\n  },\n  height: ({ theme }) => ({\n    ...theme('spacing'),\n    ...ratios(2, 6),\n    // '1/2': '50%',\n    // '1/3': '33.333333%',\n    // '2/3': '66.666667%',\n    // '1/4': '25%',\n    // '2/4': '50%',\n    // '3/4': '75%',\n    // '1/5': '20%',\n    // '2/5': '40%',\n    // '3/5': '60%',\n    // '4/5': '80%',\n    // '1/6': '16.666667%',\n    // '2/6': '33.333333%',\n    // '3/6': '50%',\n    // '4/6': '66.666667%',\n    // '5/6': '83.333333%',\n    min: 'min-content',\n    max: 'max-content',\n    fit: 'fit-content',\n    auto: 'auto',\n    full: '100%',\n    screen: '100vh',\n  }),\n  inset: ({ theme }) => ({\n    ...theme('spacing'),\n    ...ratios(2, 4),\n    // '1/2': '50%',\n    // '1/3': '33.333333%',\n    // '2/3': '66.666667%',\n    // '1/4': '25%',\n    // '2/4': '50%',\n    // '3/4': '75%',\n    auto: 'auto',\n    full: '100%',\n  }),\n  keyframes: {\n    spin: {\n      from: {\n        transform: 'rotate(0deg)',\n      },\n      to: {\n        transform: 'rotate(360deg)',\n      },\n    },\n    ping: {\n      '0%': {\n        transform: 'scale(1)',\n        opacity: '1',\n      },\n      '75%,100%': {\n        transform: 'scale(2)',\n        opacity: '0',\n      },\n    },\n    pulse: {\n      '0%,100%': {\n        opacity: '1',\n      },\n      '50%': {\n        opacity: '.5',\n      },\n    },\n    bounce: {\n      '0%, 100%': {\n        transform: 'translateY(-25%)',\n        animationTimingFunction: 'cubic-bezier(0.8,0,1,1)',\n      },\n      '50%': {\n        transform: 'none',\n        animationTimingFunction: 'cubic-bezier(0,0,0.2,1)',\n      },\n    },\n  },\n  letterSpacing: {\n    tighter: '-0.05em',\n    tight: '-0.025em',\n    normal: '0em',\n    wide: '0.025em',\n    wider: '0.05em',\n    widest: '0.1em',\n  },\n  lineHeight: {\n    .../* #__PURE__ */ linear(10, 'rem', 4, 3),\n    // 3: '.75rem',\n    // 4: '1rem',\n    // 5: '1.25rem',\n    // 6: '1.5rem',\n    // 7: '1.75rem',\n    // 8: '2rem',\n    // 9: '2.25rem',\n    // 10: '2.5rem',\n    none: '1',\n    tight: '1.25',\n    snug: '1.375',\n    normal: '1.5',\n    relaxed: '1.625',\n    loose: '2',\n  },\n  // listStyleType: {\n  //   // Defaults handled by plugin\n  // },\n  margin: ({ theme }) => ({\n    auto: 'auto',\n    ...theme('spacing'),\n  }),\n  maxHeight: ({ theme }) => ({\n    full: '100%',\n    min: 'min-content',\n    max: 'max-content',\n    fit: 'fit-content',\n    screen: '100vh',\n    ...theme('spacing'),\n  }),\n  maxWidth: ({ theme, breakpoints }) => ({\n    ...breakpoints(theme('screens')),\n    none: 'none',\n    0: '0rem',\n    xs: '20rem',\n    sm: '24rem',\n    md: '28rem',\n    lg: '32rem',\n    xl: '36rem',\n    '2xl': '42rem',\n    '3xl': '48rem',\n    '4xl': '56rem',\n    '5xl': '64rem',\n    '6xl': '72rem',\n    '7xl': '80rem',\n    full: '100%',\n    min: 'min-content',\n    max: 'max-content',\n    fit: 'fit-content',\n    prose: '65ch',\n  }),\n  minHeight: {\n    0: '0px',\n    full: '100%',\n    min: 'min-content',\n    max: 'max-content',\n    fit: 'fit-content',\n    screen: '100vh',\n  },\n  minWidth: {\n    0: '0px',\n    full: '100%',\n    min: 'min-content',\n    max: 'max-content',\n    fit: 'fit-content',\n  },\n  // objectPosition: {\n  //   // The plugins joins all arguments by default\n  // },\n  opacity: {\n    .../* #__PURE__ */ linear(100, '', 100, 0, 10),\n    // 0: '0',\n    // 10: '0.1',\n    // 20: '0.2',\n    // 30: '0.3',\n    // 40: '0.4',\n    // 60: '0.6',\n    // 70: '0.7',\n    // 80: '0.8',\n    // 90: '0.9',\n    // 100: '1',\n    5: '0.05',\n    25: '0.25',\n    75: '0.75',\n    95: '0.95',\n  },\n  order: {\n    // Handled by plugin\n    // 1: '1',\n    // 2: '2',\n    // 3: '3',\n    // 4: '4',\n    // 5: '5',\n    // 6: '6',\n    // 7: '7',\n    // 8: '8',\n    // 9: '9',\n    // 10: '10',\n    // 11: '11',\n    // 12: '12',\n    first: '-9999',\n    last: '9999',\n    none: '0',\n  },\n  padding: /* #__PURE__ */ alias('spacing'),\n  placeholderColor: /* #__PURE__ */ alias('colors'),\n  placeholderOpacity: /* #__PURE__ */ alias('opacity'),\n  outlineColor: /* #__PURE__ */ alias('colors'),\n  outlineOffset: /* #__PURE__ */ exponential(8, 'px'),\n  // 0: '0px',\n  // 1: '1px',\n  // 2: '2px',\n  // 4: '4px',\n  // 8: '8px',,\n  outlineWidth: /* #__PURE__ */ exponential(8, 'px'),\n  // 0: '0px',\n  // 1: '1px',\n  // 2: '2px',\n  // 4: '4px',\n  // 8: '8px',,\n  ringColor: ({ theme }) => ({\n    ...theme('colors'),\n    DEFAULT: '#3b82f6',\n  }),\n  ringOffsetColor: /* #__PURE__ */ alias('colors'),\n  ringOffsetWidth: /* #__PURE__ */ exponential(8, 'px'),\n  // 0: '0px',\n  // 1: '1px',\n  // 2: '2px',\n  // 4: '4px',\n  // 8: '8px',,\n  ringOpacity: ({ theme }) => ({\n    ...theme('opacity'),\n    DEFAULT: '0.5',\n  }),\n  ringWidth: {\n    DEFAULT: '3px',\n    .../* #__PURE__ */ exponential(8, 'px'),\n    // 0: '0px',\n    // 1: '1px',\n    // 2: '2px',\n    // 4: '4px',\n    // 8: '8px',\n  },\n  rotate: {\n    .../* #__PURE__ */ exponential(2, 'deg'),\n    // 0: '0deg',\n    // 1: '1deg',\n    // 2: '2deg',\n    .../* #__PURE__ */ exponential(12, 'deg', 3),\n    // 3: '3deg',\n    // 6: '6deg',\n    // 12: '12deg',\n    .../* #__PURE__ */ exponential(180, 'deg', 45),\n    // 45: '45deg',\n    // 90: '90deg',\n    // 180: '180deg',\n  },\n  saturate: /* #__PURE__ */ linear(200, '', 100, 0, 50),\n  // 0: '0',\n  // 50: '.5',\n  // 100: '1',\n  // 150: '1.5',\n  // 200: '2',\n  scale: {\n    .../* #__PURE__ */ linear(150, '', 100, 0, 50),\n    // 0: '0',\n    // 50: '.5',\n    // 150: '1.5',\n    .../* #__PURE__ */ linear(110, '', 100, 90, 5),\n    // 90: '.9',\n    // 95: '.95',\n    // 100: '1',\n    // 105: '1.05',\n    // 110: '1.1',\n    75: '0.75',\n    125: '1.25',\n  },\n  scrollMargin: /* #__PURE__ */ alias('spacing'),\n  scrollPadding: /* #__PURE__ */ alias('spacing'),\n  sepia: {\n    0: '0',\n    DEFAULT: '100%',\n  },\n  skew: {\n    .../* #__PURE__ */ exponential(2, 'deg'),\n    // 0: '0deg',\n    // 1: '1deg',\n    // 2: '2deg',\n    .../* #__PURE__ */ exponential(12, 'deg', 3),\n    // 3: '3deg',\n    // 6: '6deg',\n    // 12: '12deg',\n  },\n  space: /* #__PURE__ */ alias('spacing'),\n  stroke: ({ theme }) => ({\n    ...theme('colors'),\n    none: 'none',\n  }),\n  strokeWidth: /* #__PURE__ */ linear(2),\n  // 0: '0',\n  // 1: '1',\n  // 2: '2',,\n  textColor: /* #__PURE__ */ alias('colors'),\n  textDecorationColor: /* #__PURE__ */ alias('colors'),\n  textDecorationThickness: {\n    'from-font': 'from-font',\n    auto: 'auto',\n    .../* #__PURE__ */ exponential(8, 'px'),\n    // 0: '0px',\n    // 1: '1px',\n    // 2: '2px',\n    // 4: '4px',\n    // 8: '8px',\n  },\n  textUnderlineOffset: {\n    auto: 'auto',\n    .../* #__PURE__ */ exponential(8, 'px'),\n    // 0: '0px',\n    // 1: '1px',\n    // 2: '2px',\n    // 4: '4px',\n    // 8: '8px',\n  },\n  textIndent: /* #__PURE__ */ alias('spacing'),\n  textOpacity: /* #__PURE__ */ alias('opacity'),\n  // transformOrigin: {\n  //   // The following are already handled by the plugin:\n  //   // center, right, left, bottom, top\n  //   // 'bottom-10px-right-20px' -> bottom 10px right 20px\n  // },\n  transitionDuration: ({ theme }) => ({\n    ...theme('durations'),\n    DEFAULT: '150ms',\n  }),\n  transitionDelay: /* #__PURE__ */ alias('durations'),\n  transitionProperty: {\n    none: 'none',\n    all: 'all',\n    DEFAULT:\n      'color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter',\n    colors: 'color,background-color,border-color,text-decoration-color,fill,stroke',\n    opacity: 'opacity',\n    shadow: 'box-shadow',\n    transform: 'transform',\n  },\n  transitionTimingFunction: {\n    DEFAULT: 'cubic-bezier(0.4,0,0.2,1)',\n    linear: 'linear',\n    in: 'cubic-bezier(0.4,0,1,1)',\n    out: 'cubic-bezier(0,0,0.2,1)',\n    'in-out': 'cubic-bezier(0.4,0,0.2,1)',\n  },\n  translate: ({ theme }) => ({\n    ...theme('spacing'),\n    ...ratios(2, 4),\n    // '1/2': '50%',\n    // '1/3': '33.333333%',\n    // '2/3': '66.666667%',\n    // '1/4': '25%',\n    // '2/4': '50%',\n    // '3/4': '75%',\n    full: '100%',\n  }),\n  width: ({ theme }) => ({\n    min: 'min-content',\n    max: 'max-content',\n    fit: 'fit-content',\n    screen: '100vw',\n    ...theme('flexBasis'),\n  }),\n  willChange: {\n    scroll: 'scroll-position',\n    // other options handled by rules\n    // auto: 'auto',\n    // contents: 'contents',\n    // transform: 'transform',\n  },\n  zIndex: {\n    .../* #__PURE__ */ linear(50, '', 1, 0, 10),\n    // 0: '0',\n    // 10: '10',\n    // 20: '20',\n    // 30: '30',\n    // 40: '40',\n    // 50: '50',\n    auto: 'auto',\n  },\n}\n\nexport default theme\n\n// '1/2': '50%',\n// '1/3': '33.333333%',\n// '2/3': '66.666667%',\n// '1/4': '25%',\n// '2/4': '50%',\n// '3/4': '75%',\n// '1/5': '20%',\n// '2/5': '40%',\n// '3/5': '60%',\n// '4/5': '80%',\n// '1/6': '16.666667%',\n// '2/6': '33.333333%',\n// '3/6': '50%',\n// '4/6': '66.666667%',\n// '5/6': '83.333333%',\nfunction ratios(start: number, end: number): Record<string, string> {\n  const result: Record<string, string> = {}\n\n  do {\n    // XXX: using var to avoid strange bug when generating cjs where `= 1` is removed\n    // eslint-disable-next-line no-var\n    for (var dividend = 1; dividend < start; dividend++) {\n      result[`${dividend}/${start}`] = Number(((dividend / start) * 100).toFixed(6)) + '%'\n    }\n  } while (++start <= end)\n\n  return result\n}\n\n// 0: '0px',\n// 2: '2px',\n// 4: '4px',\n// 8: '8px',\nfunction exponential(stop: number, unit: string, start = 0): Record<string, string> {\n  const result: Record<string, string> = {}\n\n  for (; start <= stop; start = start * 2 || 1) {\n    result[start] = start + unit\n  }\n\n  return result\n}\n\n// 3: '.75rem',\n// 4: '1rem',\n// 5: '1.25rem',\n// 6: '1.5rem',\n// 7: '1.75rem',\n// 8: '2rem',\n// 9: '2.25rem',\n// 10: '2.5rem',\nfunction linear(\n  stop: number,\n  unit = '',\n  divideBy = 1,\n  start = 0,\n  step = 1,\n  result: Record<string, string> = {},\n  // eslint-disable-next-line max-params\n): Record<string, string> {\n  for (; start <= stop; start += step) {\n    result[start] = start / divideBy + unit\n  }\n\n  return result\n}\n\nfunction alias<Section extends keyof TailwindTheme>(\n  section: Section,\n): ThemeSectionResolver<TailwindTheme[Section], TailwindTheme> {\n  return ({ theme }) => theme(section)\n}\n", "/**\n * @module @twind/preset-tailwind/preflight\n */\n\nimport type { Preflight } from '@twind/core'\n\nimport baseTheme from './baseTheme'\n\nconst preflight: Preflight = {\n  /*\n    1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n    2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n    */\n  '*,::before,::after': {\n    boxSizing: 'border-box' /* 1 */,\n    borderWidth: '0' /* 2 */,\n    borderStyle: 'solid' /* 2 */,\n    borderColor: 'theme(borderColor.DEFAULT, currentColor)' /* 2 */,\n  },\n\n  '::before,::after': { '--tw-content': \"''\" },\n\n  /*\n    1. Use a consistent sensible line-height in all browsers.\n    2. Prevent adjustments of font size after orientation changes in iOS.\n    3. Use a more readable tab size.\n    4. Use the user's configured `sans` font-family by default.\n    5. Use the user's configured `sans` font-feature-settings by default.\n    */\n  html: {\n    lineHeight: 1.5 /* 1 */,\n    WebkitTextSizeAdjust: '100%' /* 2 */,\n    MozTabSize: '4' /* 3 */,\n    tabSize: 4 /* 3 */,\n    fontFamily: `theme(fontFamily.sans, ${\n      (baseTheme.fontFamily as Record<string, string>).sans\n    })` /* 4 */,\n    fontFeatureSettings: 'theme(fontFamily.sans[1].fontFeatureSettings, normal)' /* 5 */,\n  },\n\n  /*\n    1. Remove the margin in all browsers.\n    2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n    */\n  body: { margin: '0' /* 1 */, lineHeight: 'inherit' /* 2 */ },\n\n  /*\n    1. Add the correct height in Firefox.\n    2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n    3. Ensure horizontal rules are visible by default.\n    */\n  hr: { height: '0' /* 1 */, color: 'inherit', /* 2 */ borderTopWidth: '1px' /* 3 */ },\n\n  /*\n    Add the correct text decoration in Chrome, Edge, and Safari.\n    */\n  'abbr:where([title])': { textDecoration: 'underline dotted' },\n\n  /*\n    Remove the default font size and weight for headings.\n    */\n  'h1,h2,h3,h4,h5,h6': { fontSize: 'inherit', fontWeight: 'inherit' },\n\n  /*\n    Reset links to optimize for opt-in styling instead of opt-out.\n    */\n  a: { color: 'inherit', textDecoration: 'inherit' },\n\n  /*\n    Add the correct font weight in Edge and Safari.\n    */\n  'b,strong': { fontWeight: 'bolder' },\n\n  /*\n    1. Use the user's configured `mono` font family by default.\n    2. Use the user's configured `mono` font-feature-settings by default.\n    3. Correct the odd `em` font sizing in all browsers.\n    */\n  'code,kbd,samp,pre': {\n    fontFamily: `theme(fontFamily.mono, ${(baseTheme.fontFamily as Record<string, string>).mono})`,\n    fontFeatureSettings: 'theme(fontFamily.mono[1].fontFeatureSettings, normal)',\n    fontSize: '1em',\n  },\n\n  /*\n    Add the correct font size in all browsers.\n    */\n  small: { fontSize: '80%' },\n\n  /*\n    Prevent `sub` and `sup` elements from affecting the line height in all browsers.\n    */\n  'sub,sup': {\n    fontSize: '75%',\n    lineHeight: 0,\n    position: 'relative',\n    verticalAlign: 'baseline',\n  },\n  sub: { bottom: '-0.25em' },\n  sup: { top: '-0.5em' },\n\n  /*\n    1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n    2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n    3. Remove gaps between table borders by default.\n    */\n  table: {\n    textIndent: '0' /* 1 */,\n    borderColor: 'inherit' /* 2 */,\n    borderCollapse: 'collapse' /* 3 */,\n  },\n\n  /*\n    1. Change the font styles in all browsers.\n    2. Remove the margin in Firefox and Safari.\n    3. Remove default padding in all browsers.\n    */\n  'button,input,optgroup,select,textarea': {\n    fontFamily: 'inherit' /* 1 */,\n    fontSize: '100%' /* 1 */,\n    lineHeight: 'inherit' /* 1 */,\n    color: 'inherit' /* 1 */,\n    margin: '0' /* 2 */,\n    padding: '0' /* 3 */,\n  },\n\n  /*\n    Remove the inheritance of text transform in Edge and Firefox.\n    */\n  'button,select': { textTransform: 'none' },\n\n  /*\n    1. Correct the inability to style clickable types in iOS and Safari.\n    2. Remove default button styles.\n    */\n  \"button,[type='button'],[type='reset'],[type='submit']\": {\n    WebkitAppearance: 'button' /* 1 */,\n    backgroundColor: 'transparent' /* 2 */,\n    backgroundImage: 'none' /* 4 */,\n  },\n\n  /*\n    Use the modern Firefox focus style for all focusable elements.\n    */\n  ':-moz-focusring': { outline: 'auto' },\n\n  /*\n    Remove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n    */\n  ':-moz-ui-invalid': { boxShadow: 'none' },\n\n  /*\n    Add the correct vertical alignment in Chrome and Firefox.\n    */\n  progress: { verticalAlign: 'baseline' },\n\n  /*\n    Correct the cursor style of increment and decrement buttons in Safari.\n    */\n  '::-webkit-inner-spin-button,::-webkit-outer-spin-button': {\n    height: 'auto',\n  },\n\n  /*\n    1. Correct the odd appearance in Chrome and Safari.\n    2. Correct the outline style in Safari.\n    */\n  \"[type='search']\": { WebkitAppearance: 'textfield' /* 1 */, outlineOffset: '-2px' /* 2 */ },\n\n  /*\n    Remove the inner padding in Chrome and Safari on macOS.\n    */\n  '::-webkit-search-decoration': { WebkitAppearance: 'none' },\n\n  /*\n    1. Correct the inability to style clickable types in iOS and Safari.\n    2. Change font properties to `inherit` in Safari.\n    */\n  '::-webkit-file-upload-button': {\n    WebkitAppearance: 'button' /* 1 */,\n    font: 'inherit' /* 2 */,\n  },\n\n  /*\n    Add the correct display in Chrome and Safari.\n    */\n  summary: { display: 'list-item' },\n\n  /*\n    Removes the default spacing and border for appropriate elements.\n    */\n  'blockquote,dl,dd,h1,h2,h3,h4,h5,h6,hr,figure,p,pre': {\n    margin: '0',\n  },\n  fieldset: { margin: '0', padding: '0' },\n  legend: { padding: '0' },\n  'ol,ul,menu': { listStyle: 'none', margin: '0', padding: '0' },\n\n  /*\n    Prevent resizing textareas horizontally by default.\n    */\n  textarea: { resize: 'vertical' },\n\n  /*\n    1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n    2. Set the default placeholder color to the user's configured gray 400 color.\n    */\n  'input::placeholder,textarea::placeholder': {\n    opacity: 1 /* 1 */,\n    color: 'theme(colors.gray.400, #9ca3af)' /* 2 */,\n  },\n\n  /*\n    Set the default cursor for buttons.\n    */\n  'button,[role=\"button\"]': { cursor: 'pointer' },\n\n  /*\n    Make sure disabled buttons don't get the pointer cursor.\n    */\n  ':disabled': { cursor: 'default' },\n\n  /*\n    1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n    2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n      This can trigger a poorly considered lint error in some tools but is included by design.\n    */\n  'img,svg,video,canvas,audio,iframe,embed,object': {\n    display: 'block' /* 1 */,\n    verticalAlign: 'middle' /* 2 */,\n  },\n\n  /*\n    Constrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n    */\n  'img,video': { maxWidth: '100%', height: 'auto' },\n\n  /* Make elements with the HTML hidden attribute stay hidden by default */\n  '[hidden]': { display: 'none' },\n}\n\nexport default preflight\n", "import type { ParsedRule } from '../parse'\n\nexport function toClassName(rule: ParsedRule): string {\n  return [...rule.v, (rule.i ? '!' : '') + rule.n].join(':')\n}\n", "import type {\n  Twind,\n  BaseTheme,\n  TwindConfig,\n  Sheet,\n  TwindUserConfig,\n  ExtractThemes,\n  Preset,\n} from './types'\n\nimport { twind } from './twind'\nimport { observe } from './observe'\nimport { getSheet } from './sheets'\nimport { noop } from './utils'\nimport { DEV } from 'distilt/env'\n\n/**\n * @group Runtime\n * @param install\n * @returns\n */\nexport function auto(install: () => void): () => void {\n  // If we run in the browser we call install at latest when the body is inserted\n  // This algorith works well for _normal_ scripts (`<script src=\"...\"></script>`)\n  // but not for modules because those are executed __after__ the DOM is ready\n  // and we would have FOUC\n  if (typeof document != 'undefined' && document.currentScript) {\n    const cancelAutoInstall = () => observer.disconnect()\n\n    const observer: MutationObserver = new MutationObserver((mutationsList) => {\n      for (const { target } of mutationsList) {\n        // If we reach the body we immediately run the install to prevent FOUC\n        if (target === document.body) {\n          install()\n          return cancelAutoInstall()\n        }\n      }\n    })\n\n    observer.observe(document.documentElement, {\n      childList: true,\n      subtree: true,\n    })\n\n    return cancelAutoInstall\n  }\n\n  return noop\n}\n\nlet active: Twind\n\nfunction assertActive() {\n  if (DEV && !active) {\n    throw new Error(\n      `No active twind instance found. Make sure to call setup or install before accessing tw.`,\n    )\n  }\n}\n\n/**\n * A proxy to the currently active Twind instance.\n * @group Style Injectors\n */\nexport const tw: Twind<any, any> = /* #__PURE__ */ new Proxy(\n  // just exposing the active as tw should work with most bundlers\n  // as ES module export can be re-assigned BUT some bundlers to not honor this\n  // -> using a delegation proxy here\n  noop as unknown as Twind<any, any>,\n  {\n    apply(_target, _thisArg, args) {\n      if (DEV) assertActive()\n\n      return active(args[0])\n    },\n    get(target, property) {\n      if (DEV) {\n        // Workaround webpack accessing the prototype in dev mode\n        if (!active && property in target) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          return (target as any)[property]\n        }\n\n        assertActive()\n      }\n\n      const value = active[property as keyof Twind]\n\n      if (typeof value === 'function') {\n        return function () {\n          if (DEV) assertActive()\n\n          // eslint-disable-next-line prefer-rest-params\n          return value.apply(active, arguments)\n        }\n      }\n\n      return value\n    },\n  },\n)\n\nexport type SheetFactory<SheetTarget = unknown> = () => Sheet<SheetTarget>\n\n/**\n * Manages a single Twind instance — works in browser, Node.js, Deno, workers...\n *\n * @group Runtime\n * @param config\n * @param sheet\n * @param target\n * @returns\n */\nexport function setup<Theme extends BaseTheme = BaseTheme, SheetTarget = unknown>(\n  config?: TwindConfig<Theme>,\n  sheet?: Sheet<SheetTarget> | SheetFactory<SheetTarget>,\n  target?: HTMLElement,\n): Twind<Theme, SheetTarget>\n\nexport function setup<\n  Theme = BaseTheme,\n  Presets extends Preset<any>[] = Preset[],\n  SheetTarget = unknown,\n>(\n  config?: TwindUserConfig<Theme, Presets>,\n  sheet?: Sheet<SheetTarget> | SheetFactory<SheetTarget>,\n  target?: HTMLElement,\n): Twind<BaseTheme & ExtractThemes<Theme, Presets>, SheetTarget>\n\nexport function setup<Theme extends BaseTheme = BaseTheme, SheetTarget = unknown>(\n  config: TwindConfig<any> | TwindUserConfig<any> = {},\n  sheet: Sheet<SheetTarget> | SheetFactory<SheetTarget> = getSheet as SheetFactory<SheetTarget>,\n  target?: HTMLElement,\n): Twind<Theme, SheetTarget> {\n  active?.destroy()\n\n  active = observe(\n    twind(config as TwindUserConfig, typeof sheet == 'function' ? sheet() : sheet),\n    target,\n  )\n\n  return active as unknown as Twind<Theme, SheetTarget>\n}\n", "import type { ParsedRule } from '../parse'\nimport { toClassName } from './to-class-name'\n\nexport function format(rules: ParsedRule[], seperator = ','): string {\n  return rules.map(toClassName).join(seperator)\n}\n", "import type { MaybeArray, ScreenValue } from './types'\n\n/**\n * @internal\n */\nexport const escape =\n  (typeof CSS !== 'undefined' && CSS.escape) ||\n  // Simplified: escaping only special characters\n  // Needed for NodeJS and Edge <79 (https://caniuse.com/mdn-api_css_escape)\n  ((className: string): string =>\n    className\n      // Simplifed escape testing only for chars that we know happen to be in tailwind directives\n      .replace(/[!\"'`*+.,;:\\\\/<=>?@#$%&^|~()[\\]{}]/g, '\\\\$&')\n      // If the character is the first character and is in the range [0-9] (2xl, ...)\n      // https://drafts.csswg.org/cssom/#escape-a-character-as-code-point\n      .replace(/^\\d/, '\\\\3$& '))\n\n// Based on https://stackoverflow.com/a/52171480\n/**\n * @group Configuration\n * @param value\n * @returns\n */\nexport function hash(value: string): string {\n  // eslint-disable-next-line no-var\n  for (var h = 9, index = value.length; index--; ) {\n    h = Math.imul(h ^ value.charCodeAt(index), 0x5f356495)\n  }\n\n  return '#' + ((h ^ (h >>> 9)) >>> 0).toString(36)\n}\n\n/**\n * @internal\n * @param screen\n * @param prefix\n * @returns\n */\nexport function mql(screen: MaybeArray<ScreenValue>, prefix = '@media '): string {\n  return (\n    prefix +\n    asArray(screen)\n      .map((screen) => {\n        if (typeof screen == 'string') {\n          screen = { min: screen }\n        }\n\n        return (\n          (screen as { raw?: string }).raw ||\n          Object.keys(screen)\n            .map((feature) => `(${feature}-width:${(screen as Record<string, string>)[feature]})`)\n            .join(' and ')\n        )\n      })\n      .join(',')\n  )\n}\n\n/**\n * @internal\n * @param value\n * @returns\n */\nexport function asArray<T>(value: T = [] as unknown as T): T extends Array<any> ? T : T[] {\n  return (Array.isArray(value) ? value : value == null ? [] : [value]) as T extends Array<any>\n    ? T\n    : T[]\n}\n\n/**\n * @internal\n * @param value\n * @returns\n */\nexport function identity<T>(value: T): T {\n  return value\n}\n\n/**\n * @internal\n */\nexport function noop(): void {\n  // no-op\n}\n", "import type { BaseTheme, Context } from '../types'\nimport type { ParsedRule } from '../parse'\nimport { asArray, mql } from '../utils'\nimport { toClassName } from './to-class-name'\n\n// Based on https://github.com/kripod/otion\n// License MIT\n\n// export const enum Shifts {\n//   darkMode = 30,\n//   layer = 27,\n//   screens = 26,\n//   responsive = 22,\n//   atRules = 18,\n//   variants = 0,\n// }\n\nexport const Layer = {\n  /**\n   * 1. `default` (public)\n   */\n  d /* efaults */: 0b000 << 27 /* Shifts.layer */,\n\n  /**\n   * 2. `base` (public) — for things like reset rules or default styles applied to plain HTML elements.\n   */\n  b /* ase */: 0b001 << 27 /* Shifts.layer */,\n\n  /**\n   * 3. `components` (public, used by `style()`) — is for class-based styles that you want to be able to override with utilities.\n   */\n  c /* omponents */: 0b010 << 27 /* Shifts.layer */,\n  // reserved for style():\n  // - props: 0b011\n  // - when: 0b100\n\n  /**\n   * 6. `aliases` (public, used by `apply()`) — `~(...)`\n   */\n  a /* liases */: 0b101 << 27 /* Shifts.layer */,\n\n  /**\n   * 6. `utilities` (public) — for small, single-purpose classes\n   */\n  u /* tilities */: 0b110 << 27 /* Shifts.layer */,\n\n  /**\n   * 7. `overrides` (public, used by `css()`)\n   */\n  o /* verrides */: 0b111 << 27 /* Shifts.layer */,\n} as const\n\n/*\nTo have a predictable styling the styles must be ordered.\n\nThis order is represented by a precedence number. The lower values\nare inserted before higher values. Meaning higher precedence styles\noverwrite lower precedence styles.\n\nEach rule has some traits that are put into a bit set which form\nthe precedence:\n\n| bits | trait                                                |\n| ---- | ---------------------------------------------------- |\n| 1    | dark mode                                            |\n| 2    | layer: preflight, global, components, utilities, css |\n| 1    | screens: is this a responsive variation of a rule    |\n| 5    | responsive based on min-width                        |\n| 4    | at-rules                                             |\n| 18   | pseudo and group variants                            |\n| 4    | number of declarations (descending)                  |\n| 4    | greatest precedence of properties                    |\n\n**Dark Mode: 1 bit**\n\nFlag for dark mode rules.\n\n**Layer: 3 bits**\n\n- defaults = 0: The preflight styles and any base styles registered by plugins.\n- base = 1: The global styles registered by plugins.\n- components = 2\n- variants = 3\n- compounds = 4\n- aliases = 5\n- utilities = 6: Utility classes and any utility classes registered by plugins.\n- css = 7: Styles generated by css\n\n**Screens: 1 bit**\n\nFlag for screen variants. They may not always have a `min-width` to be detected by _Responsive_ below.\n\n**Responsive: 4 bits**\n\nBased on extracted `min-width` value:\n\n- 576px -> 3\n- 1536px -> 10\n- 36rem -> 3\n- 96rem -> 9\n\n**At-Rules: 4 bits**\n\nBased on the count of special chars (`-:,`) within the at-rule.\n\n**Pseudo and group variants: 18 bits**\n\nEnsures predictable order of pseudo classes.\n\n- https://bitsofco.de/when-do-the-hover-focus-and-active-pseudo-classes-apply/#orderofstyleshoverthenfocusthenactive\n- https://developer.mozilla.org/docs/Web/CSS/:active#Active_links\n- https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/defaultConfig.stub.js#L718\n\n**Number of declarations (descending): 4 bits**\n\nAllows single declaration styles to overwrite styles from multi declaration styles.\n\n**Greatest precedence of properties: 4 bits**\n\nEnsure shorthand properties are inserted before longhand properties; eg longhand override shorthand\n*/\n\nexport function moveToLayer(precedence: number, layer: number): number {\n  // Set layer (first reset, than set)\n  return (precedence & ~Layer.o) | layer\n}\n\n/*\nTo set a bit: n |= mask;\nTo clear a bit: n &= ~mask;\nTo test if a bit is set: (n & mask)\n\nBit shifts for the primary bits:\n\n| bits | trait                                                   | shift |\n| ---- | ------------------------------------------------------- | ----- |\n| 1    | dark mode                                               | 30    |\n| 3    | layer: preflight, global, components, utilities, css    | 27    |\n| 1    | screens: is this a responsive variation of a rule       | 26    |\n| 4    | responsive based on min-width, max-width or width       | 22    |\n| 4    | at-rules                                                | 18    |\n| 18   | pseudo and group variants                               | 0     |\n\nLayer: 0 - 7: 3 bits\n  - defaults: 0 << 27\n  - base: 1 << 27\n  - components: 2 << 27\n  - variants: 3 << 27\n  - joints: 4 << 27\n  - aliases: 5 << 27\n  - utilities: 6 << 27\n  - overrides: 7 << 27\n\nThese are calculated by serialize and added afterwards:\n\n| bits | trait                               |\n| ---- | ----------------------------------- |\n| 4    | number of selectors (descending)    |\n| 4    | number of declarations (descending) |\n| 4    | greatest precedence of properties   |\n\nThese are added by shifting the primary bits using multiplication as js only\nsupports bit shift up to 32 bits.\n*/\n\n// Colon and dash count of string (ascending)\nexport function seperatorPrecedence(string: string): number {\n  return string.match(/[-=:;]/g)?.length || 0\n}\n\nexport function atRulePrecedence(css: string): number {\n  // 0 - 15: 4 bits (max 144rem or 2304px)\n  // rem -> bit\n  // <20 ->  0 (<320px)\n  //  20 ->  1 (320px)\n  //  24 ->  2 (384px)\n  //  28 ->  3 (448px)\n  //  32 ->  4 (512px)\n  //  36 ->  5 (576px)\n  //  42 ->  6 (672px)\n  //  48 ->  7 (768px)\n  //  56 ->  8 (896px)\n  //  64 ->  9 (1024px)\n  //  72 -> 10 (1152px)\n  //  80 -> 11 (1280px)\n  //  96 -> 12 (1536px)\n  // 112 -> 13 (1792px)\n  // 128 -> 14 (2048px)\n  // 144 -> 15 (2304px)\n  // https://www.dcode.fr/function-equation-finder\n  return (\n    (Math.min(\n      /(?:^|width[^\\d]+)(\\d+(?:.\\d+)?)(p)?/.test(css)\n        ? Math.max(0, 29.63 * (+RegExp.$1 / (RegExp.$2 ? 15 : 1)) ** 0.137 - 43)\n        : 0,\n      15,\n    ) <<\n      22) /* Shifts.responsive */ |\n    (Math.min(seperatorPrecedence(css), 15) << 18) /* Shifts.atRules */\n  )\n}\n\n// Pesudo variant presedence\n// Chars 3 - 8: Uniquely identifies a pseudo selector\n// represented as a bit set for each relevant value\n// 18 bits: one for each variant plus one for unknown variants\n//\n// ':group-*' variants are normalized to their native pseudo class (':group-hover' -> ':hover')\n// as they already have a higher selector presedence due to the add '.group' ('.group:hover .group-hover:...')\n\n// Sources:\n// - https://bitsofco.de/when-do-the-hover-focus-and-active-pseudo-classes-apply/#orderofstyleshoverthenfocusthenactive\n// - https://developer.mozilla.org/docs/Web/CSS/:active#Active_links\n// - https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/defaultConfig.stub.js#L931\n\nconst PRECEDENCES_BY_PSEUDO_CLASS = [\n  /* fi */ 'rst-c' /* hild: 0 */,\n  /* la */ 'st-ch' /* ild: 1 */,\n  // even and odd use: nth-child\n  /* nt */ 'h-chi' /* ld: 2 */,\n  /* an */ 'y-lin' /* k: 3 */,\n  /* li */ 'nk' /* : 4 */,\n  /* vi */ 'sited' /* : 5 */,\n  /* ch */ 'ecked' /* : 6 */,\n  /* em */ 'pty' /* : 7 */,\n  /* re */ 'ad-on' /* ly: 8 */,\n  /* fo */ 'cus-w' /* ithin : 9 */,\n  /* ho */ 'ver' /* : 10 */,\n  /* fo */ 'cus' /* : 11 */,\n  /* fo */ 'cus-v' /* isible : 12 */,\n  /* ac */ 'tive' /* : 13 */,\n  /* di */ 'sable' /* d : 14 */,\n  /* op */ 'tiona' /* l: 15 */,\n  /* re */ 'quire' /* d: 16 */,\n]\n\nfunction pseudoPrecedence(selector: string): number {\n  // use first found pseudo-class\n\n  return (\n    1 <<\n    ~(\n      (/:([a-z-]+)/.test(selector) &&\n        ~PRECEDENCES_BY_PSEUDO_CLASS.indexOf(RegExp.$1.slice(2, 7))) ||\n      ~17\n    )\n  )\n}\n\n// https://github.com/kripod/otion/blob/main/packages/otion/src/propertyMatchers.ts\n// \"+1\": [\n// \t/* ^border-.*(w|c|sty) */\n// \t\"border-.*(width,color,style)\",\n\n// \t/* ^[tlbr].{2,4}m?$ */\n// \t\"top\",\n// \t\"left\",\n// \t\"bottom\",\n// \t\"right\",\n\n// \t/* ^c.{7}$ */\n// \t\"continue\",\n\n// \t/* ^c.{8}$ */\n// \t\"container\",\n// ],\n\n// \"-1\": [\n// \t/* ^[fl].{5}l */\n// \t\"flex-flow\",\n// \t\"line-clamp\",\n\n// \t/* ^g.{8}$ */\n// \t\"grid-area\",\n\n// \t/* ^pl */\n// \t\"place-content\",\n// \t\"place-items\",\n// \t\"place-self\",\n\n// ],\n\n// group: 1 => +1\n// group: 2 => -1\n\n// 0 - 15 => 4 bits\n// Ignore vendor prefixed and custom properties\nexport function declarationPropertyPrecedence(property: string): number {\n  return property[0] == '-'\n    ? 0\n    : seperatorPrecedence(property) +\n        (/^(?:(border-(?!w|c|sty)|[tlbr].{2,4}m?$|c.{7,8}$)|([fl].{5}l|g.{8}$|pl))/.test(property)\n          ? +!!RegExp.$1 /* +1 */ || -!!RegExp.$2 /* -1 */\n          : 0) +\n        1\n}\n\nexport interface ConvertedRule {\n  /** The name to use for `&` expansion in selectors. Maybe empty for at-rules like `@import`, `@font-face`, `@media`, ... */\n  n?: string | undefined\n\n  /** The calculated precedence taking all variants into account. */\n  p: number\n\n  /** The rulesets (selectors and at-rules). expanded variants `@media ...`, `@supports ...`, `&:focus`, `.dark &` */\n  r?: string[]\n\n  /** Is this rule `!important` eg something like `!underline` or `!bg-red-500` or `!red-500` */\n  i?: boolean | undefined\n}\n\nexport function convert<Theme extends BaseTheme = BaseTheme>(\n  { n: name, i: important, v: variants = [] }: Partial<ParsedRule>,\n  context: Context<Theme>,\n  precedence: number,\n  conditions?: string[],\n): ConvertedRule {\n  if (name) {\n    name = toClassName({ n: name, i: important, v: variants })\n  }\n\n  conditions = [...asArray(conditions)]\n\n  for (const variant of variants) {\n    const screen = context.theme('screens', variant)\n\n    for (const condition of asArray((screen && mql(screen)) || context.v(variant))) {\n      conditions.push(condition)\n\n      precedence |= screen\n        ? (1 << 26) /* Shifts.screens */ | atRulePrecedence(condition)\n        : variant == 'dark'\n        ? 1 << 30 /* Shifts.darkMode */\n        : condition[0] == '@'\n        ? atRulePrecedence(condition)\n        : pseudoPrecedence(condition)\n    }\n  }\n\n  return { n: name, p: precedence, r: conditions, i: important }\n}\n", "import type { BaseTheme, Context, Falsey, RuleResult, TwindRule } from '../types'\nimport type { ParsedRule } from '../parse'\n\nconst registry = new Map<string, RegisterCallback>()\n\nexport type RegisterCallback = (rule: ParsedRule, context: Context) => Falsey | TwindRule[]\n\nexport function register(className: string, factory: RegisterCallback): string {\n  registry.set(className, factory)\n  return className\n}\n\nexport function resolve<Theme extends BaseTheme = BaseTheme>(\n  rule: ParsedRule,\n  context: Context<Theme>,\n): RuleResult | TwindRule[] {\n  const factory = registry.get(rule.n)\n\n  return factory ? factory(rule, context as any) : context.r(rule.n, rule.v[0] == 'dark')\n}\n", "import type { TwindRule } from '../types'\nimport { escape } from '../utils'\n\nexport function stringify(rule: TwindRule): string | undefined {\n  if (rule.d) {\n    const groups: string[] = []\n\n    const selector = replaceEach(\n      // merge all conditions into a selector string\n      rule.r.reduce((selector, condition) => {\n        if (condition[0] == '@') {\n          groups.push(condition)\n          return selector\n        }\n\n        // Go over the selector and replace the matching multiple selectors if any\n        return condition ? merge(selector, condition) : selector\n      }, '&'),\n      // replace '&' with rule name or an empty string\n      (selectorPart) => replaceReference(selectorPart, rule.n ? '.' + escape(rule.n) : ''),\n    )\n\n    if (selector) {\n      groups.push(selector.replace(/:merge\\((.+?)\\)/g, '$1'))\n    }\n\n    return groups.reduceRight((body, grouping) => grouping + '{' + body + '}', rule.d)\n  }\n}\n\nfunction replaceEach(selector: string, iteratee: (selectorPart: string) => string): string {\n  return selector.replace(\n    / *((?:\\(.+?\\)|\\[.+?\\]|[^,])+) *(,|$)/g,\n    (_, selectorPart: string, comma: string) => iteratee(selectorPart) + comma,\n  )\n}\n\nfunction replaceReference(selector: string, reference: string): string {\n  return selector.replace(/&/g, reference)\n}\n\nfunction merge(selector: string, condition: string): string {\n  return replaceEach(selector, (selectorPart) =>\n    replaceEach(\n      condition,\n      // If the current condition has a nested selector replace it\n      (conditionPart) => {\n        const mergeMatch = /(:merge\\(.+?\\))(:[a-z-]+|\\\\[.+])/.exec(conditionPart)\n\n        if (mergeMatch) {\n          const selectorIndex = selectorPart.indexOf(mergeMatch[1])\n\n          if (~selectorIndex) {\n            // [':merge(.group):hover .rule', ':merge(.group):focus &'] -> ':merge(.group):focus:hover .rule'\n            // ':merge(.group)' + ':focus' + ':hover .rule'\n            return (\n              selectorPart.slice(0, selectorIndex) +\n              mergeMatch[0] +\n              selectorPart.slice(selectorIndex + mergeMatch[1].length)\n            )\n          }\n\n          // [':merge(.peer):focus~&', ':merge(.group):hover &'] -> ':merge(.peer):focus~:merge(.group):hover &'\n          return replaceReference(selectorPart, conditionPart)\n        }\n\n        // Return the current selector with the key matching multiple selectors if any\n        return replaceReference(conditionPart, selectorPart)\n      },\n    ),\n  )\n}\n", "import { Layer } from './precedence'\n\nconst collator = new Intl.Collator('en', { numeric: true })\n\nexport interface SortableRule {\n  /** The calculated precedence taking all variants into account. */\n  p: number\n\n  /* The precedence of the properties within {@link d}. */\n  o: number\n\n  /** The name to use for `&` expansion in selectors. Maybe empty for at-rules like `@import`, `@font-face`, `@media`, ... */\n  n?: string | null\n}\n\n/**\n * Find the array index of where to add an element to keep it sorted.\n *\n * @returns The insertion index\n */\nexport function sortedInsertionIndex(\n  array: readonly SortableRule[],\n  element: SortableRule,\n): number {\n  // Find position using binary search\n  // eslint-disable-next-line no-var\n  for (var low = 0, high = array.length; low < high; ) {\n    const pivot = (high + low) >> 1\n\n    // Less-Then-Equal to add new equal element after all existing equal elements (stable sort)\n    if (compareTwindRules(array[pivot], element) <= 0) {\n      low = pivot + 1\n    } else {\n      high = pivot\n    }\n  }\n\n  return high\n}\n\nexport function compareTwindRules(a: SortableRule, b: SortableRule): number {\n  // base and overrides (css) layers are kept in order they are declared\n  const layer = a.p & Layer.o\n\n  if (layer == (b.p & Layer.o) && (layer == Layer.b || layer == Layer.o)) {\n    return 0\n  }\n\n  return (\n    a.p - b.p ||\n    a.o - b.o ||\n    collator.compare(byModifier(a.n), byModifier(b.n)) ||\n    collator.compare(byName(a.n), byName(b.n))\n  )\n}\n\nfunction byModifier(s: string | null | undefined) {\n  return ((s || '').split(/:/).pop() as string).split('/').pop() || '\\x00'\n}\n\nfunction byName(s: string | null | undefined) {\n  return (s || '').replace(/\\W/g, (c) => String.fromCharCode(127 + c.charCodeAt(0))) + '\\x00'\n}\n", "import type { ColorValue, ColorFunctionOptions, Context, Falsey } from './types'\n\nfunction parseColorComponent(chars: string, factor: number): number {\n  return Math.round(parseInt(chars, 16) * factor)\n}\n\n/**\n * @internal\n * @param color\n * @param options\n * @returns\n */\nexport function toColorValue(color: ColorValue, options: ColorFunctionOptions = {}): string {\n  if (typeof color == 'function') {\n    return color(options)\n  }\n\n  const { opacityValue = '1', opacityVariable } = options\n  const opacity = opacityVariable ? `var(${opacityVariable})` : opacityValue\n\n  if (color.includes('<alpha-value>')) {\n    return color.replace('<alpha-value>', opacity)\n  }\n\n  // rgb hex: #0123 and #001122\n  if (color[0] == '#' && (color.length == 4 || color.length == 7)) {\n    const size = (color.length - 1) / 3\n    const factor = [17, 1, 0.062272][size - 1]\n\n    return `rgba(${[\n      parseColorComponent(color.substr(1, size), factor),\n      parseColorComponent(color.substr(1 + size, size), factor),\n      parseColorComponent(color.substr(1 + 2 * size, size), factor),\n      opacity,\n    ]})`\n  }\n\n  if (opacity == '1') return color\n  if (opacity == '0') return '#0000'\n\n  // convert rgb and hsl to alpha variant\n  return color.replace(/^(rgb|hsl)(\\([^)]+)\\)$/, `$1a$2,${opacity})`)\n}\n\n/**\n * Looks for a matching dark color within a [tailwind color palette](https://tailwindcss.com/docs/customizing-colors) (`50`, `100`, `200`, ..., `800`, `900`).\n *\n * ```js\n * defineConfig({\n *   darkColor: autoDarkColor,\n * })\n * ```\n *\n * **Note**: Does not work for arbitrary values like `[theme(colors.gray.500)]` or `[theme(colors.gray.500, #ccc)]`.\n *\n * @group Configuration\n * @param section within theme to use\n * @param key of the light color or an arbitrary value\n * @param context to use\n * @returns the dark color if found\n */\nexport function autoDarkColor(\n  section: string,\n  key: string,\n  { theme }: Context<any>,\n): ColorValue | Falsey {\n  // 50 -> 900, 100 -> 800, ..., 800 -> 100, 900 -> 50\n  // key: gray-50, gray.50\n  key = key.replace(\n    /\\d+$/,\n    (shade) =>\n      // ~~(parseInt(shade, 10) / 100): 50 -> 0, 900 -> 9\n      // (9 - 0) -> 900, (9 - 9) -> 50\n      ((9 - ~~(parseInt(shade, 10) / 100) || 0.5) * 100) as any,\n  )\n\n  return theme(section as 'colors', key)\n}\n", "import type {\n  CSSObject,\n  Falsey,\n  Context,\n  TwindRule,\n  BaseTheme,\n  MaybeArray,\n  ColorValue,\n} from '../types'\nimport type { ParsedRule } from '../parse'\nimport type { ConvertedRule } from './precedence'\nimport { Layer, moveToLayer } from './precedence'\nimport { mql, hash, asArray } from '../utils'\n\nimport { atRulePrecedence, declarationPropertyPrecedence, convert } from './precedence'\nimport { stringify } from './stringify'\nimport { translateWith } from './translate'\nimport { parse } from '../parse'\nimport { compareTwindRules } from './sorted-insertion-index'\nimport { toColorValue } from '../colors'\n\nexport function serialize<Theme extends BaseTheme = BaseTheme>(\n  style: CSSObject | Falsey,\n  rule: Partial<ParsedRule>,\n  context: Context<Theme>,\n  precedence: number,\n  conditions: string[] = [],\n): TwindRule[] {\n  return serialize$(style, convert(rule, context, precedence, conditions), context)\n}\n\nfunction serialize$<Theme extends BaseTheme = BaseTheme>(\n  style: CSSObject | Falsey,\n  { n: name, p: precedence, r: conditions = [], i: important }: ConvertedRule,\n  context: Context<Theme>,\n): TwindRule[] {\n  const rules: TwindRule[] = []\n\n  // The generated declaration block eg body of the css rule\n  let declarations = ''\n\n  // This ensures that 'border-top-width' has a higher precedence than 'border-top'\n  let maxPropertyPrecedence = 0\n\n  // More specific utilities have less declarations and a higher precedence\n  let numberOfDeclarations = 0\n\n  for (let key in style || {}) {\n    const value = (style as Record<string, unknown>)[key]\n\n    if (key[0] == '@') {\n      // at rules: https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule\n      if (!value) continue\n\n      // @apply ...;\n      if (key[1] == 'a') {\n        rules.push(\n          ...translateWith(\n            name as string,\n            precedence,\n            parse('' + value),\n            context,\n            precedence,\n            conditions,\n            important,\n            true /* useOrderOfRules */,\n          ),\n        )\n        continue\n      }\n\n      // @layer <layer>\n      if (key[1] == 'l') {\n        for (const css of asArray(value as MaybeArray<CSSObject>)) {\n          rules.push(\n            ...serialize$(\n              css,\n              {\n                n: name,\n                p: moveToLayer(precedence, Layer[key[7] as 'b']),\n                r: key[7] == 'd' ? [] : conditions,\n                i: important,\n              },\n              context,\n            ),\n          )\n        }\n\n        continue\n      }\n\n      // @import\n      if (key[1] == 'i') {\n        rules.push(\n          ...asArray(value).map((value) => ({\n            // before all layers\n            p: -1,\n            o: 0,\n            r: [],\n            d: key + ' ' + (value as string),\n          })),\n        )\n        continue\n      }\n\n      // @keyframes\n      if (key[1] == 'k') {\n        // Use defaults layer\n        rules.push({\n          p: Layer.d,\n          o: 0,\n          r: [key],\n          d: serialize$(value as CSSObject, { p: Layer.d }, context)\n            .map(stringify)\n            .join(''),\n        })\n        continue\n      }\n\n      // @font-face\n      // TODO @font-feature-values\n      if (key[1] == 'f') {\n        // Use defaults layer\n        rules.push(\n          ...asArray(value).map((value) => ({\n            p: Layer.d,\n            o: 0,\n            r: [key],\n            d: serialize$(value as CSSObject, { p: Layer.d }, context)\n              .map(stringify)\n              .join(''),\n          })),\n        )\n        continue\n      }\n      // -> All other are handled below; same as selector\n    }\n\n    // @media\n    // @supports\n    // selector\n    if (typeof value == 'object' && !Array.isArray(value)) {\n      // at-rule or non-global selector\n      if (key[0] == '@' || key.includes('&')) {\n        let rulePrecedence = precedence\n        if (key[0] == '@') {\n          // Handle `@media screen(sm)` and `@media (screen(sm) or ...)`\n          key = key.replace(/\\bscreen\\(([^)]+)\\)/g, (_, screenKey) => {\n            const screen = context.theme('screens', screenKey)\n\n            if (screen) {\n              rulePrecedence |= 1 << 26 /* Shifts.screens */\n              return mql(screen, '')\n            }\n\n            return _\n          })\n\n          rulePrecedence |= atRulePrecedence(key)\n        }\n\n        rules.push(\n          ...serialize$(\n            value as CSSObject,\n            {\n              n: name,\n              p: rulePrecedence,\n              r: [...conditions, key],\n              i: important,\n            },\n            context,\n          ),\n        )\n      } else {\n        // global selector\n        rules.push(\n          ...serialize$(value as CSSObject, { p: precedence, r: [...conditions, key] }, context),\n        )\n      }\n    } else if (key == 'label' && value) {\n      name = (value as string) + hash(JSON.stringify([precedence, important, style]))\n    } else if (value || value === 0) {\n      // property -> hyphenate\n      key = key.replace(/[A-Z]/g, (_) => '-' + _.toLowerCase())\n\n      // Update precedence\n      numberOfDeclarations += 1\n      maxPropertyPrecedence = Math.max(maxPropertyPrecedence, declarationPropertyPrecedence(key))\n\n      declarations +=\n        (declarations ? ';' : '') +\n        asArray(value)\n          .map((value) =>\n            context.s(\n              key,\n              // support theme(...) function in values\n              // calc(100vh - theme('spacing.12'))\n              resolveThemeFunction('' + value, context.theme) + (important ? ' !important' : ''),\n            ),\n          )\n          .join(';')\n    }\n  }\n\n  // PERF: prevent unshift using `rules = [{}]` above and then `rules[0] = {...}`\n  rules.unshift({\n    n: name,\n\n    p: precedence,\n\n    o:\n      // number of declarations (descending)\n      Math.max(0, 15 - numberOfDeclarations) +\n      // greatest precedence of properties\n      // if there is no property precedence this is most likely a custom property only declaration\n      // these have the highest precedence\n      Math.min(maxPropertyPrecedence || 15, 15) * 1.5,\n\n    r: conditions,\n\n    // stringified declarations\n    d: declarations,\n  })\n\n  return rules.sort(compareTwindRules)\n}\n\nexport function resolveThemeFunction<Theme extends BaseTheme = BaseTheme>(\n  value: string,\n  theme: Context<Theme>['theme'],\n): string {\n  // support theme(...) function in values\n  // calc(100vh - theme('spacing.12'))\n  // theme('borderColor.DEFAULT', 'currentColor')\n\n  // PERF: check for theme before running the regexp\n  // if (value.includes('theme')) {\n  return value.replace(\n    /theme\\(([\"'`])?(.+?)\\1(?:\\s*,\\s*([\"'`])?(.+?)\\3)?\\)/g,\n    (_, __, key: string, ___, defaultValue = '') => {\n      const value = theme(key, defaultValue)\n\n      if (typeof value == 'function' && /color|fill|stroke/i.test(key)) {\n        return toColorValue(value as ColorValue)\n      }\n\n      return '' + asArray(value as unknown).filter((v) => Object(v) !== v)\n    },\n  )\n  // }\n\n  // return value\n}\n", "import type { TwindRule } from '../types'\n\nexport function merge(rules: TwindRule[], name: string): TwindRule[] {\n  // merge:\n  // - same conditions\n  // - replace name with hash of name + condititions + declarations\n  // - precedence:\n  //   - combine bits or use max precendence\n  //   - set layer bit to merged\n  const result: TwindRule[] = []\n\n  let current: TwindRule | undefined\n\n  for (const rule of rules) {\n    // only merge rules with declarations and names (eg no global rules)\n    if (!(rule.d && rule.n)) {\n      result.push({ ...rule, n: rule.n && name })\n    } else if (current?.p == rule.p && '' + current.r == '' + rule.r) {\n      current.c = [current.c, rule.c].filter(Boolean).join(' ')\n      current.d = current.d + ';' + rule.d\n    } else {\n      // only set name for named rules eg not for global or className propagation rules\n      result.push((current = { ...rule, n: rule.n && name }))\n    }\n  }\n\n  return result\n}\n", "import type { TwindRule, Context, BaseTheme } from '../types'\nimport type { ParsedRule } from '../parse'\n\nimport { parse } from '../parse'\nimport { convert, Layer, moveToLayer } from './precedence'\n\nimport { resolve } from './registry'\nimport { serialize } from './serialize'\nimport { sortedInsertionIndex } from './sorted-insertion-index'\nimport { toClassName } from './to-class-name'\nimport { asArray } from '../utils'\nimport { merge } from './merge'\n\nexport function translate<Theme extends BaseTheme = BaseTheme>(\n  rules: readonly ParsedRule[],\n  context: Context<Theme>,\n  precedence = Layer.u,\n  conditions?: string[],\n  important?: boolean,\n): TwindRule[] {\n  // Sorted by precedence\n  const result: TwindRule[] = []\n\n  for (const rule of rules) {\n    for (const cssRule of translate$(rule, context, precedence, conditions, important)) {\n      result.splice(sortedInsertionIndex(result, cssRule), 0, cssRule)\n    }\n  }\n\n  return result\n}\n\nfunction translate$<Theme extends BaseTheme = BaseTheme>(\n  rule: ParsedRule,\n  context: Context<Theme>,\n  precedence: number,\n  conditions?: string[],\n  important?: boolean,\n): TwindRule[] {\n  rule = { ...rule, i: rule.i || important }\n\n  const resolved = resolve(rule, context)\n\n  if (!resolved) {\n    // propagate className as is\n    return [{ c: toClassName(rule), p: 0, o: 0, r: [] }]\n  }\n\n  // a list of class names\n  if (typeof resolved == 'string') {\n    ;({ r: conditions, p: precedence } = convert(rule, context, precedence, conditions))\n\n    return merge(translate(parse(resolved), context, precedence, conditions, rule.i), rule.n)\n  }\n\n  if (Array.isArray(resolved)) {\n    return resolved.map((rule) => ({\n      o: 0,\n      ...rule,\n      r: [...asArray(conditions), ...asArray(rule.r)],\n      p: moveToLayer(precedence, rule.p ?? precedence),\n    }))\n  }\n\n  return serialize(resolved, rule, context, precedence, conditions)\n}\n\nexport function translateWith<Theme extends BaseTheme = BaseTheme>(\n  name: string,\n  layer: number,\n  rules: ParsedRule[],\n  context: Context<Theme>,\n  precedence: number,\n  conditions?: string[] | undefined,\n  important?: boolean | undefined,\n  useOrderOfRules?: boolean,\n) {\n  return merge(\n    (useOrderOfRules\n      ? rules.flatMap((rule) => translate([rule], context, precedence, conditions, important))\n      : translate(rules, context, precedence, conditions, important)\n    ).map((rule) =>\n      // do not move defaults\n      // move only rules with a name unless they are in the base layer\n      rule.p & Layer.o && (rule.n || layer == Layer.b)\n        ? { ...rule, p: moveToLayer(rule.p, layer), o: 0 }\n        : rule,\n    ),\n    name,\n  )\n}\n", "import type { Falsey } from '../types'\nimport type { ParsedRule } from '../parse'\nimport { convert } from './precedence'\nimport { register } from './registry'\nimport { translateWith } from './translate'\n\nexport function define(\n  className: string,\n  layer: number,\n  rules: Falsey | ParsedRule[],\n  useOrderOfRules?: boolean,\n): string {\n  return register(className, (rule, context) => {\n    const { n: name, p: precedence, r: conditions, i: important } = convert(rule, context, layer)\n\n    return (\n      rules &&\n      translateWith(\n        name as string,\n        layer,\n        rules,\n        context,\n        precedence,\n        conditions,\n        important,\n        useOrderOfRules,\n      )\n    )\n  })\n}\n", "import { DEV } from 'distilt/env'\n\nimport { hash } from './utils'\nimport { define } from './internal/define'\nimport { format } from './internal/format'\nimport { Layer } from './internal/precedence'\n\nexport interface ParsedRule {\n  /**\n   * The utility name including `-` if set, but without `!` and variants\n   */\n  readonly n: string\n\n  /**\n   * All variants without trailing colon: `hover`, `after:`, `[...]`\n   */\n  readonly v: string[]\n\n  /**\n   * Something like `!underline` or `!bg-red-500` or `!red-500`\n   */\n  readonly i?: boolean\n}\n\nexport interface ParsedDevRule extends ParsedRule {\n  readonly a: string[]\n  readonly l: [start: number, end: number]\n}\n\nfunction createRule(\n  active: string[],\n  current: ParsedRule[][],\n  loc?: ParsedDevRule['l'] | false,\n): void {\n  if (active[active.length - 1] != '(') {\n    const variants: string[] = []\n    let important = false\n    let negated = false\n    let name = ''\n\n    for (let value of active) {\n      if (value == '(' || /[~@]$/.test(value)) continue\n\n      if (value[0] == '!') {\n        value = value.slice(1)\n        important = !important\n      }\n\n      if (value.endsWith(':')) {\n        variants[value == 'dark:' ? 'unshift' : 'push'](value.slice(0, -1))\n        continue\n      }\n\n      if (value[0] == '-') {\n        value = value.slice(1)\n        negated = !negated\n      }\n\n      if (value.endsWith('-')) {\n        value = value.slice(0, -1)\n      }\n\n      if (value && value != '&') {\n        name += (name && '-') + value\n      }\n    }\n\n    if (name) {\n      if (negated) name = '-' + name\n\n      current[0].push(\n        DEV\n          ? Object.defineProperties(\n              { n: name, v: variants.filter(uniq), i: important },\n              {\n                a: { value: [...active] },\n                l: { value: loc },\n              },\n            )\n          : { n: name, v: variants.filter(uniq), i: important },\n      )\n    }\n  }\n}\n\nfunction uniq<T>(value: T, index: number, values: T[]): boolean {\n  return values.indexOf(value) == index\n}\n\nconst cache = new Map<string, ParsedRule[]>()\n\n/**\n * @internal\n * @param token\n * @returns\n */\nexport function parse(token: string): ParsedRule[] {\n  let parsed = cache.get(token)\n\n  if (!parsed) {\n    // Stack of active groupings (`(`), variants, or nested (`~` or `@`)\n    const active: string[] = []\n\n    // Stack of current rule list to put new rules in\n    // the first `0` element is the current list\n    const current: ParsedRule[][] = [[]]\n\n    let startIndex = 0\n    let skip = 0\n    let comment: RegExp | null = null\n    let position = 0\n\n    // eslint-disable-next-line no-inner-declarations\n    const commit = (isRule?: boolean, endOffset = 0) => {\n      if (startIndex != position) {\n        active.push(token.slice(startIndex, position + endOffset))\n\n        if (isRule) {\n          createRule(active, current, DEV && [startIndex, position + endOffset])\n        }\n      }\n      startIndex = position + 1\n    }\n\n    for (; position < token.length; position++) {\n      const char = token[position]\n\n      if (skip) {\n        // within [...]\n        // skip over until not skipping\n        // ignore escaped chars\n        if (token[position - 1] != '\\\\') {\n          skip += +(char == '[') || -(char == ']')\n        }\n      } else if (char == '[') {\n        // start to skip\n        skip += 1\n      } else if (comment) {\n        if (token[position - 1] != '\\\\' && comment.test(token.slice(position))) {\n          comment = null\n          startIndex = position + RegExp.lastMatch.length\n        }\n      } else if (\n        char == '/' &&\n        token[position - 1] != '\\\\' &&\n        (token[position + 1] == '*' || token[position + 1] == '/')\n      ) {\n        // multiline or single line comment\n        comment = token[position + 1] == '*' ? /^\\*\\// : /^[\\r\\n]/\n      } else if (char == '(') {\n        // hover:(...) or utilitity-(...)\n        commit()\n        active.push(char)\n      } else if (char == ':') {\n        // hover: or after::\n        if (token[position + 1] != ':') {\n          commit(false, 1)\n        }\n      } else if (/[\\s,)]/.test(char)) {\n        // whitespace, comma or closing brace\n        commit(true)\n\n        let lastGroup = active.lastIndexOf('(')\n\n        if (char == ')') {\n          // Close nested block\n          const nested = active[lastGroup - 1]\n\n          if (/[~@]$/.test(nested)) {\n            const rules = current.shift() as ParsedRule[]\n\n            active.length = lastGroup\n\n            // remove variants that are already applied through active\n            createRule([...active, '#'], current, DEV && [startIndex, position])\n            const { v } = current[0].pop() as ParsedRule\n\n            for (const rule of rules) {\n              // if a rule has dark we need to splice after the first entry eg dark\n              rule.v.splice(+(rule.v[0] == 'dark') - +(v[0] == 'dark'), v.length)\n            }\n\n            createRule(\n              [\n                ...active,\n                define(\n                  // named nested\n                  nested.length > 1\n                    ? nested.slice(0, -1) + hash(JSON.stringify([nested, rules]))\n                    : nested + '(' + format(rules) + ')',\n                  Layer.a,\n                  rules,\n                  /@$/.test(nested),\n                ),\n              ],\n              current,\n              DEV && [startIndex, position],\n            )\n          }\n\n          lastGroup = active.lastIndexOf('(', lastGroup - 1)\n        }\n\n        active.length = lastGroup + 1\n      } else if (/[~@]/.test(char) && token[position + 1] == '(') {\n        // start nested block\n        // ~(...) or button~(...)\n        // @(...) or button@(...)\n        current.unshift([])\n      }\n    }\n\n    // Consume remaining stack\n    commit(true)\n\n    cache.set(token, (parsed = current[0]))\n  }\n\n  return parsed\n}\n", "export function interleave<Interpolations>(\n  strings: TemplateStringsArray,\n  interpolations: readonly Interpolations[],\n  handle: (interpolation: Interpolations) => string,\n): string {\n  return interpolations.reduce(\n    (result: string, interpolation, index) => result + handle(interpolation) + strings[index + 1],\n    strings[0],\n  )\n}\n", "import type { Class } from '../types'\nimport { interleave } from './interleave'\n\n// based on https://github.com/lukeed/clsx and https://github.com/jorgebucaran/classcat\nexport function interpolate(\n  strings: TemplateStringsArray | Class,\n  interpolations: Class[],\n): string {\n  return Array.isArray(strings) && Array.isArray((strings as unknown as TemplateStringsArray).raw)\n    ? interleave(strings as unknown as TemplateStringsArray, interpolations, (value) =>\n        toString(value).trim(),\n      )\n    : interpolations\n        .filter(Boolean)\n        .reduce(\n          (result: string, value) => result + toString(value),\n          strings ? toString(strings as Class) : '',\n        )\n}\n\nfunction toString(value: Class): string {\n  let result = ''\n  let tmp: string\n\n  if (value && typeof value == 'object') {\n    if (Array.isArray(value)) {\n      if ((tmp = interpolate(value[0], value.slice(1)))) {\n        result += ' ' + tmp\n      }\n    } else {\n      for (const key in value) {\n        if (value[key]) result += ' ' + key\n      }\n    }\n  } else if (value != null && typeof value != 'boolean') {\n    result += ' ' + value\n  }\n\n  return result\n}\n", "import type { Class, Nested } from './types'\nimport { format } from './internal/format'\nimport { parse } from './parse'\nimport { interpolate } from './internal/interpolate'\n\n/**\n * @group Class Name Generators\n */\nexport const apply = /* #__PURE__ */ alias('@')\n\n/**\n * @group Class Name Generators\n */\nexport const shortcut = /* #__PURE__ */ alias('~')\n\nfunction alias(marker: string): Nested {\n  return new Proxy(\n    function alias(strings: TemplateStringsArray | Class, ...interpolations: Class[]): string {\n      return alias$('', strings, interpolations)\n    } as Nested,\n    {\n      get(target, name) {\n        if (name in target) return target[name as string]\n\n        return function namedAlias(\n          strings: TemplateStringsArray | Class,\n          ...interpolations: Class[]\n        ): string {\n          return alias$(name as string, strings, interpolations)\n        }\n      },\n    },\n  )\n\n  function alias$(\n    name: string,\n    strings: TemplateStringsArray | Class,\n    interpolations: Class[],\n  ): string {\n    return format(parse(name + marker + '(' + interpolate(strings, interpolations) + ')'))\n  }\n}\n", "import type { CSSObject, CSSValue } from '../types'\nimport { interleave } from './interleave'\n\nexport function astish(\n  strings: CSSObject | string | TemplateStringsArray,\n  interpolations: readonly CSSValue[],\n): CSSObject[] {\n  return Array.isArray(strings)\n    ? astish$(\n        interleave(strings as TemplateStringsArray, interpolations, (interpolation) =>\n          interpolation != null && typeof interpolation != 'boolean'\n            ? (interpolation as unknown as string)\n            : '',\n        ),\n      )\n    : typeof strings == 'string'\n    ? astish$(strings)\n    : [strings as CSSObject]\n}\n\n// Based on https://github.com/cristianbote/goober/blob/master/src/core/astish.js\nconst newRule = / *(?:(?:([\\u0080-\\uFFFF\\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}))/g\n\n/**\n * Convert a css style string into a object\n */\nfunction astish$(css: string): CSSObject[] {\n  css = removeComments(css)\n\n  const tree: CSSObject[] = [{}]\n  const rules: CSSObject[] = [tree[0]]\n  const conditions: string[] = []\n  let block: RegExpExecArray | null\n\n  while ((block = newRule.exec(css))) {\n    // Remove the current entry\n    if (block[4]) {\n      tree.shift()\n      conditions.shift()\n    }\n\n    if (block[3]) {\n      // new nested\n      conditions.unshift(block[3])\n      tree.unshift({})\n      rules.push(conditions.reduce((body, condition) => ({ [condition]: body }), tree[0]))\n    } else if (!block[4]) {\n      // if we already have that property — start a new CSSObject\n      if (tree[0][block[1]]) {\n        tree.unshift({})\n        rules.push(conditions.reduce((body, condition) => ({ [condition]: body }), tree[0]))\n      }\n      tree[0][block[1]] = block[2]\n    }\n  }\n\n  // console.log(rules)\n  return rules\n}\n\n// Remove comments (multiline and single line)\nfunction removeComments(css: string): string {\n  return css.replace(/\\/\\*[^]*?\\*\\/|\\s\\s+|\\n/gm, ' ')\n}\n", "import type { CSSObject, CSSValue } from './types'\n\nimport { register } from './internal/registry'\nimport { serialize } from './internal/serialize'\nimport { hash } from './utils'\nimport { Layer } from './internal/precedence'\nimport { merge } from './internal/merge'\nimport { astish } from './internal/astish'\n\n/**\n * @group Class Name Generators\n * @param strings\n * @param interpolations\n */\nexport function css(strings: TemplateStringsArray, ...interpolations: readonly CSSValue[]): string\n\nexport function css(style: CSSObject | string): string\n\nexport function css(\n  strings: CSSObject | string | TemplateStringsArray,\n  ...interpolations: readonly CSSValue[]\n): string {\n  const ast = astish(strings, interpolations)\n\n  const className = (ast.find((o) => o.label)?.label || 'css') + hash(JSON.stringify(ast))\n\n  return register(className, (rule, context) =>\n    merge(\n      ast.flatMap((css) => serialize(css, rule, context, Layer.o)),\n      className,\n    ),\n  )\n}\n", "import type { CSSObject, CSSProperties, StringLike } from './types'\n\nimport { css } from './css'\n\nexport interface AnimationFunction {\n  (animation: string | CSSProperties, waypoints: StringLike): StringLike\n}\n\nexport type Animation = AnimationFunction & {\n  [label: string]: AnimationFunction\n}\n\n/**\n * @group Class Name Generators\n */\nexport const animation = /* #__PURE__ */ new Proxy(\n  function animation(animation: string | CSSProperties, waypoints: StringLike): StringLike {\n    return animation$('animation', animation, waypoints)\n  } as Animation,\n  {\n    get(target, name) {\n      if (name in target) return target[name as string]\n\n      return function namedAnimation(\n        animation: string | CSSProperties,\n        waypoints: StringLike,\n      ): StringLike {\n        return animation$(name as string, animation, waypoints)\n      }\n    },\n  },\n)\n\nfunction animation$(\n  label: string,\n  animation: string | CSSProperties,\n  waypoints: StringLike,\n): StringLike {\n  return {\n    toString() {\n      return css({\n        label,\n        '@layer components': {\n          ...(typeof animation == 'object' ? animation : { animation }),\n          animationName: '' + waypoints,\n        },\n      } as CSSObject)\n    },\n  } as StringLike\n}\n", "import { DEV } from 'distilt/env'\n\nimport type {\n  Context,\n  ColorValue,\n  ColorFunction,\n  BaseTheme,\n  MatchResult,\n  RuleResolver,\n  CSSProperties,\n  CSSObject,\n  RuleResult,\n  ThemeValue,\n  KebabCase,\n  MatchConverter,\n  Rule,\n  MaybeArray,\n} from './types'\n\nimport { toColorValue } from './colors'\nimport { resolveThemeFunction } from './internal/serialize'\nimport {\n  type AutocompleteProvider,\n  type AutocompleteItem,\n  withAutocomplete,\n  type AutocompleteModifier,\n} from './autocomplete'\n\nexport type ThemeMatchResult<Value> = MatchResult & {\n  /** The found theme value */\n  _: Value\n}\n\nexport type ThemeRuleResolver<Value, Theme extends BaseTheme = BaseTheme> = RuleResolver<\n  Theme,\n  ThemeMatchResult<Value>\n>\n\nexport type ThemeMatchConverter<Value, Theme extends BaseTheme = BaseTheme> = MatchConverter<\n  Theme,\n  ThemeMatchResult<Value>\n>\n\n// indirection wrapper to remove autocomplete functions from production bundles\nfunction withAutocomplete$<Theme extends BaseTheme = BaseTheme>(\n  resolver: RuleResolver<Theme>,\n  autocomplete: AutocompleteProvider<Theme> | false,\n): RuleResolver<Theme> {\n  if (DEV) {\n    return withAutocomplete(resolver, autocomplete)\n  }\n\n  return resolver\n}\n\n/**\n * @group Configuration\n * @param pattern\n */\nexport function match<Theme extends BaseTheme = BaseTheme>(\n  pattern: MaybeArray<string | RegExp>,\n): Rule<Theme>\n\n/**\n * @group Configuration\n * @param pattern\n * @param resolver\n */\nexport function match<Theme extends BaseTheme = BaseTheme>(\n  pattern: MaybeArray<string | RegExp>,\n  resolver: RuleResolver<Theme>,\n): Rule<Theme>\n\n/**\n * @group Configuration\n * @param pattern\n * @param resolve\n */\nexport function match<Theme extends BaseTheme = BaseTheme>(\n  pattern: MaybeArray<string | RegExp>,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  resolve: (string & {}) | CSSObject,\n): Rule<Theme>\n\n/**\n * @group Configuration\n * @param pattern\n * @param resolve\n * @param convert\n */\nexport function match<Theme extends BaseTheme = BaseTheme>(\n  pattern: MaybeArray<string | RegExp>,\n  resolve: keyof CSSProperties,\n  convert?: MatchConverter<Theme>,\n): Rule<Theme>\n\nexport function match<Theme extends BaseTheme = BaseTheme>(\n  pattern: MaybeArray<string | RegExp>,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  resolve?: RuleResolver<Theme> | (string & {}) | CSSObject | keyof CSSProperties,\n  convert?: MatchConverter<Theme>,\n): Rule<Theme> {\n  return [pattern, fromMatch(resolve as keyof CSSProperties, convert)]\n}\n\n/**\n * @group Configuration\n * @internal\n * @deprecated Use {@link match} instead.\n */\nexport function fromMatch<Theme extends BaseTheme = BaseTheme>(): RuleResolver<Theme>\n\n/**\n * @group Configuration\n * @internal\n * @deprecated Use {@link match} instead.\n */\nexport function fromMatch<Theme extends BaseTheme = BaseTheme>(\n  resolver: RuleResolver<Theme>,\n): RuleResolver<Theme>\n\n/**\n * @group Configuration\n * @internal\n * @deprecated Use {@link match} instead.\n */\nexport function fromMatch<Theme extends BaseTheme = BaseTheme>(\n  resolve: keyof CSSProperties,\n  convert?: MatchConverter<Theme>,\n): RuleResolver<Theme>\n\n/**\n * @group Configuration\n * @internal\n * @deprecated Use {@link match} instead.\n */\nexport function fromMatch<Theme extends BaseTheme = BaseTheme>(\n  resolve: string | CSSObject,\n): RuleResolver<Theme>\n\nexport function fromMatch<Theme extends BaseTheme = BaseTheme>(\n  resolve?: RuleResolver<Theme> | keyof CSSProperties | string | CSSObject,\n  convert?: MatchConverter<Theme>,\n): RuleResolver<Theme> {\n  return typeof resolve == 'function'\n    ? resolve\n    : typeof resolve == 'string' && /^[\\w-]+$/.test(resolve) // a CSS property alias\n    ? (match, context) =>\n        ({\n          [resolve]: convert ? convert(match, context) : maybeNegate(match, 1),\n        } as CSSObject)\n    : (match) =>\n        // CSSObject, shortcut or apply\n        resolve ||\n        ({\n          [match[1]]: maybeNegate(match, 2),\n        } as CSSObject)\n}\n\nfunction maybeNegate<T>(\n  match: MatchResult,\n  offset: number,\n  value: T | string = match.slice(offset).find(Boolean) || match.$$ || match.input,\n): T | string {\n  return match.input[0] == '-' ? `calc(${value} * -1)` : value\n}\n\n/**\n * @group Configuration\n * @param pattern\n * @param section\n * @param resolve\n * @param convert\n * @returns\n */\nexport function matchTheme<\n  Theme extends BaseTheme = BaseTheme,\n  Section extends keyof Theme & string = keyof Theme & string,\n>(\n  pattern: MaybeArray<string | RegExp>,\n\n  /** Theme section to use (default: `$1` — The first matched group) */\n  section?: '' | Section | KebabCase<Section>,\n\n  /** The css property (default: value of {@link section}) */\n  resolve?: keyof CSSProperties | ThemeRuleResolver<ThemeValue<Theme[Section]>, Theme>,\n\n  convert?: ThemeMatchConverter<ThemeValue<Theme[Section]>, Theme>,\n): Rule<Theme> {\n  return [pattern, fromTheme(section, resolve, convert)]\n}\n\n/**\n * @group Configuration\n * @internal\n * @deprecated Use {@link matchTheme} instead.\n * @param section\n * @param resolve\n * @param convert\n * @returns\n */\nexport function fromTheme<\n  Theme extends BaseTheme = BaseTheme,\n  Section extends keyof Theme & string = keyof Theme & string,\n>(\n  /** Theme section to use (default: `$1` — The first matched group) */\n  section?: '' | Section | KebabCase<Section>,\n\n  /** The css property (default: value of {@link section}) */\n  resolve?: keyof CSSProperties | ThemeRuleResolver<ThemeValue<Theme[Section]>, Theme>,\n\n  convert?: ThemeMatchConverter<ThemeValue<Theme[Section]>, Theme>,\n): RuleResolver<Theme> {\n  const factory: (\n    match: ThemeMatchResult<ThemeValue<Theme[Section]>>,\n    context: Context<Theme>,\n    section: Section,\n  ) => RuleResult =\n    typeof resolve == 'string'\n      ? (match, context) =>\n          ({ [resolve]: convert ? convert(match, context) : match._ } as CSSObject)\n      : resolve || (({ 1: $1, _ }, context, section) => ({ [$1 || section]: _ } as CSSObject))\n\n  return withAutocomplete$(\n    (match, context) => {\n      const themeSection = camelize(section || match[1]) as Section\n\n      const value =\n        context.theme(themeSection, match.$$) ??\n        (arbitrary(match.$$, themeSection, context) as ThemeValue<Theme[Section]>)\n\n      if (value != null) {\n        ;(match as ThemeMatchResult<ThemeValue<Theme[Section]>>)._ = maybeNegate(\n          match,\n          0,\n          value,\n        ) as ThemeValue<Theme[Section]>\n\n        return factory(match as ThemeMatchResult<ThemeValue<Theme[Section]>>, context, themeSection)\n      }\n    },\n    DEV &&\n      ((match, context) => {\n        const themeSection = camelize(section || match[1]) as Section\n\n        const isKeyLookup = match.input.endsWith('-')\n\n        if (isKeyLookup) {\n          return Object.entries(context.theme(themeSection) || {})\n            .filter(\n              ([key, value]) =>\n                key &&\n                key != 'DEFAULT' &&\n                (!/color|fill|stroke/i.test(themeSection) ||\n                  ['string', 'function'].includes(typeof value)),\n            )\n            .map(\n              ([key, value]): AutocompleteItem => ({\n                suffix: key.replace(/-DEFAULT/g, ''),\n                theme: { section: themeSection, key },\n                color:\n                  /color|fill|stroke/i.test(themeSection) &&\n                  toColorValue(value as ColorValue, { opacityValue: '1' }),\n              }),\n            )\n            .concat([{ suffix: '[' }])\n        }\n\n        const value = context.theme(themeSection, 'DEFAULT')\n\n        if (value) {\n          return [\n            {\n              suffix: '',\n              theme: { section: themeSection, key: 'DEFAULT' },\n              color:\n                /color|fill|stroke/i.test(themeSection) &&\n                toColorValue(value as ColorValue, { opacityValue: '1' }),\n            },\n          ]\n        }\n\n        return []\n      }),\n  )\n}\n\nexport type FilterByThemeValue<Theme, Value> = {\n  [key in keyof Theme & string]: ThemeValue<Theme[key]> extends Value ? Theme[key] : never\n}\n\nexport interface ColorFromThemeValue {\n  value: string\n  color: ColorFunction\n  opacityVariable: string | undefined\n  opacityValue: string | undefined\n}\n\nexport interface ColorFromThemeOptions<\n  Theme extends BaseTheme = BaseTheme,\n  Section extends keyof FilterByThemeValue<Theme, ColorValue> = keyof FilterByThemeValue<\n    Theme,\n    ColorValue\n  >,\n  OpacitySection extends keyof FilterByThemeValue<Theme, string> = keyof FilterByThemeValue<\n    Theme,\n    string\n  >,\n> {\n  /** Theme section to use (default: `$0.replace('-', 'Color')` — The matched string with `Color` appended) */\n  section?: Section | KebabCase<Section>\n  /** The css property (default: value of {@link section}) */\n  property?: keyof CSSProperties\n  /** `--tw-${$0}opacity` -> '--tw-text-opacity' */\n  opacityVariable?: string | false\n  /** `section.replace('Color', 'Opacity')` -> 'textOpacity' */\n  opacitySection?: OpacitySection\n  selector?: string\n}\n\n/**\n * @group Configuration\n * @param pattern\n * @param options\n * @param resolve\n * @returns\n */\nexport function matchColor<\n  Theme extends BaseTheme = BaseTheme,\n  Section extends keyof FilterByThemeValue<Theme, ColorValue> = keyof FilterByThemeValue<\n    Theme,\n    ColorValue\n  >,\n  OpacitySection extends keyof FilterByThemeValue<Theme, string> = keyof FilterByThemeValue<\n    Theme,\n    string\n  >,\n>(\n  pattern: MaybeArray<string | RegExp>,\n  options: ColorFromThemeOptions<Theme, Section, OpacitySection> = {},\n  resolve?: ThemeRuleResolver<ColorFromThemeValue, Theme>,\n): Rule<Theme> {\n  return [pattern, colorFromTheme(options, resolve)]\n}\n\n/**\n * @group Configuration\n * @internal\n * @deprecated Use {@link matchColor} instead.\n * @param options\n * @param resolve\n * @returns\n */\nexport function colorFromTheme<\n  Theme extends BaseTheme = BaseTheme,\n  Section extends keyof FilterByThemeValue<Theme, ColorValue> = keyof FilterByThemeValue<\n    Theme,\n    ColorValue\n  >,\n  OpacitySection extends keyof FilterByThemeValue<Theme, string> = keyof FilterByThemeValue<\n    Theme,\n    string\n  >,\n>(\n  options: ColorFromThemeOptions<Theme, Section, OpacitySection> = {},\n  resolve?: ThemeRuleResolver<ColorFromThemeValue, Theme>,\n): RuleResolver<Theme> {\n  return withAutocomplete$(\n    (match, context) => {\n      // text- -> textColor\n      // ring-offset(?:-|$) -> ringOffsetColor\n      const { section = (camelize(match[0]).replace('-', '') + 'Color') as Section } = options\n\n      // extract color and opacity\n      // rose-500                  -> ['rose-500']\n      // [hsl(0_100%_/_50%)]       -> ['[hsl(0_100%_/_50%)]']\n      // indigo-500/100            -> ['indigo-500', '100']\n      // [hsl(0_100%_/_50%)]/[.25] -> ['[hsl(0_100%_/_50%)]', '[.25]']\n      const [colorMatch, opacityMatch] = parseValue(match.$$)\n\n      if (!colorMatch) return\n\n      const colorValue =\n        (context.theme(section, colorMatch) as ColorValue) ||\n        arbitrary(colorMatch, section, context)\n\n      if (!colorValue || typeof colorValue == 'object') return\n\n      const {\n        // text- -> --tw-text-opacity\n        // ring-offset(?:-|$) -> --tw-ring-offset-opacity\n        // TODO move this default into preset-tailwind?\n        opacityVariable = `--tw-${match[0].replace(/-$/, '')}-opacity`,\n        opacitySection = section.replace('Color', 'Opacity') as OpacitySection,\n        property = section,\n        selector,\n      } = options\n\n      const opacityValue =\n        (context.theme(opacitySection, opacityMatch || 'DEFAULT') as string | undefined) ||\n        (opacityMatch && arbitrary(opacityMatch, opacitySection, context))\n\n      // if (typeof color != 'string') {\n      //   console.warn(`Invalid color ${colorMatch} (from ${match.input}):`, color)\n      //   return\n      // }\n\n      const create =\n        resolve ||\n        (({ _ }) => {\n          const properties = toCSS(property, _)\n\n          return selector ? { [selector]: properties } : properties\n        })\n\n      ;(match as ThemeMatchResult<ColorFromThemeValue>)._ = {\n        value: toColorValue(colorValue, {\n          opacityVariable: opacityVariable || undefined,\n          opacityValue: opacityValue || undefined,\n        }),\n        color: (options) => toColorValue(colorValue, options),\n        opacityVariable: opacityVariable || undefined,\n        opacityValue: opacityValue || undefined,\n      }\n\n      let properties = create(match as ThemeMatchResult<ColorFromThemeValue>, context)\n\n      // auto support dark mode colors\n      if (!match.dark) {\n        const darkColorValue = context.d(section, colorMatch, colorValue)\n\n        if (darkColorValue && darkColorValue !== colorValue) {\n          ;(match as ThemeMatchResult<ColorFromThemeValue>)._ = {\n            value: toColorValue(darkColorValue, {\n              opacityVariable: opacityVariable || undefined,\n              opacityValue: opacityValue || '1',\n            }),\n            color: (options) => toColorValue(darkColorValue, options),\n            opacityVariable: opacityVariable || undefined,\n            opacityValue: opacityValue || undefined,\n          }\n\n          properties = {\n            '&': properties,\n            [context.v('dark') as string]: create(\n              match as ThemeMatchResult<ColorFromThemeValue>,\n              context,\n            ),\n          } as CSSObject\n        }\n      }\n\n      return properties\n    },\n    DEV &&\n      ((match, context) => {\n        const {\n          section = (camelize(match[0]).replace('-', '') + 'Color') as Section,\n          opacitySection = section.replace('Color', 'Opacity') as OpacitySection,\n        } = options\n\n        const isKeyLookup = match.input.endsWith('-')\n\n        const opacities = Object.entries<string>(context.theme(opacitySection) || {}).filter(\n          ([key, value]) => key != 'DEFAULT' && /^[\\w-]+$/.test(key) && typeof value == 'string',\n        )\n\n        if (isKeyLookup) {\n          // ['gray-50', ['/0', '/10', ...]],\n          // ['gray-100', ['/0', '/10', ...]],\n\n          return Object.entries(context.theme(section) || {})\n            .filter(\n              ([key, value]) =>\n                key && key != 'DEFAULT' && ['string', 'function'].includes(typeof value),\n            )\n            .map(\n              ([key, value]): AutocompleteItem => ({\n                suffix: key.replace(/-DEFAULT/g, ''),\n                theme: { section, key },\n                color: toColorValue(value as ColorValue, {\n                  opacityValue: (context.theme(opacitySection, 'DEFAULT') as string) || '1',\n                }),\n                modifiers:\n                  (typeof value == 'function' ||\n                    (typeof value == 'string' &&\n                      (value.includes('<alpha-value>') ||\n                        (value[0] == '#' && (value.length == 4 || value.length == 7))))) &&\n                  opacities\n                    .map(\n                      ([key, opacityValue]): AutocompleteModifier => ({\n                        modifier: key,\n                        theme: { section: opacitySection, key },\n                        color: toColorValue(value as ColorValue, { opacityValue }),\n                      }),\n                    )\n                    .concat([\n                      {\n                        modifier: '[',\n                        color: toColorValue(value as ColorValue, { opacityValue: '1' }),\n                      },\n                    ]),\n              }),\n            )\n            .concat([{ suffix: '[' }])\n        }\n\n        const value = context.theme(section, 'DEFAULT')\n\n        if (value) {\n          return [\n            {\n              suffix: '',\n              theme: { section, key: 'DEFAULT' },\n              color: toColorValue(value as ColorValue, {\n                opacityValue: (context.theme(opacitySection, 'DEFAULT') as string) || '1',\n              }),\n              modifiers:\n                (typeof value == 'function' ||\n                  (typeof value == 'string' &&\n                    (value.includes('<alpha-value>') ||\n                      (value[0] == '#' && (value.length == 4 || value.length == 7))))) &&\n                opacities\n                  .map(\n                    ([key, opacityValue]): AutocompleteModifier => ({\n                      modifier: key,\n                      theme: { section: opacitySection, key },\n                      color: toColorValue(value as ColorValue, { opacityValue }),\n                    }),\n                  )\n                  .concat([\n                    {\n                      modifier: '[',\n                      color: toColorValue(value as ColorValue, { opacityValue: '1' }),\n                    },\n                  ]),\n            },\n          ]\n        }\n\n        return []\n      }),\n  )\n}\n\n/**\n * @internal\n * @param input\n */\nexport function parseValue(\n  input: string,\n):\n  | [value: string, modifier: string | undefined]\n  | [value: undefined, modifier: string | undefined] {\n  // extract color and opacity\n  // rose-500                  -> ['rose-500']\n  // [hsl(0_100%_/_50%)]       -> ['[hsl(0_100%_/_50%)]']\n  // indigo-500/100            -> ['indigo-500', '100']\n  // [hsl(0_100%_/_50%)]/[.25] -> ['[hsl(0_100%_/_50%)]', '[.25]']\n  return (input.match(/^(\\[[^\\]]+]|[^/]+?)(?:\\/(.+))?$/) || []).slice(1) as [\n    value: string,\n    modifier: string | undefined,\n  ]\n}\n\n/**\n * @internal\n * @param property\n * @param value\n * @returns\n */\nexport function toCSS(property: string, value: string | ColorFromThemeValue): CSSObject {\n  const properties: CSSObject = {}\n\n  if (typeof value === 'string') {\n    properties[property] = value\n  } else {\n    if (value.opacityVariable && value.value.includes(value.opacityVariable)) {\n      properties[value.opacityVariable] = value.opacityValue || '1'\n    }\n\n    properties[property] = value.value\n  }\n\n  return properties\n}\n\n/**\n * @internal\n * @param value\n * @param section\n * @param context\n * @returns\n */\nexport function arbitrary<Theme extends BaseTheme = BaseTheme>(\n  value: string,\n  section: string | undefined,\n  context: Context<Theme>,\n): string | undefined {\n  if (value[0] == '[' && value.slice(-1) == ']') {\n    value = normalize(resolveThemeFunction(value.slice(1, -1), context.theme))\n\n    if (!section) return value\n\n    if (\n      // Respect type hints from the user on ambiguous arbitrary values - https://tailwindcss.com/docs/adding-custom-styles#resolving-ambiguities\n      !(\n        // If this is a color section and the value is a hex color, color function or color name\n        (\n          (/color|fill|stroke/i.test(section) &&\n            !(\n              /^color:/.test(value) || /^(#|((hsl|rgb)a?|hwb|lab|lch|color)\\(|[a-z]+$)/.test(value)\n            )) ||\n          // url(, [a-z]-gradient(, image(, cross-fade(, image-set(\n          (/image/i.test(section) && !(/^image:/.test(value) || /^[a-z-]+\\(/.test(value))) ||\n          // font-*\n          // - fontWeight (type: ['lookup', 'number', 'any'])\n          // - fontFamily (type: ['lookup', 'generic-name', 'family-name'])\n          (/weight/i.test(section) && !(/^(number|any):/.test(value) || /^\\d+$/.test(value))) ||\n          // bg-*\n          // - backgroundPosition (type: ['lookup', ['position', { preferOnConflict: true }]])\n          // - backgroundSize (type: ['lookup', 'length', 'percentage', 'size'])\n          (/position/i.test(section) && /^(length|size):/.test(value))\n        )\n      )\n    ) {\n      // remove arbitrary type prefix — we do not need it but user may use it\n      // https://github.com/tailwindlabs/tailwindcss/blob/master/src/util/dataTypes.js\n      // url, number, percentage, length, line-width, shadow, color, image, gradient, position, family-name, lookup, any, generic-name, absolute-size, relative-size\n      return value.replace(/^[a-z-]+:/, '')\n    }\n  }\n}\n\nfunction camelize(value: string): string {\n  return value.replace(/-./g, (x) => x[1].toUpperCase())\n}\n\n/**\n * @internal\n * @param value\n * @returns\n */\nexport function normalize(value: string): string {\n  // Keep raw strings if it starts with `url(`\n  if (value.includes('url(')) {\n    return value.replace(\n      /(.*?)(url\\(.*?\\))(.*?)/g,\n      (_, before = '', url, after = '') => normalize(before) + url + normalize(after),\n    )\n  }\n\n  return (\n    value\n      // Convert `_` to ` `, except for escaped underscores `\\_`\n      .replace(\n        /(^|[^\\\\])_+/g,\n        (fullMatch, characterBefore: string) =>\n          characterBefore + ' '.repeat(fullMatch.length - characterBefore.length),\n      )\n      .replace(/\\\\_/g, '_')\n\n      // Add spaces around operators inside math functions like calc() that do not follow an operator\n      // or '('.\n      .replace(/(calc|min|max|clamp)\\(.+\\)/g, (match) =>\n        match.replace(\n          /(-?\\d*\\.?\\d(?!\\b-.+[,)](?![^+\\-/*])\\D)(?:%|[a-z]+)?|\\))([+\\-/*])/g,\n          '$1 $2 ',\n        ),\n      )\n  )\n}\n", "import type {\n  BaseTheme,\n  CSSProperties,\n  MatchResult,\n  Rule,\n  RuleResolver,\n  ThemeFunction,\n  VariantResolver,\n} from './types'\nimport { DEV } from 'distilt/env'\nimport { fromMatch } from './rules'\nimport { asArray } from './utils'\n\nexport type AutocompleteItem = {\n  prefix?: string\n  suffix: string\n  theme?: { section: string; key: string }\n  modifiers?: AutocompleteModifier[] | false | null | undefined\n  color?: string | false | null | undefined\n  label?: string\n}\n\nexport type AutocompleteModifier = {\n  modifier: string\n  theme?: { section: string; key: string }\n  color?: string | false | null | undefined\n  label?: string\n}\n\nexport interface AutocompleteContext<Theme extends BaseTheme = BaseTheme> {\n  /** Allows to resolve theme values. */\n  readonly theme: ThemeFunction<Theme>\n  readonly variants: Record<string, string>\n}\n\nexport type AutocompleteProvider<Theme extends BaseTheme = BaseTheme> = (\n  match: MatchResult,\n  context: AutocompleteContext<Theme>,\n) => (string | AutocompleteItem)[]\n\nconst kAutocomplete = /* #__PURE__ */ Symbol('@twind/autocomplete')\n\n/**\n * @experimental\n * @group Configuration\n * @param resolver\n * @param autocomplete\n */\nexport function withAutocomplete<Theme extends BaseTheme = BaseTheme>(\n  resolver: RuleResolver<Theme>,\n  autocomplete: AutocompleteProvider<Theme> | false | null | undefined,\n): RuleResolver<Theme>\n\nexport function withAutocomplete<Theme extends BaseTheme = BaseTheme>(\n  resolver: VariantResolver<Theme>,\n  autocomplete: AutocompleteProvider<Theme> | false | null | undefined,\n): VariantResolver<Theme>\n\nexport function withAutocomplete<Theme extends BaseTheme = BaseTheme>(\n  rule: Rule<Theme>,\n  autocomplete: AutocompleteProvider<Theme> | false | null | undefined,\n): Rule<Theme>\n\nexport function withAutocomplete<Theme extends BaseTheme = BaseTheme>(\n  rule: Rule<Theme> | RuleResolver<Theme> | VariantResolver<Theme>,\n  autocomplete: AutocompleteProvider<Theme> | false | null | undefined,\n): Rule<Theme> | RuleResolver<Theme> | VariantResolver<Theme> {\n  if (DEV && autocomplete) {\n    if (typeof rule == 'function') {\n      return Object.defineProperty(rule, kAutocomplete, {\n        value: autocomplete,\n        configurable: true,\n      })\n    }\n\n    const [pattern, resolve, convert] = asArray(rule) as Exclude<Rule<Theme>, string | RegExp>\n\n    // [\n    //   patterns: MaybeArray<string | RegExp>,\n    //   resolve?: keyof CSSProperties | string | CSSObject | RuleResolver<Theme>,\n    //   convert?: MatchConverter<Theme>,\n    // ]\n\n    return [\n      pattern,\n      Object.defineProperty(fromMatch(resolve as keyof CSSProperties, convert), kAutocomplete, {\n        value: autocomplete,\n        configurable: true,\n      }),\n    ]\n  }\n\n  return rule\n}\n\n/**\n * @internal\n * @param resolver\n * @returns\n */\nexport function getAutocompleteProvider<Theme extends BaseTheme = BaseTheme>(\n  resolver: RuleResolver<Theme> | VariantResolver<Theme>,\n): AutocompleteProvider<Theme> | undefined {\n  return (resolver as { [kAutocomplete]?: AutocompleteProvider<Theme> })[kAutocomplete]\n}\n", "import type { Class } from './types'\nimport { parse } from './parse'\nimport { format } from './internal/format'\nimport { interpolate } from './internal/interpolate'\n\n/**\n * Constructs `class` strings conditionally.\n *\n * Twinds version of popular libraries like [classnames](https://github.com/JedWatson/classnames) or [clsx](https://github.com/lukeed/clsx).\n * The key advantage of `cx` is that it supports twinds enhanced class name syntax like grouping and aliases.\n *\n * @group Class Name Generators\n * @param strings\n * @param interpolations\n * @returns\n */\nexport function cx(strings: TemplateStringsArray, ...interpolations: Class[]): string\n\n/**\n * Constructs `class` strings conditionally.\n *\n * Twinds version of popular libraries like [classnames](https://github.com/JedWatson/classnames) or [clsx](https://github.com/lukeed/clsx).\n * The key advantage of `cx` is that it supports twinds enhanced class name syntax like grouping and aliases.\n *\n * @group Class Name Generators\n * @param input\n */\nexport function cx(...input: Class[]): string\n\nexport function cx(strings: TemplateStringsArray | Class, ...interpolations: Class[]): string {\n  return format(parse(interpolate(strings, interpolations)), ' ')\n}\n", "import type {\n  BaseTheme,\n  Preset,\n  TwindConfig,\n  TwindUserConfig,\n  ExtractThemes,\n  TwindPresetConfig,\n} from './types'\n\nimport { asArray } from './utils'\n\n/**\n * @group Configuration\n * @param param0\n * @returns\n */\nexport function defineConfig<Theme = BaseTheme, Presets extends Preset<any>[] = Preset[]>({\n  presets = [] as unknown as Presets,\n  ...userConfig\n}: TwindUserConfig<Theme, Presets>): TwindConfig<BaseTheme & ExtractThemes<Theme, Presets>> {\n  // most user config values go first to have precendence over preset config\n  // only `preflight` and `theme` are applied as last preset to override all presets\n  let config: TwindConfig<BaseTheme & ExtractThemes<Theme, Presets>> = {\n    darkMode: undefined,\n    darkColor: undefined,\n    preflight: userConfig.preflight !== false && [],\n    theme: {},\n    variants: asArray(userConfig.variants),\n    rules: asArray(userConfig.rules),\n    ignorelist: asArray(userConfig.ignorelist),\n    hash: undefined,\n    stringify: (property, value) => property + ':' + value,\n    finalize: [],\n  }\n\n  for (const preset of asArray([\n    ...presets,\n    {\n      darkMode: userConfig.darkMode,\n      darkColor: userConfig.darkColor,\n      preflight: userConfig.preflight !== false && asArray(userConfig.preflight),\n      theme: userConfig.theme as TwindConfig<BaseTheme & ExtractThemes<Theme, Presets>>['theme'],\n      hash: userConfig.hash,\n      stringify: userConfig.stringify,\n      finalize: userConfig.finalize,\n    } as TwindPresetConfig<Theme>,\n  ])) {\n    const {\n      preflight,\n      darkMode = config.darkMode,\n      darkColor = config.darkColor,\n      theme,\n      variants,\n      rules,\n      ignorelist,\n      hash = config.hash,\n      stringify = config.stringify,\n      finalize,\n    } = typeof preset == 'function' ? preset(config) : (preset as TwindPresetConfig<Theme>)\n\n    config = {\n      // values defined by user or previous presets take precedence\n      preflight: config.preflight !== false &&\n        preflight !== false && [...config.preflight, ...asArray(preflight)],\n\n      darkMode,\n      darkColor,\n\n      theme: {\n        ...config.theme,\n        ...theme,\n        extend: {\n          ...config.theme.extend,\n          ...theme?.extend,\n        },\n      },\n\n      variants: [...config.variants, ...asArray(variants)],\n      rules: [...config.rules, ...asArray(rules)],\n      ignorelist: [...config.ignorelist, ...asArray(ignorelist)],\n\n      hash,\n      stringify,\n\n      finalize: [...config.finalize, ...asArray(finalize)],\n    } as TwindConfig<BaseTheme & ExtractThemes<Theme, Presets>>\n  }\n\n  return config\n}\n", "import { DEV } from 'distilt/env'\n\ndeclare global {\n  interface WindowEventMap {\n    warning: CustomEvent<Warning>\n  }\n}\n\nexport type Warning = {\n  [Code in keyof WarningEventMap]: { message: string; code: Code; detail: WarningEventMap[Code] }\n}[keyof WarningEventMap]\n\nexport interface WarningEventMap {\n  TWIND_INVALID_CLASS: string\n  TWIND_INVALID_CSS: string\n}\n\nexport function warn<Code extends keyof WarningEventMap>(\n  message: string,\n  code: Code,\n  detail: WarningEventMap[Code],\n): void {\n  if (DEV) {\n    if (typeof dispatchEvent == 'function' && typeof CustomEvent === 'function') {\n      // Browser\n      const event = new CustomEvent('warning', {\n        detail: { message, code, detail },\n        cancelable: true,\n      })\n\n      dispatchEvent(event)\n\n      if (!event.defaultPrevented) {\n        console.warn(`[${code}] ${message}`, { detail })\n      }\n    } else if (typeof process == 'object' && typeof process.emitWarning == 'function') {\n      // Node.JS\n      process.emitWarning(message, { code, detail } as unknown as string)\n    } else {\n      // Fallback\n      console.warn(`[${code}] ${message}`, { detail })\n    }\n  }\n}\n", "import type {\n  BaseTheme,\n  Context,\n  RuleResult,\n  TwindConfig,\n  CSSProperties,\n  MatchResult,\n  MaybeArray,\n  RuleResolver,\n  MatchConverter,\n  Rule,\n  CSSObject,\n  Variant,\n  VariantResult,\n  VariantResolver,\n  Falsey,\n} from '../types'\n\nimport { DEV } from 'distilt/env'\n\nimport { makeThemeFunction } from './theme'\nimport { asArray, escape, hash as defaultHash, identity, noop } from '../utils'\nimport { fromMatch } from '../rules'\nimport { warn } from './warn'\n\ntype ResolveFunction<Theme extends BaseTheme = BaseTheme> = (\n  className: string,\n  context: Context<Theme>,\n  isDark?: boolean,\n) => RuleResult\n\ntype VariantFunction<Theme extends BaseTheme = BaseTheme> = (\n  variant: string,\n  context: Context<Theme>,\n) => VariantResult\n\nexport function createContext<Theme extends BaseTheme = BaseTheme>({\n  theme,\n  darkMode,\n  darkColor = noop,\n  variants,\n  rules,\n  hash,\n  stringify,\n  ignorelist,\n  finalize,\n}: TwindConfig<Theme>): Context<Theme> {\n  // Used to cache resolved rule values\n  const variantCache = new Map<string, MaybeArray<string>>()\n\n  // lazy created resolve functions\n  const variantResolvers = new Map<Variant<Theme>, VariantFunction<Theme>>()\n\n  // Used to cache resolved rule values\n  const ruleCache = new Map<string, RuleResult>()\n\n  // lazy created resolve functions\n  const ruleResolvers = new Map<Rule<Theme>, ResolveFunction<Theme>>()\n\n  const ignored = createRegExpExecutor(ignorelist, (value, condition) => condition.test(value))\n\n  const reportedUnknownClasses = /* #__PURE__ */ new Set<string>()\n\n  // add dark as last variant to allow user to override it\n  // we can modify variants as it has been passed through defineConfig which already made a copy\n  variants.push([\n    'dark',\n    Array.isArray(darkMode) || darkMode == 'class'\n      ? `${asArray(darkMode)[1] || '.dark'} &`\n      : typeof darkMode == 'string' && darkMode != 'media'\n      ? darkMode // a custom selector\n      : '@media (prefers-color-scheme:dark)',\n  ])\n\n  const h =\n    typeof hash == 'function'\n      ? (value: string) => hash(value, defaultHash)\n      : hash\n      ? defaultHash\n      : identity\n\n  if (h !== identity) {\n    finalize.push((rule) => ({\n      ...rule,\n      n: rule.n && h(rule.n),\n      d: rule.d?.replace(\n        /--(tw(?:-[\\w-]+)?)\\b/g,\n        (_: string, property: string) => '--' + h(property).replace('#', ''),\n      ),\n    }))\n  }\n\n  const ctx: Context<Theme> = {\n    theme: makeThemeFunction(theme),\n\n    e: escape,\n\n    h,\n\n    s(property, value) {\n      return stringify(property, value, ctx)\n    },\n\n    d(section, key, color) {\n      return darkColor(section, key, ctx, color)\n    },\n\n    v(value) {\n      if (!variantCache.has(value)) {\n        variantCache.set(\n          value,\n          find(value, variants, variantResolvers, getVariantResolver, ctx) || '&:' + value,\n        )\n      }\n\n      return variantCache.get(value) as string\n    },\n\n    r(className, isDark) {\n      const key = JSON.stringify([className, isDark])\n\n      if (!ruleCache.has(key)) {\n        ruleCache.set(\n          key,\n          !ignored(className, ctx) &&\n            find(className, rules, ruleResolvers, getRuleResolver, ctx, isDark),\n        )\n\n        if (DEV) {\n          const rule = ruleCache.get(key)\n          if (rule == null && !reportedUnknownClasses.has(className)) {\n            reportedUnknownClasses.add(className)\n\n            warn(\n              `Unknown class ${JSON.stringify(className)} found.`,\n              'TWIND_INVALID_CLASS',\n              className,\n            )\n          }\n        }\n      }\n\n      return ruleCache.get(key)\n    },\n\n    f(rule) {\n      return finalize.reduce((rule, p) => p(rule, ctx), rule)\n    },\n  }\n\n  return ctx\n}\n\nfunction find<Value, Config, Result, Theme extends BaseTheme = BaseTheme>(\n  value: Value,\n  list: Config[],\n  cache: Map<Config, (value: Value, context: Context<Theme>, isDark?: boolean) => Result>,\n  getResolver: (\n    item: Config,\n  ) => (value: Value, context: Context<Theme>, isDark?: boolean) => Result,\n  context: Context<Theme>,\n  isDark?: boolean,\n) {\n  for (const item of list) {\n    let resolver = cache.get(item)\n\n    if (!resolver) {\n      cache.set(item, (resolver = getResolver(item)))\n    }\n\n    const resolved = resolver(value, context, isDark)\n\n    if (resolved) return resolved\n  }\n}\n\nfunction getVariantResolver<Theme extends BaseTheme = BaseTheme>(\n  variant: Variant<Theme>,\n): VariantFunction<Theme> {\n  return createVariantFunction(variant[0], variant[1])\n}\n\nfunction getRuleResolver<Theme extends BaseTheme = BaseTheme>(\n  rule: Rule<Theme>,\n): ResolveFunction<Theme> {\n  if (Array.isArray(rule)) {\n    return createResolveFunction(rule[0], rule[1], rule[2])\n  }\n\n  return createResolveFunction(rule)\n}\n\nfunction createVariantFunction<Theme extends BaseTheme = BaseTheme>(\n  patterns: MaybeArray<string | RegExp>,\n  resolve: string | VariantResolver<Theme>,\n): VariantFunction<Theme> {\n  return createResolve(patterns, typeof resolve == 'function' ? resolve : () => resolve)\n}\n\nfunction createResolveFunction<Theme extends BaseTheme = BaseTheme>(\n  patterns: MaybeArray<string | RegExp>,\n  resolve?: keyof CSSProperties | string | CSSObject | RuleResolver<Theme>,\n  convert?: MatchConverter<Theme>,\n): ResolveFunction<Theme> {\n  return createResolve(patterns, fromMatch(resolve as keyof CSSProperties, convert))\n}\n\nfunction createResolve<Result, Theme extends BaseTheme = BaseTheme>(\n  patterns: MaybeArray<string | RegExp>,\n  resolve: (match: MatchResult, context: Context<Theme>) => Result,\n): (value: string, context: Context<Theme>, isDark?: boolean) => Result | undefined {\n  return createRegExpExecutor(patterns, (value, condition, context, isDark?: boolean) => {\n    const match = condition.exec(value) as MatchResult | Falsey\n\n    if (match) {\n      // MATCH.$_ = value\n      match.$$ = value.slice(match[0].length)\n      match.dark = isDark\n\n      return resolve(match, context)\n    }\n  })\n}\n\nfunction createRegExpExecutor<Result, Theme extends BaseTheme = any>(\n  patterns: MaybeArray<string | RegExp>,\n  run: (value: string, condition: RegExp, context: Context<Theme>, isDark?: boolean) => Result,\n): (value: string, context: Context<Theme>, isDark?: boolean) => Result | undefined {\n  const conditions = asArray(patterns).map(toCondition)\n\n  return (value, context, isDark) => {\n    for (const condition of conditions) {\n      const result = run(value, condition, context, isDark)\n\n      if (result) return result\n    }\n  }\n}\n\nexport function toCondition(value: string | RegExp): RegExp {\n  // \"visible\" -> /^visible$/\n  // \"(float)-(left|right|none)\" -> /^(float)-(left|right|none)$/\n  // \"auto-rows-\" -> /^auto-rows-/\n  // \"gap(-|$)\" -> /^gap(-|$)/\n  return typeof value == 'string'\n    ? new RegExp('^' + value + (value.includes('$') || value.slice(-1) == '-' ? '' : '$'))\n    : value\n}\n", "import type {\n  BaseTheme,\n  ExtractThemes,\n  Preset,\n  Twind,\n  Sheet,\n  TwindConfig,\n  TwindRule,\n  TwindUserConfig,\n} from './types'\nimport type { SortableRule } from './internal/sorted-insertion-index'\n\nimport { sortedInsertionIndex } from './internal/sorted-insertion-index'\nimport { stringify } from './internal/stringify'\nimport { createContext } from './internal/context'\nimport { translate, translateWith } from './internal/translate'\nimport { parse } from './parse'\nimport { defineConfig } from './define-config'\nimport { asArray } from './utils'\nimport { serialize } from './internal/serialize'\nimport { Layer } from './internal/precedence'\n\n/**\n * @group Runtime\n * @param config\n * @param sheet\n */\nexport function twind<Theme extends BaseTheme = BaseTheme, Target = unknown>(\n  config: TwindConfig<Theme>,\n  sheet: Sheet<Target>,\n): Twind<Theme, Target>\n\nexport function twind<\n  Theme = BaseTheme,\n  Presets extends Preset<any>[] = Preset[],\n  Target = unknown,\n>(\n  config: TwindUserConfig<Theme, Presets>,\n  sheet: Sheet<Target>,\n): Twind<BaseTheme & ExtractThemes<Theme, Presets>, Target>\n\nexport function twind(userConfig: TwindConfig<any> | TwindUserConfig<any>, sheet: Sheet): Twind {\n  const config = defineConfig(userConfig as TwindUserConfig<any>)\n\n  const context = createContext(config)\n\n  // Map of tokens to generated className\n  let cache = new Map<string, string>()\n\n  // An array of precedence by index within the sheet\n  // always sorted\n  let sortedPrecedences: SortableRule[] = []\n\n  // Cache for already inserted css rules\n  // to prevent double insertions\n  let insertedRules = new Set<string>()\n\n  sheet.resume(\n    (className) => cache.set(className, className),\n    (cssText, rule) => {\n      sheet.insert(cssText, sortedPrecedences.length, rule)\n      sortedPrecedences.push(rule)\n      insertedRules.add(cssText)\n    },\n  )\n\n  function insert(rule: TwindRule): string | undefined {\n    const finalRule = context.f(rule)\n\n    const cssText = stringify(finalRule)\n\n    // If not already inserted\n    if (cssText && !insertedRules.has(cssText)) {\n      // Mark rule as inserted\n      insertedRules.add(cssText)\n\n      // Find the correct position\n      const index = sortedInsertionIndex(sortedPrecedences, rule)\n\n      // Insert\n      sheet.insert(cssText, index, rule)\n\n      // Update sorted index\n      sortedPrecedences.splice(index, 0, rule)\n    }\n\n    return finalRule.n\n  }\n\n  return Object.defineProperties(\n    function tw(tokens) {\n      if (!cache.size) {\n        for (let preflight of asArray(config.preflight)) {\n          if (typeof preflight == 'function') {\n            preflight = preflight(context)\n          }\n\n          if (preflight) {\n            ;(typeof preflight == 'string'\n              ? translateWith('', Layer.b, parse(preflight), context, Layer.b, [], false, true)\n              : serialize(preflight, {}, context, Layer.b)\n            ).forEach(insert)\n          }\n        }\n      }\n\n      tokens = '' + tokens\n\n      let className = cache.get(tokens)\n\n      if (!className) {\n        const classNames = new Set<string | undefined>()\n\n        for (const rule of translate(parse(tokens), context)) {\n          classNames.add(rule.c).add(insert(rule))\n        }\n\n        className = [...classNames].filter(Boolean).join(' ')\n\n        // Remember the generated class name\n        cache.set(tokens, className).set(className, className)\n      }\n\n      return className\n    } as Twind,\n    Object.getOwnPropertyDescriptors({\n      get target() {\n        return sheet.target\n      },\n\n      theme: context.theme,\n\n      config,\n\n      snapshot() {\n        const restoreSheet = sheet.snapshot()\n        const insertedRules$ = new Set(insertedRules)\n        const cache$ = new Map(cache)\n        const sortedPrecedences$ = [...sortedPrecedences]\n\n        return () => {\n          restoreSheet()\n\n          insertedRules = insertedRules$\n          cache = cache$\n          sortedPrecedences = sortedPrecedences$\n        }\n      },\n\n      clear() {\n        sheet.clear()\n\n        insertedRules = new Set()\n        cache = new Map()\n        sortedPrecedences = []\n      },\n\n      destroy() {\n        this.clear()\n        sheet.destroy()\n      },\n    }),\n  )\n}\n", "/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport type {\n  BaseTheme,\n  MaybeColorValue,\n  ThemeConfig,\n  ThemeFunction,\n  ThemeSectionResolverContext,\n} from '../types'\nimport { toColorValue } from '../colors'\nimport { resolveThemeFunction } from './serialize'\n\nexport function makeThemeFunction<Theme extends BaseTheme = BaseTheme>({\n  extend = {},\n  ...base\n}: ThemeConfig<Theme>): ThemeFunction<Theme> {\n  const resolved: Record<string, any> = {}\n\n  const resolveContext: ThemeSectionResolverContext<Theme> = {\n    get colors() {\n      return theme('colors')\n    },\n\n    theme,\n\n    // Stub implementation as negated values are automatically infered and do _not_ need to be in the theme\n    negative() {\n      return {}\n    },\n\n    breakpoints(screens) {\n      const breakpoints = {} as Record<string, string>\n\n      for (const key in screens) {\n        if (typeof screens[key] == 'string') {\n          breakpoints['screen-' + key] = screens[key] as string\n        }\n      }\n\n      return breakpoints\n    },\n  }\n\n  return theme as ThemeFunction<Theme>\n\n  function theme(\n    sectionKey?: string,\n    key?: string,\n    defaultValue?: any,\n    opacityValue?: string | undefined,\n  ): any {\n    if (sectionKey) {\n      ;({ 1: sectionKey, 2: opacityValue } =\n        // eslint-disable-next-line no-sparse-arrays\n        /^(\\S+?)(?:\\s*\\/\\s*([^/]+))?$/.exec(sectionKey) || ([, sectionKey] as [undefined, string]))\n\n      if (/[.[]/.test(sectionKey)) {\n        const path: string[] = []\n\n        // dotted deep access: colors.gray.500 or spacing[2.5]\n        sectionKey.replace(\n          /\\[([^\\]]+)\\]|([^.[]+)/g,\n          (_, $1, $2 = $1) => path.push($2) as unknown as string,\n        )\n\n        sectionKey = path.shift() as string\n        defaultValue = key\n        key = path.join('-')\n      }\n\n      const section =\n        resolved[sectionKey] ||\n        // two-step deref to allow extend section to reference base section\n        Object.assign(\n          Object.assign(\n            // Make sure to not get into recursive calls\n            (resolved[sectionKey] = {}),\n            deref(base, sectionKey),\n          ),\n          deref(extend, sectionKey),\n        )\n\n      if (key == null) return section\n\n      key ||= 'DEFAULT'\n\n      const value =\n        section[key] ?? key.split('-').reduce((obj, prop) => obj?.[prop], section) ?? defaultValue\n\n      return opacityValue\n        ? toColorValue(value, { opacityValue: resolveThemeFunction(opacityValue, theme) })\n        : value\n    }\n\n    // Collect the whole theme\n    const result = {} as Record<string, any>\n\n    for (const section of [...Object.keys(base), ...Object.keys(extend)]) {\n      result[section] = theme(section)\n    }\n\n    return result\n  }\n\n  function deref(source: any, section: string): any {\n    let value = source[section]\n\n    if (typeof value == 'function') {\n      value = value(resolveContext)\n    }\n\n    if (value && /color|fill|stroke/i.test(section)) {\n      return flattenColorPalette(value)\n    }\n\n    return value\n  }\n}\n\nfunction flattenColorPalette(colors: Record<string, MaybeColorValue>, path: string[] = []): any {\n  const flattend: Record<string, MaybeColorValue> = {}\n\n  for (const key in colors) {\n    const value = colors[key]\n\n    let keyPath = [...path, key]\n\n    flattend[keyPath.join('-')] = value\n\n    if (key == 'DEFAULT') {\n      keyPath = path\n      flattend[path.join('-')] = value\n    }\n\n    if (typeof value == 'object') {\n      Object.assign(flattend, flattenColorPalette(value, keyPath))\n    }\n  }\n\n  return flattend\n}\n", "/**\n * Determines if two class name strings contain the same classes.\n *\n * @param a first class names\n * @param b second class names\n * @returns are they different\n */\nexport function changed(a: string, b: string): boolean {\n  return a != b && '' + a.split(' ').sort() != '' + b.split(' ').sort()\n}\n", "import type { BaseTheme, Twind } from './types'\n\nimport { changed } from './internal/changed'\nimport { tw as tw$ } from './runtime'\n\nexport interface TwindMutationObserver {\n  observe: (target: Node) => void\n  disconnect: () => void\n}\n\n/**\n * @group Runtime\n * @param tw\n * @param target\n * @returns\n * @internal\n */\nexport function mo<Theme extends BaseTheme = BaseTheme, Target = unknown>(\n  tw: Twind<Theme, Target>,\n): TwindMutationObserver {\n  const observer = new MutationObserver(handleMutationRecords)\n\n  return {\n    observe(target) {\n      observer.observe(target, {\n        attributeFilter: ['class'],\n        subtree: true,\n        childList: true,\n      })\n\n      // handle class attribute on target\n      handleClassAttributeChange(target as Element)\n\n      // handle children of target\n      handleMutationRecords([{ target, type: '' }])\n    },\n    disconnect() {\n      observer.disconnect()\n    },\n  }\n\n  function handleMutationRecords(records: MinimalMutationRecord[]): void {\n    for (const { type, target } of records) {\n      if (type[0] == 'a' /* attribute */) {\n        // class attribute has been changed\n        handleClassAttributeChange(target as Element)\n      } else {\n        /* childList */\n        // some nodes have been added — find all with a class attribute\n        for (const el of (target as Element).querySelectorAll('[class]')) {\n          handleClassAttributeChange(el)\n        }\n      }\n    }\n\n    // remove pending mutations — these are triggered by updating the class attributes\n    observer.takeRecords()\n    // XXX maybe we need to handle all pending mutations\n    // observer.takeRecords().forEach(handleMutation)\n  }\n\n  function handleClassAttributeChange(target: Element): void {\n    // Not using target.classList.value (not supported in all browsers) or target.class (this is an SVGAnimatedString for svg)\n    // safe guard access to getAttribute because ShadowRoot does not have attribute but child nodes\n    const tokens = target.getAttribute?.('class')\n\n    let className: string\n\n    // try do keep classNames unmodified\n    if (tokens && changed(tokens, (className = tw(tokens)))) {\n      // Not using `target.className = ...` as that is read-only for SVGElements\n      target.setAttribute('class', className)\n    }\n  }\n}\n\n/**\n * @group Runtime\n * @param tw\n * @param target\n * @returns\n */\nexport function observe<Theme extends BaseTheme = BaseTheme, Target = unknown>(\n  tw: Twind<Theme, Target> = tw$ as unknown as Twind<Theme, Target>,\n  target: false | Node = typeof document != 'undefined' && document.documentElement,\n): Twind<Theme, Target> {\n  if (target) {\n    const observer = mo(tw)\n\n    observer.observe(target)\n\n    // monkey patch tw.destroy to disconnect this observer\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { destroy } = tw\n    tw.destroy = () => {\n      observer.disconnect()\n      destroy.call(tw)\n    }\n  }\n\n  return tw\n}\n\n/**\n * Simplified MutationRecord which allows us to pass an\n * ArrayLike (compatible with Array and NodeList) `addedNodes` and\n * omit other properties we are not interested in.\n */\ninterface MinimalMutationRecord {\n  readonly type: string\n  readonly target: Node\n}\n", "import { warn } from './internal/warn'\nimport type { Sheet, SheetRule } from './types'\nimport { asArray, noop } from './utils'\n\nfunction getStyleElement(selector: string | null | undefined | false): HTMLStyleElement {\n  let style = document.querySelector(selector || 'style[data-twind=\"\"]')\n\n  if (!style || style.tagName != 'STYLE') {\n    style = document.createElement('style')\n    document.head.prepend(style)\n  }\n\n  ;(style as HTMLElement).dataset.twind = 'claimed'\n\n  return style as HTMLStyleElement\n}\n\n/**\n * @group Sheets\n * @param element\n * @returns\n */\nexport function cssom(\n  element?: CSSStyleSheet | HTMLStyleElement | string | null | false,\n): Sheet<CSSStyleSheet> {\n  const target = (element as CSSStyleSheet)?.cssRules\n    ? (element as CSSStyleSheet)\n    : ((element && typeof element != 'string'\n        ? (element as HTMLStyleElement)\n        : getStyleElement(element)\n      ).sheet as CSSStyleSheet)\n\n  return {\n    target,\n\n    snapshot() {\n      // collect current rules\n      const rules = Array.from(target.cssRules, (rule) => rule.cssText)\n\n      return () => {\n        // remove all existing rules\n        this.clear()\n\n        // add all snapshot rules back\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        rules.forEach(this.insert as (cssText: string, index: number) => void)\n      }\n    },\n\n    clear() {\n      // remove all added rules\n      for (let index = target.cssRules.length; index--; ) {\n        target.deleteRule(index)\n      }\n    },\n\n    destroy() {\n      target.ownerNode?.remove()\n    },\n\n    insert(cssText, index) {\n      try {\n        // Insert\n        target.insertRule(cssText, index)\n      } catch (error) {\n        // Empty rule to keep index valid — not using `*{}` as that would show up in all rules (DX)\n        target.insertRule(':root{}', index)\n\n        // Some thrown errors are because of specific pseudo classes\n        // lets filter them to prevent unnecessary warnings\n        // ::-moz-focus-inner\n        // :-moz-focusring\n        if (!/:-[mwo]/.test(cssText)) {\n          warn((error as Error).message, 'TWIND_INVALID_CSS', cssText)\n        }\n      }\n    },\n\n    resume: noop,\n  }\n}\n\n/**\n * @group Sheets\n * @param element\n * @returns\n */\nexport function dom(element?: HTMLStyleElement | string | null | false): Sheet<HTMLStyleElement> {\n  const target = element && typeof element != 'string' ? element : getStyleElement(element)\n\n  return {\n    target,\n\n    snapshot() {\n      // collect current rules\n      const rules = Array.from(target.childNodes, (node) => node.textContent as string)\n\n      return () => {\n        // remove all existing rules\n        this.clear()\n\n        // add all snapshot rules back\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        rules.forEach(this.insert as (cssText: string, index: number) => void)\n      }\n    },\n\n    clear() {\n      target.textContent = ''\n    },\n\n    destroy() {\n      target.remove()\n    },\n\n    insert(cssText, index) {\n      target.insertBefore(document.createTextNode(cssText), target.childNodes[index] || null)\n    },\n\n    resume: noop,\n  }\n}\n\n/**\n * @group Sheets\n * @param includeResumeData\n * @returns\n */\nexport function virtual(includeResumeData?: boolean): Sheet<string[]> {\n  const target: string[] = []\n\n  return {\n    target,\n\n    snapshot() {\n      // collect current rules\n      const rules = [...target]\n\n      return () => {\n        // remove all existing rules and add all snapshot rules back\n        target.splice(0, target.length, ...rules)\n      }\n    },\n\n    clear() {\n      target.length = 0\n    },\n\n    destroy() {\n      this.clear()\n    },\n\n    insert(css, index, rule) {\n      target.splice(\n        index,\n        0,\n        includeResumeData\n          ? `/*!${rule.p.toString(36)},${(rule.o * 2).toString(36)}${\n              rule.n ? ',' + rule.n : ''\n            }*/${css}`\n          : css,\n      )\n    },\n\n    resume: noop,\n  }\n}\n\n/**\n * Returns a sheet useable in the current environment.\n *\n * @group Sheets\n * @param useDOMSheet usually something like `process.env.NODE_ENV != 'production'` or `import.meta.env.DEV` (default: browser={@link cssom}, server={@link virtual})\n * @param disableResume to not include or use resume data\n * @returns a sheet to use\n */\nexport function getSheet(\n  useDOMSheet?: boolean,\n  disableResume?: boolean,\n): Sheet<string[] | HTMLStyleElement | CSSStyleSheet> {\n  const sheet =\n    typeof document == 'undefined' ? virtual(!disableResume) : useDOMSheet ? dom() : cssom()\n\n  if (!disableResume) sheet.resume = resume\n\n  return sheet\n}\n\n/**\n * @group Sheets\n * @param target\n * @returns\n */\nexport function stringify(target: unknown): string {\n  // string[] | CSSStyleSheet | HTMLStyleElement\n  return (\n    // prefer the raw text content of a CSSStyleSheet as it may include the resume data\n    ((target as CSSStyleSheet).ownerNode || (target as HTMLStyleElement)).textContent ||\n    ((target as CSSStyleSheet).cssRules\n      ? Array.from((target as CSSStyleSheet).cssRules, (rule) => rule.cssText)\n      : asArray(target)\n    ).join('')\n  )\n}\n\nfunction resume(\n  this: Sheet,\n  addClassName: (className: string) => void,\n  insert: (cssText: string, rule: SheetRule) => void,\n) {\n  // hydration from SSR sheet\n  const textContent = stringify(this.target)\n  const RE = /\\/\\*!([\\da-z]+),([\\da-z]+)(?:,(.+?))?\\*\\//g\n\n  // only if this is a hydratable sheet\n  if (RE.test(textContent)) {\n    // RE has global flag — reset index to get the first match as well\n    RE.lastIndex = 0\n\n    // 1. start with a fresh sheet\n    this.clear()\n\n    // 2. add all existing class attributes to the token/className cache\n    if (typeof document != 'undefined') {\n      for (const el of document.querySelectorAll('[class]')) {\n        addClassName(el.getAttribute('class') as string)\n      }\n    }\n\n    // 3. parse SSR styles\n    let lastMatch: RegExpExecArray | null | undefined\n\n    while (\n      (function commit(match?: RegExpExecArray | null) {\n        if (lastMatch) {\n          insert(\n            // grep the cssText from the previous match end up to this match start\n            textContent.slice(lastMatch.index + lastMatch[0].length, match?.index),\n            {\n              p: parseInt(lastMatch[1], 36),\n              o: parseInt(lastMatch[2], 36) / 2,\n              n: lastMatch[3],\n            },\n          )\n        }\n\n        return (lastMatch = match)\n      })(RE.exec(textContent))\n    ) {\n      /* no-op */\n    }\n  }\n}\n", "import type { CSSBase, CSSObject, CSSValue } from './types'\n\nimport { tw as tw$ } from './runtime'\nimport { astish } from './internal/astish'\nimport { css } from './css'\n\nexport interface InjectGlobalFunction {\n  (style: CSSBase | string): void\n\n  (strings: TemplateStringsArray, ...interpolations: readonly CSSValue[]): void\n\n  bind(thisArg?: ((tokens: string) => string) | undefined | void): InjectGlobalFunction\n\n  call(thisArg: ((tokens: string) => string) | undefined | void, style: CSSBase | string): void\n\n  apply(thisArg: ((tokens: string) => string) | undefined | void, args: [CSSBase | string]): void\n}\n\n/**\n * Injects styles into the global scope and is useful for applications such as gloabl styles, CSS resets or font faces.\n *\n * It **does not** return a class name, but adds the styles within the base layer to the stylesheet directly.\n *\n * @group Style Injectors\n */\nexport const injectGlobal: InjectGlobalFunction = function injectGlobal(\n  this: ((tokens: string) => string) | undefined | void,\n  strings: CSSBase | string | TemplateStringsArray,\n  ...interpolations: readonly CSSValue[]\n): void {\n  const tw = typeof this == 'function' ? this : tw$\n\n  tw(\n    css({\n      '@layer base': astish(strings as CSSObject, interpolations),\n    } as CSSObject),\n  )\n}\n", "import type { Twind, BaseTheme, TwindConfig, TwindUserConfig, Preset, ExtractThemes } from './types'\n\nimport { PROD } from 'distilt/env'\n\nimport { defineConfig } from './define-config'\nimport { setup } from './runtime'\nimport { getSheet } from './sheets'\n\n/**\n * @group Runtime\n * @param config\n * @param isProduction\n */\nexport function install<Theme extends BaseTheme = BaseTheme>(\n  config: TwindConfig<Theme>,\n  isProduction?: boolean,\n): Twind<Theme & BaseTheme>\n\nexport function install<Theme = BaseTheme, Presets extends Preset<any>[] = Preset[]>(\n  config: TwindUserConfig<Theme, Presets>,\n  isProduction?: boolean,\n): Twind<BaseTheme & ExtractThemes<Theme, Presets>>\n\nexport function install(config: TwindConfig | TwindUserConfig, isProduction = PROD): Twind {\n  const config$ = defineConfig(config as TwindUserConfig)\n\n  return setup(\n    {\n      ...config$,\n      // in production use short hashed class names\n      hash: config$.hash ?? isProduction,\n    },\n    () => getSheet(!isProduction),\n  )\n}\n", "import type { CSSObject, CSSValue, StringLike } from './types'\n\nimport { escape, hash } from './utils'\nimport { tw as tw$ } from './runtime'\nimport { astish } from './internal/astish'\nimport { css } from './css'\n\nexport interface KeyframesFunction {\n  (style: CSSObject | string): StringLike\n\n  (strings: TemplateStringsArray, ...interpolations: readonly CSSValue[]): StringLike\n\n  bind(thisArg?: ((tokens: string) => string) | undefined | void): Keyframes & {\n    [label: string]: KeyframesFunction\n  }\n\n  call(\n    thisArg: ((tokens: string) => string) | undefined | void,\n    style: CSSObject | string,\n  ): StringLike\n\n  call(\n    thisArg: ((tokens: string) => string) | undefined | void,\n    strings: TemplateStringsArray,\n    ...interpolations: readonly CSSValue[]\n  ): StringLike\n\n  apply(\n    thisArg: ((tokens: string) => string) | undefined | void,\n    args: [CSSObject | string],\n  ): StringLike\n\n  apply(\n    thisArg: ((tokens: string) => string) | undefined | void,\n    args:\n      | [CSSObject | string]\n      | [strings: TemplateStringsArray, ...interpolations: readonly CSSValue[]],\n  ): StringLike\n}\n\nexport type Keyframes = KeyframesFunction & {\n  [label: string]: KeyframesFunction\n}\n\n/**\n * **Note**: The styles will be injected on first use.\n *\n * @group Style Injectors\n */\nexport const keyframes = /* #__PURE__ */ bind()\n\nfunction bind(thisArg: ((tokens: string) => string) | undefined | void): Keyframes {\n  return new Proxy(\n    function keyframes(\n      strings: CSSObject | string | TemplateStringsArray,\n      ...interpolations: readonly CSSValue[]\n    ): StringLike {\n      return keyframes$(thisArg, '', strings, interpolations)\n    } as Keyframes,\n    {\n      get(target, name) {\n        if (name === 'bind') {\n          return bind\n        }\n\n        if (name in target) return target[name as string]\n\n        return function namedKeyframes(\n          strings: CSSObject | string | TemplateStringsArray,\n          ...interpolations: readonly CSSValue[]\n        ): StringLike {\n          return keyframes$(thisArg, name as string, strings, interpolations)\n        }\n      },\n    },\n  )\n}\n\nfunction keyframes$(\n  thisArg: ((tokens: string) => string) | undefined | void,\n  name: string,\n  strings: CSSObject | string | TemplateStringsArray,\n  interpolations: readonly CSSValue[],\n): StringLike {\n  // lazy inject keyframes\n  return {\n    toString() {\n      // lazy access tw\n      const tw = typeof thisArg == 'function' ? thisArg : tw$\n\n      const ast = astish(strings, interpolations)\n\n      const keyframeName = escape(name + hash(JSON.stringify([name, ast])))\n\n      tw(\n        css({\n          [`@keyframes ${keyframeName}`]: astish(strings, interpolations),\n        } as unknown as CSSObject),\n      )\n\n      return keyframeName\n    },\n  } as StringLike\n}\n", "import type { Twind } from './types'\nimport { changed } from './internal/changed'\nimport { tw as tw$ } from './runtime'\nimport { identity } from './utils'\nimport { stringify } from './sheets'\nimport { fixClassList, parseHTML } from './internal/parse-html'\n\n/**\n * Options for {@link inline}\n */\nexport interface InlineOptions {\n  /**\n   * {@link Twind} instance to use (default: {@link @twind/core.tw})\n   */\n  tw?: Twind<any, any>\n\n  /**\n   * Allows to minify the resulting CSS.\n   */\n  minify?: InlineMinify\n}\n\nexport interface InlineMinify {\n  /**\n   * Called to minify the CSS.\n   *\n   * @param css the CSS to minify\n   * @param html the HTML that will be used — allows to only include above-the-fold CSS\n   * @return the resulting CSS\n   */\n  (css: string, html: string): string\n}\n/**\n * Used for static HTML processing (usually to provide SSR support for your javascript-powered web apps)\n *\n * 1. parse the markup and process element classes with the provided Twind instance\n * 2. update the class attributes _if_ necessary\n * 3. inject a style element with the CSS as last element into the head\n * 4. return the HTML string with the final element classes\n *\n * ```js\n * import { inline } from '@twind/core'\n *\n * function render() {\n *   return inline(renderApp())\n * }\n * ```\n *\n * Minify CSS with [@parcel/css](https://www.npmjs.com/package/@parcel/css):\n *\n * ```js\n * import { inline } from '@twind/core'\n * import { transform } from '@parcel/css'\n *\n * function render() {\n *   return inline(renderApp(), { minify: (css) => transform({ filename: 'twind.css', code: Buffer.from(css), minify: true }) })\n * }\n * ```\n *\n * You can provide your own Twind instance:\n *\n * ```js\n * import { inline } from '@twind/core'\n * import { tw } from './custom/twind/instance'\n *\n * function render() {\n *   return inline(renderApp(), { tw })\n * }\n * ```\n *\n * @group Static Extraction\n * @param markup HTML to process\n * @param options to customize the processing\n * @returns the resulting HTML\n */\nexport function inline(markup: string, options: InlineOptions['tw'] | InlineOptions = {}): string {\n  const { tw = tw$, minify = identity } =\n    typeof options == 'function' ? ({ tw: options } as InlineOptions) : options\n\n  const { html, css } = extract(markup, tw)\n\n  // inject as last element into the head\n  return html.replace('</head>', `<style data-twind>${minify(css, html)}</style></head>`)\n}\n\n/**\n * Result of {@link extract}\n */\nexport interface ExtractResult {\n  /** The possibly modified HTML */\n  html: string\n\n  /** The generated CSS */\n  css: string\n}\n\n/**\n * Used for static HTML processing (usually to provide SSR support for your javascript-powered web apps)\n *\n * **Note**: Consider using {@link inline} instead.\n *\n * 1. parse the markup and process element classes with the provided Twind instance\n * 2. update the class attributes _if_ necessary\n * 3. return the HTML string with the final element classes\n *\n * ```js\n * import { extract } from '@twind/core'\n *\n * function render() {\n *   const { html, css } = extract(renderApp())\n *\n *   // inject as last element into the head\n *   return html.replace('</head>', `<style data-twind>${css}</style></head>`)\n * }\n * ```\n *\n * You can provide your own Twind instance:\n *\n * ```js\n * import { extract } from '@twind/core'\n * import { tw } from './custom/twind/instance'\n *\n * function render() {\n *   const { html, css } = extract(renderApp(), tw)\n *\n *   // inject as last element into the head\n *   return html.replace('</head>', `<style data-twind>${css}</style></head>`)\n * }\n * ```\n *\n * @group Static Extraction\n * @param markup HTML to process\n * @param tw a {@link Twind} instance (default: twind managed tw)\n * @returns the possibly modified html and css\n */\nexport function extract(html: string, tw: Twind<any, any> = tw$): ExtractResult {\n  const restore = tw.snapshot()\n\n  const result = { html: consume(html, tw), css: stringify(tw.target) }\n\n  restore()\n\n  return result\n}\n\n/**\n * Used for static HTML processing (usually to provide SSR support for your javascript-powered web apps)\n *\n * **Note**: Consider using {@link inline} or {@link extract} instead.\n *\n * 1. parse the markup and process element classes with the provided Twind instance\n * 2. update the class attributes _if_ necessary\n * 3. return the HTML string with the final element classes\n *\n * ```js\n * import { consume, stringify, tw } from '@twind/core'\n *\n * function render() {\n *   const html = renderApp()\n *\n *   // remember global classes\n *   const restore = tw.snapshot()\n *\n *   // generated markup\n *   const markup = consume(html)\n *\n *   // create CSS\n *   const css = stringify(tw.target)\n *\n *   // restore global classes\n *   restore()\n *\n *   // inject as last element into the head\n *   return markup.replace('</head>', `<style data-twind>${css}</style></head>`)\n * }\n * ```\n *\n * You can provide your own Twind instance:\n *\n * ```js\n * import { consume, stringify } from '@twind/core'\n * import { tw } from './custom/twind/instance'\n *\n * function render() {\n *   const html = renderApp()\n *\n *   // remember global classes\n *   const restore = snapshot(tw.target)\n *\n *   // generated markup\n *   const markup = consume(html)\n *\n *   // restore global classes\n *   restore()\n *\n *   // create CSS\n *   const css = stringify(tw.target)\n *\n *   // inject as last element into the head\n *   return markup.replace('</head>', `<style data-twind>${css}</style></head>`)\n * }\n * ```\n *\n * @group Static Extraction\n * @param markup HTML to process\n * @param tw a {@link Twind} instance\n * @returns possibly modified HTML\n */\nexport function consume(markup: string, tw: (className: string) => string = tw$): string {\n  let result = ''\n  let lastChunkStart = 0\n\n  parseHTML(markup, (startIndex, endIndex, quote) => {\n    const value = markup.slice(startIndex, endIndex)\n    const className = tw(fixClassList(value, quote))\n\n    // We only need to shift things around if we need to actually change the markup\n    if (changed(value, className)) {\n      // We've hit another mutation boundary\n\n      // Add quote if necessary\n      quote = quote ? '' : '\"'\n\n      result += markup.slice(lastChunkStart, startIndex) + quote + className + quote\n\n      lastChunkStart = endIndex\n    }\n  })\n\n  // Combine the current result with the tail-end of the input\n  return result + markup.slice(lastChunkStart, markup.length)\n}\n", "// For now we are using a simple parser adapted from htm (https://github.com/developit/htm/blob/master/src/build.mjs)\n// If we find any issues we can switch to something more sophisticated like\n// - https://github.com/acrazing/html5parser\n// - https://github.com/fb55/htmlparser2\n\nconst MODE_SLASH = 0\nconst MODE_TEXT = 1\nconst MODE_WHITESPACE = 2\nconst MODE_TAGNAME = 3\nconst MODE_COMMENT = 4\nconst MODE_ATTRIBUTE = 5\n\nexport function parseHTML(\n  markup: string,\n  onClass: (startIndex: number, endIndex: number, quote: string) => false | unknown,\n): void {\n  let mode = MODE_TEXT\n  let startIndex = 0\n  let quote = ''\n  let attributeName = ''\n\n  const commit = (currentIndex: number): void => {\n    if (mode == MODE_ATTRIBUTE && attributeName == 'class') {\n      if (onClass(startIndex, currentIndex, quote) === false) {\n        markup = ''\n      }\n    }\n  }\n\n  for (let position = 0; position < markup.length; position++) {\n    const char = markup[position]\n\n    if (mode == MODE_TEXT) {\n      if (char == '<') {\n        mode = markup.substr(position + 1, 3) == '!--' ? MODE_COMMENT : MODE_TAGNAME\n      }\n    } else if (mode == MODE_COMMENT) {\n      // Ignore everything until the last three characters are '-', '-' and '>'\n      if (char == '>' && markup.slice(position - 2, position) == '--') {\n        mode = MODE_TEXT\n      }\n    } else if (quote) {\n      if (char == quote && markup[position - 1] != '\\\\') {\n        commit(position)\n        mode = MODE_WHITESPACE\n        quote = ''\n      }\n    } else if (char == '\"' || char == \"'\") {\n      quote = char\n      startIndex += 1\n    } else if (char == '>') {\n      commit(position)\n      mode = MODE_TEXT\n    } else if (!mode) {\n      // MODE_SLASH\n      // Ignore everything until the tag ends\n    } else if (char == '=') {\n      attributeName = markup.slice(startIndex, position)\n      mode = MODE_ATTRIBUTE\n      startIndex = position + 1\n    } else if (char == '/' && (mode < MODE_ATTRIBUTE || markup[position + 1] == '>')) {\n      commit(position)\n      mode = MODE_SLASH\n    } else if (/\\s/.test(char)) {\n      // <a class=font-bold>\n      commit(position)\n      mode = MODE_WHITESPACE\n      startIndex = position + 1\n    }\n  }\n}\n\nexport function fixClassList(value: string, quote: string): string {\n  // const value = markup.slice(startIndex, endIndex)\n\n  // Lets handle some special react cases:\n  //   * arbitrary values for `content-`\n  //     <span class=\"before:content-[&#x27;asas&#x27;]\"></span>\n  //     <span class=\"before:content-[&quot;asas&quot;]\"></span>\n  //\n  //   * self-referenced groups\n  //     <span class=\"flex(&amp; col)\"></span>\n  //\n  //     If a class name contains `'`, `\"`, or `&` those will be replaced with HTML entities\n  //     To fix this we replace those for depending on the actual symbol that is being used\n  //     As an alternative we could always escape class names direcly in twind like react does\n  //     but this works for now\n  return (\n    quote == `\"`\n      ? // `'` -> &#39; &apos; &#x27;\n        value.replace(/(=|\\[)(?:&#39;|&apos;|&#x27;)|(?:&#39;|&apos;|&#x27;)(])/g, `$1'$2`)\n      : quote == `'`\n      ? // `\"` -> &#34; &quot; &#x22;\n        value.replace(/(=|\\[)(?:&#34;|&quot;|&#x22;)|(?:&#34;|&quot;|&#x22;)(])/g, `$1\"$2`)\n      : value\n  ).replace(/(&#38;|&amp;|&#x26;)/g, '&')\n}\n", "// Based on https://github.com/modulz/stitches\n// License MIT\n// eslint-disable @typescript-eslint/ban-types\n\nimport type { Falsey, MatchResult } from './types'\nimport { parse } from './parse'\nimport { Layer } from './internal/precedence'\n\nimport { escape, hash } from './utils'\nimport { define } from './internal/define'\n\nexport type StrictMorphVariant<T> = T extends number\n  ? `${T}` | T\n  : T extends 'true'\n  ? true | T\n  : T extends 'false'\n  ? false | T\n  : T\n\nexport type MorphVariant<T> = T extends number\n  ? `${T}` | T\n  : T extends 'true'\n  ? boolean | T\n  : T extends 'false'\n  ? boolean | T\n  : T extends `${number}`\n  ? number | T\n  : T\n\nexport type StyleTokenValue = string | Falsey\n\n// No support for thunks yet — these may use props that are not in the generated class name\n// and may therefore override each other\n\nexport type StyleToken = StyleTokenValue\n\n/**\n * Allows to extract the supported properties of a style function.\n *\n * Here is an example for `react`\n * ```js\n * import { HTMLAttributes } from \"react\";\n * import { style, PropsOf } from \"@twind/core\";\n * const button = style({ ... })\n * type ButtonProps = PropsOf<typeof button>\n * export const Button = (props: ButtonProps & HTMLAttributes<HTMLButtonElement>) => {\n *   return <button className={style(props)} {...rest} />\n * }\n * ```\n */\nexport type PropsOf<T> = T extends Style<infer Variants>\n  ? {\n      [key in keyof Variants]: MorphVariant<keyof Variants[key]>\n    }\n  : never\n\nexport type DefaultVariants<Variants> = {\n  [key in keyof Variants]?:\n    | StrictMorphVariant<keyof Variants[key]>\n    | (Record<string, StrictMorphVariant<keyof Variants[key]>> & {\n        /** initial breakpoint */\n        _?: StrictMorphVariant<keyof Variants[key]>\n      })\n}\n\nexport type VariantsProps<Variants> = {\n  [key in keyof Variants]?:\n    | MorphVariant<keyof Variants[key]>\n    // TODO possible breakpoint from theme\n    | (Record<string, MorphVariant<keyof Variants[key]>> & {\n        /** initial breakpoint */\n        _?: MorphVariant<keyof Variants[key]>\n      })\n}\n\nexport type When<Variants> = {\n  [key in keyof Variants]?: StrictMorphVariant<keyof Variants[key]>\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport interface StyleConfig<Variants, BaseVariants = {}> {\n  /** Used as prefix */\n  label?: string\n  base?: StyleToken\n  props?: Variants & {\n    [variant in keyof BaseVariants]?: {\n      [key in keyof BaseVariants[variant]]?: StyleToken\n    }\n  }\n  defaults?: DefaultVariants<Variants & BaseVariants>\n  when?: [match: When<Variants & BaseVariants>, then: StyleToken][]\n}\n\nexport interface StyleFunction {\n  <Variants>(config?: StyleConfig<Variants>): Style<Variants>\n  <Variants, BaseVariants>(\n    base: Style<BaseVariants>,\n    config?: StyleConfig<Variants, BaseVariants>,\n  ): Style<Variants & BaseVariants>\n}\n\nexport type StyleProps<Variants> = VariantsProps<Variants>\n\nexport interface Style<Variants> {\n  /**\n   * CSS Class associated with the current component.\n   *\n   * ```jsx\n   * const button = style({\n   *   base: css({\n   *     color: \"DarkSlateGray\"\n   *   })\n   * })\n   *\n   * <div className={button()} />\n   * ```\n   * <br />\n   */\n  (props?: StyleProps<Variants>): string\n\n  /**\n   * To be used as resolve within config.rules:\n   *\n   * ```js\n   * {\n   *   rules: [\n   *     // label?prop=value&other=propValue\n   *     // if the style has base eg no prop is required\n   *     ['label(\\\\?.+)?', style( /* ... *\\/ )],\n   *\n   *     // if the style requires at least one prop\n   *     ['label\\\\?(.+)', style( /* ... *\\/ )],\n   *   ]\n   * }\n   * ```\n   *\n   * The first group is used to extract the props using {@link !URLSearchParams | URLSearchParams}.\n   */\n  (match: MatchResult): string\n\n  readonly defaults: StyleProps<Variants>\n\n  /**\n   * CSS Class associated with the current component.\n   *\n   * ```js\n   * const button = style({\n   *   base: css`\n   *     color: \"DarkSlateGray\"\n   *   `\n   * })\n   *\n   * <div className={button.className} />\n   * ```\n   */\n  readonly className: string\n\n  /**\n   * CSS Selector associated with the current component.\n   *\n   * ```js\n   * const button = style({\n   *   base: css({\n   *     color: \"DarkSlateGray\"\n   *   })\n   * })\n   *\n   * const Card = styled({\n   *   base: css`\n   *     & ${button.selector} {\n   *       boxShadow: \"0 0 0 5px\"\n   *     }\n   *   `\n   * })\n   * ```\n   */\n  readonly selector: string\n}\n\n/**\n * @group Class Name Generators\n */\nexport const style = (<Variants, BaseVariants>(\n  base: Style<BaseVariants> | StyleConfig<Variants>,\n  config?: StyleConfig<Variants, BaseVariants>,\n): Style<Variants & BaseVariants> =>\n  (typeof base == 'function' ? createStyle(config, base) : createStyle(base)) as Style<\n    Variants & BaseVariants\n  > &\n    string) as StyleFunction\n\nfunction createStyle<Variants, BaseVariants>(\n  config: StyleConfig<Variants, BaseVariants> = {},\n  parent?: Style<BaseVariants>,\n): Style<Variants & BaseVariants> {\n  const { label = 'style', base, props: variants = {}, defaults: localDefaults, when = [] } = config\n\n  const defaults = { ...parent?.defaults, ...localDefaults }\n\n  const id = hash(JSON.stringify([label, parent?.className, base, variants, defaults, when]))\n\n  // Layers:\n  // component: 0b010\n  // props: 0b011\n  // when: 0b100\n\n  const className = register('', base || '', Layer.c)\n\n  function register(mq: string, token: string, layer: number): string {\n    return define(\n      // `<name>#<id>` or `<parent>~<name>#<id>`\n      ((parent ? parent.className.replace(/#.+$/, '~') : '') + label + mq + id).replace(\n        /[: ,()[\\]]/,\n        '',\n      ),\n      layer,\n      token && parse(token),\n    )\n  }\n\n  return Object.defineProperties(\n    function style(allProps) {\n      let isWithinRuleDeclaration\n\n      if (Array.isArray(allProps)) {\n        isWithinRuleDeclaration = true\n        allProps = Object.fromEntries(new URLSearchParams(allProps[1]).entries()) as VariantsProps<\n          Variants & BaseVariants\n        >\n      }\n\n      const props = { ...defaults, ...allProps }\n\n      // If this style is used within config.rules we do NOT include the marker classes\n      let classNames = isWithinRuleDeclaration\n        ? ''\n        : (parent ? parent(props) + ' ' : '') + className\n\n      let token: StyleToken\n\n      for (const variantKey in variants) {\n        const variant = (variants as Record<string, Record<string, StyleToken>>)[variantKey]\n        const propsValue = (props as Record<string, unknown>)[variantKey]\n\n        if (propsValue === Object(propsValue)) {\n          // inline responsive breakpoints\n          let mq = ''\n          token = ''\n\n          for (const breakpoint in propsValue as Record<string, string>) {\n            const breakpointToken = variant[(propsValue as Record<string, string>)[breakpoint]]\n\n            if (breakpointToken) {\n              mq += '@' + breakpoint + '-' + (propsValue as Record<string, string>)[breakpoint]\n\n              token +=\n                (token && ' ') +\n                (breakpoint == '_' ? breakpointToken : breakpoint + ':(' + breakpointToken + ')')\n            }\n          }\n\n          if (token) {\n            classNames +=\n              ' ' + register('--' + variantKey + '-' + mq, token, 0b011 << 27 /* Shifts.layer */)\n          }\n        } else if ((token = variant[propsValue as string])) {\n          classNames +=\n            ' ' +\n            register(\n              '--' + variantKey + '-' + (propsValue as string),\n              token,\n              0b011 << 27 /* Shifts.layer */,\n            )\n        }\n      }\n\n      when.forEach((match, index) => {\n        let mq = ''\n\n        for (const variantKey in match[0]) {\n          const propsValue = (props as Record<string, unknown>)[variantKey]\n\n          // TODO we ignore inline responsive breakpoints for now — what be the result??\n          if (\n            propsValue !== Object(propsValue) &&\n            '' + propsValue == '' + (match[0] as Record<string, string>)[variantKey]\n          ) {\n            mq += (mq && '_') + variantKey + '-' + (propsValue as string)\n          } else {\n            mq = ''\n            break\n          }\n        }\n\n        if (mq && (token = match[1])) {\n          classNames +=\n            ' ' + register('-' + index + '--' + mq, token, 0b100 << 27 /* Shifts.layer */)\n        }\n      })\n\n      return classNames\n    } as Style<Variants & BaseVariants>,\n    Object.getOwnPropertyDescriptors({\n      className,\n      defaults,\n      selector: '.' + escape(className),\n    }),\n  )\n}\n", "import type { Class } from './types'\nimport { interpolate } from './internal/interpolate'\nimport { tw as tw$ } from './runtime'\n\nexport interface TxFunction {\n  (...classes: Class[]): string\n\n  (strings: TemplateStringsArray, ...interpolations: readonly Class[]): string\n\n  bind(thisArg?: ((tokens: string) => string) | undefined | void): TxFunction\n\n  call(thisArg: ((tokens: string) => string) | undefined | void, ...classes: Class[]): string\n  call(\n    thisArg: ((tokens: string) => string) | undefined | void,\n    strings: TemplateStringsArray,\n    ...interpolations: readonly Class[]\n  ): string\n\n  apply(\n    thisArg: ((tokens: string) => string) | undefined | void,\n    classes: Class[] | [strings: TemplateStringsArray, ...interpolations: readonly Class[]],\n  ): string\n}\n\n/**\n * Combines {@link tw} and {@link cx}.\n *\n * Using the default `tw` instance:\n *\n * ```js\n * import { tw } from '@twind/core'\n * tx`underline ${falsy && 'italic'}`\n * tx('underline', falsy && 'italic')\n * tx({'underline': true, 'italic': false})\n *\n * // using a custom twind instance\n * import { tw } from './custom/twind'\n * import { tw } from './custom/twind'\n * tx.bind(tw)\n * ```\n *\n * Using a custom `tw` instance:\n *\n * ```js\n * import { tx as tx$ } from '@twind/core'\n * import { tw } from './custom/twind'\n *\n * export const tx = tx$.bind(tw)\n *\n * tx`underline ${falsy && 'italic'}`\n * tx('underline', falsy && 'italic')\n * tx({'underline': true, 'italic': false})\n * ```\n *\n * @group Style Injectors\n * @param this {@link Twind} instance to use (default: {@link tw})\n * @param strings\n * @param interpolations\n * @returns the class name\n */\nexport const tx: TxFunction = function tx(\n  this: ((tokens: string) => string) | undefined | void,\n  strings: TemplateStringsArray | Class,\n  ...interpolations: Class[]\n): string {\n  const tw = typeof this == 'function' ? this : tw$\n  return tw(interpolate(strings, interpolations))\n}\n", "/**\n * @module @twind/preset-tailwind/rules\n */\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\nimport type {\n  MatchResult,\n  Rule,\n  MaybeArray,\n  CSSProperties,\n  CSSObject,\n  CSSBase,\n  ThemeMatchResult,\n  ThemeRuleResolver,\n  ColorFromThemeValue,\n  AutocompleteProvider,\n} from '@twind/core'\n\nimport { DEV } from 'distilt/env'\n\nimport {\n  mql,\n  match,\n  matchTheme,\n  matchColor,\n  toColorValue,\n  toCSS,\n  asArray,\n  arbitrary,\n  withAutocomplete,\n} from '@twind/core'\n\nimport type { TailwindTheme } from './types'\n\n// indirection wrapper to remove autocomplete functions from production bundles\nfunction withAutocomplete$(\n  rule: Rule<TailwindTheme>,\n  autocomplete: AutocompleteProvider<TailwindTheme> | false,\n): Rule<TailwindTheme> {\n  if (DEV) {\n    return withAutocomplete(rule, autocomplete)\n  }\n\n  return rule\n}\n\nconst rules: Rule<TailwindTheme>[] = [\n  /* arbitrary properties: [paint-order:markers] */\n  match('\\\\[([-\\\\w]+):(.+)]', ({ 1: $1, 2: $2 }, context) => ({\n    '@layer overrides': {\n      '&': {\n        [$1]: arbitrary(`[${$2}]`, '', context),\n      },\n    },\n  })),\n\n  /* Styling based on parent and peer state */\n  withAutocomplete$(\n    match('(group|peer)([~/][^-[]+)?', ({ input }, { h }) => [{ c: h(input) }]),\n    DEV && (() => ['group', 'peer']),\n  ),\n\n  /* LAYOUT */\n  matchTheme('aspect-', 'aspectRatio'),\n\n  match('container', (_, { theme }) => {\n    const { screens = theme('screens'), center, padding } = theme('container')\n\n    const rules = {\n      width: '100%',\n      marginRight: center && 'auto',\n      marginLeft: center && 'auto',\n      ...paddingFor('xs'),\n    } as CSSObject\n\n    for (const screen in screens) {\n      const value = screens[screen]\n\n      if (typeof value == 'string') {\n        rules[mql(value)] = {\n          '&': {\n            maxWidth: value,\n            ...paddingFor(screen),\n          },\n        }\n      }\n    }\n\n    return rules\n\n    function paddingFor(screen: string): CSSProperties | undefined {\n      const value =\n        padding && (typeof padding == 'string' ? padding : padding[screen] || padding.DEFAULT)\n\n      if (value) {\n        return {\n          paddingRight: value,\n          paddingLeft: value,\n        }\n      }\n    }\n  }),\n\n  // Content\n  matchTheme('content-', 'content', ({ _ }) => ({\n    '--tw-content': _,\n    content: 'var(--tw-content)',\n  })),\n\n  // Box Decoration Break\n  match('(?:box-)?decoration-(slice|clone)', 'boxDecorationBreak'),\n\n  // Box Sizing\n  match('box-(border|content)', 'boxSizing', ({ 1: $1 }) => $1 + '-box'),\n\n  // Display\n  match('hidden', { display: 'none' }),\n\n  // Table Layout\n  match('table-(auto|fixed)', 'tableLayout'),\n\n  match(\n    [\n      '(block|flex|table|grid|inline|contents|flow-root|list-item)',\n      '(inline-(block|flex|table|grid))',\n      '(table-(caption|cell|column|row|(column|row|footer|header)-group))',\n    ],\n    'display',\n  ),\n\n  // Floats\n  '(float)-(left|right|none)',\n\n  // Clear\n  '(clear)-(left|right|none|both)',\n\n  // Overflow\n  '(overflow(?:-[xy])?)-(auto|hidden|clip|visible|scroll)',\n\n  // Isolation\n  '(isolation)-(auto)',\n\n  // Isolation\n  match('isolate', 'isolation'),\n\n  // Object Fit\n  match('object-(contain|cover|fill|none|scale-down)', 'objectFit'),\n\n  // Object Position\n  matchTheme('object-', 'objectPosition'),\n  match('object-(top|bottom|center|(left|right)(-(top|bottom))?)', 'objectPosition', spacify),\n\n  // Overscroll Behavior\n  match('overscroll(-[xy])?-(auto|contain|none)', ({ 1: $1 = '', 2: $2 }) => ({\n    [('overscroll-behavior' + $1) as 'overscroll-behavior-x']: $2 as 'auto',\n  })),\n\n  // Position\n  match('(static|fixed|absolute|relative|sticky)', 'position'),\n\n  // Top / Right / Bottom / Left\n  matchTheme('-?inset(-[xy])?(?:$|-)', 'inset', ({ 1: $1, _ }) => ({\n    top: $1 != '-x' && _,\n    right: $1 != '-y' && _,\n    bottom: $1 != '-x' && _,\n    left: $1 != '-y' && _,\n  })),\n\n  matchTheme('-?(top|bottom|left|right)(?:$|-)', 'inset'),\n\n  // Visibility\n  match('(visible|collapse)', 'visibility'),\n  match('invisible', { visibility: 'hidden' }),\n\n  // Z-Index\n  matchTheme('-?z-', 'zIndex'),\n\n  /* FLEXBOX */\n  // Flex Direction\n  match('flex-((row|col)(-reverse)?)', 'flexDirection', columnify),\n\n  match('flex-(wrap|wrap-reverse|nowrap)', 'flexWrap'),\n  matchTheme('(flex-(?:grow|shrink))(?:$|-)' /*, 'flex-grow' | flex-shrink */),\n  matchTheme('(flex)-' /*, 'flex' */),\n  matchTheme('grow(?:$|-)', 'flexGrow'),\n  matchTheme('shrink(?:$|-)', 'flexShrink'),\n  matchTheme('basis-', 'flexBasis'),\n\n  matchTheme('-?(order)-' /*, 'order' */),\n  withAutocomplete$('-?(order)-(\\\\d+)', DEV && (() => range({ end: 12 }))),\n\n  /* GRID */\n  // Grid Template Columns\n  matchTheme('grid-cols-', 'gridTemplateColumns'),\n  withAutocomplete$(\n    match('grid-cols-(\\\\d+)', 'gridTemplateColumns', gridTemplate),\n    DEV && (() => range({ end: 6 })),\n  ),\n\n  // Grid Column Start / End\n  matchTheme('col-', 'gridColumn'),\n  withAutocomplete$(\n    match('col-(span)-(\\\\d+)', 'gridColumn', span),\n    DEV && (() => range({ end: 12 })),\n  ),\n\n  matchTheme('col-start-', 'gridColumnStart'),\n  withAutocomplete$(\n    match('col-start-(auto|\\\\d+)', 'gridColumnStart'),\n    DEV && (({ 1: $1 }) => ($1 === 'auto' ? [''] : range({ end: 13 }))),\n  ),\n\n  matchTheme('col-end-', 'gridColumnEnd'),\n  withAutocomplete$(\n    match('col-end-(auto|\\\\d+)', 'gridColumnEnd'),\n    DEV && (({ 1: $1 }) => ($1 === 'auto' ? [''] : range({ end: 13 }))),\n  ),\n\n  // Grid Template Rows\n  matchTheme('grid-rows-', 'gridTemplateRows'),\n  withAutocomplete$(\n    match('grid-rows-(\\\\d+)', 'gridTemplateRows', gridTemplate),\n    DEV && (() => range({ end: 6 })),\n  ),\n\n  // Grid Row Start / End\n  matchTheme('row-', 'gridRow'),\n  withAutocomplete$(match('row-(span)-(\\\\d+)', 'gridRow', span), DEV && (() => range({ end: 6 }))),\n\n  matchTheme('row-start-', 'gridRowStart'),\n  withAutocomplete$(\n    match('row-start-(auto|\\\\d+)', 'gridRowStart'),\n    DEV && (({ 1: $1 }) => ($1 === 'auto' ? [''] : range({ end: 7 }))),\n  ),\n\n  matchTheme('row-end-', 'gridRowEnd'),\n  withAutocomplete$(\n    match('row-end-(auto|\\\\d+)', 'gridRowEnd'),\n    DEV && (({ 1: $1 }) => ($1 === 'auto' ? [''] : range({ end: 7 }))),\n  ),\n\n  // Grid Auto Flow\n  match('grid-flow-((row|col)(-dense)?)', 'gridAutoFlow', (match) => spacify(columnify(match))),\n  match('grid-flow-(dense)', 'gridAutoFlow'),\n\n  // Grid Auto Columns\n  matchTheme('auto-cols-', 'gridAutoColumns'),\n\n  // Grid Auto Rows\n  matchTheme('auto-rows-', 'gridAutoRows'),\n\n  // Gap\n  matchTheme('gap-x(?:$|-)', 'gap', 'columnGap'),\n  matchTheme('gap-y(?:$|-)', 'gap', 'rowGap'),\n  matchTheme('gap(?:$|-)', 'gap'),\n\n  /* BOX ALIGNMENT */\n  // Justify Items\n  // Justify Self\n  withAutocomplete$(\n    '(justify-(?:items|self))-',\n    DEV &&\n      (({ 1: $1 }) =>\n        $1.endsWith('-items-')\n          ? ['start', 'end', 'center', 'stretch']\n          : /* '-self-' */ ['auto', 'start', 'end', 'center', 'stretch']),\n  ),\n\n  // Justify Content\n  withAutocomplete$(\n    match('justify-', 'justifyContent', convertContentValue),\n    DEV && (() => ['start', 'end', 'center', 'between', 'around', 'evenly']),\n  ),\n\n  // Align Content\n  // Align Items\n  // Align Self\n  withAutocomplete$(\n    match('(content|items|self)-', (match) => ({\n      [('align-' + match[1]) as 'align-content']: convertContentValue(match),\n    })),\n    DEV &&\n      (({ 1: $1 }) =>\n        $1 == 'content'\n          ? ['center', 'start', 'end', 'between', 'around', 'evenly', 'stretch', 'baseline']\n          : $1 == 'items'\n          ? ['start', 'end', 'center', 'stretch', 'baseline']\n          : /* $1 == 'self' */ ['auto', 'start', 'end', 'center', 'stretch', 'baseline']),\n  ),\n\n  // Place Content\n  // Place Items\n  // Place Self\n  withAutocomplete$(\n    match('(place-(content|items|self))-', ({ 1: $1, $$ }) => ({\n      [$1 as 'place-content']: ('wun'.includes($$[3]) ? 'space-' : '') + $$,\n    })),\n    DEV &&\n      (({ 2: $2 }) =>\n        $2 == 'content'\n          ? ['center', 'start', 'end', 'between', 'around', 'evenly', 'stretch', 'baseline']\n          : $2 == 'items'\n          ? ['start', 'end', 'center', 'stretch', 'baseline']\n          : /* $2 == 'self' */ ['auto', 'start', 'end', 'center', 'stretch', 'baseline']),\n  ),\n\n  /* SPACING */\n  // Padding\n  matchTheme('p([xytrbl])?(?:$|-)', 'padding', edge('padding')),\n\n  // Margin\n  matchTheme('-?m([xytrbl])?(?:$|-)', 'margin', edge('margin')),\n\n  // Space Between\n  matchTheme('-?space-(x|y)(?:$|-)', 'space', ({ 1: $1, _ }) => ({\n    '&>:not([hidden])~:not([hidden])': {\n      [`--tw-space-${$1}-reverse`]: '0',\n      ['margin-' +\n      { y: 'top', x: 'left' }[\n        $1 as 'y' | 'x'\n      ]]: `calc(${_} * calc(1 - var(--tw-space-${$1}-reverse)))`,\n      ['margin-' +\n      { y: 'bottom', x: 'right' }[$1 as 'y' | 'x']]: `calc(${_} * var(--tw-space-${$1}-reverse))`,\n    },\n  })),\n\n  match('space-(x|y)-reverse', ({ 1: $1 }) => ({\n    '&>:not([hidden])~:not([hidden])': {\n      [`--tw-space-${$1}-reverse`]: '1',\n    },\n  })),\n\n  /* SIZING */\n  // Width\n  matchTheme('w-', 'width'),\n\n  // Min-Width\n  matchTheme('min-w-', 'minWidth'),\n\n  // Max-Width\n  matchTheme('max-w-', 'maxWidth'),\n\n  // Height\n  matchTheme('h-', 'height'),\n\n  // Min-Height\n  matchTheme('min-h-', 'minHeight'),\n\n  // Max-Height\n  matchTheme('max-h-', 'maxHeight'),\n\n  /* TYPOGRAPHY */\n  // Font Weight\n  matchTheme('font-', 'fontWeight'),\n\n  // Font Family\n  matchTheme('font-', 'fontFamily', ({ _ }) => {\n    _ = asArray(_)\n\n    if (typeof _[1] == 'string') {\n      return { fontFamily: join(_ as MaybeArray<string>) }\n    }\n\n    return {\n      fontFamily: join(_[0]),\n      ...(_[1] as { fontFeatureSettings?: string }),\n    }\n  }),\n\n  // Font Smoothing\n  match('antialiased', {\n    WebkitFontSmoothing: 'antialiased',\n    MozOsxFontSmoothing: 'grayscale',\n  }),\n\n  match('subpixel-antialiased', {\n    WebkitFontSmoothing: 'auto',\n    MozOsxFontSmoothing: 'auto',\n  }),\n\n  // Font Style\n  match('italic', 'fontStyle'),\n  match('not-italic', { fontStyle: 'normal' }),\n\n  // Font Variant Numeric\n  match(\n    '(ordinal|slashed-zero|(normal|lining|oldstyle|proportional|tabular)-nums|(diagonal|stacked)-fractions)',\n    ({ 1: $1, 2: $2 = '', 3: $3 }) =>\n      // normal-nums\n      $2 == 'normal'\n        ? { fontVariantNumeric: 'normal' }\n        : {\n            [('--tw-' +\n              ($3 // diagonal-fractions, stacked-fractions\n                ? 'numeric-fraction'\n                : 'pt'.includes($2[0]) // proportional-nums, tabular-nums\n                ? 'numeric-spacing'\n                : $2 // lining-nums, oldstyle-nums\n                ? 'numeric-figure'\n                : // ordinal, slashed-zero\n                  $1)) as 'numeric-spacing']: $1,\n            fontVariantNumeric:\n              'var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction)',\n            ...asDefaults({\n              '--tw-ordinal': 'var(--tw-empty,/*!*/ /*!*/)',\n              '--tw-slashed-zero': 'var(--tw-empty,/*!*/ /*!*/)',\n              '--tw-numeric-figure': 'var(--tw-empty,/*!*/ /*!*/)',\n              '--tw-numeric-spacing': 'var(--tw-empty,/*!*/ /*!*/)',\n              '--tw-numeric-fraction': 'var(--tw-empty,/*!*/ /*!*/)',\n            }),\n          },\n  ),\n\n  // Letter Spacing\n  matchTheme('tracking-', 'letterSpacing'),\n\n  // Line Height\n  matchTheme('leading-', 'lineHeight'),\n\n  // List Style Position\n  match('list-(inside|outside)', 'listStylePosition'),\n\n  // List Style Type\n  matchTheme('list-', 'listStyleType'),\n  withAutocomplete$(match('list-', 'listStyleType'), DEV && (() => ['none', 'disc', 'decimal'])),\n\n  // Placeholder Opacity\n  matchTheme('placeholder-opacity-', 'placeholderOpacity', ({ _ }) => ({\n    ['&::placeholder']: { '--tw-placeholder-opacity': _ },\n  })),\n\n  // Placeholder Color\n  matchColor('placeholder-', { property: 'color', selector: '&::placeholder' }),\n\n  // Text Alignment\n  match('text-(left|center|right|justify|start|end)', 'textAlign'),\n\n  match('text-(ellipsis|clip)', 'textOverflow'),\n\n  // Text Opacity\n  matchTheme('text-opacity-', 'textOpacity', '--tw-text-opacity'),\n\n  // Text Color\n  matchColor('text-', { property: 'color' }),\n\n  // Font Size\n  matchTheme('text-', 'fontSize', ({ _ }) =>\n    typeof _ == 'string'\n      ? { fontSize: _ }\n      : {\n          fontSize: _[0],\n          ...(typeof _[1] == 'string' ? { lineHeight: _[1] } : _[1]),\n        },\n  ),\n\n  // Text Indent\n  matchTheme('indent-', 'textIndent'),\n\n  // Text Decoration\n  match('(overline|underline|line-through)', 'textDecorationLine'),\n  match('no-underline', { textDecorationLine: 'none' }),\n\n  // Text Underline offset\n  matchTheme('underline-offset-', 'textUnderlineOffset'),\n\n  // Text Decoration Color\n  matchColor('decoration-', {\n    section: 'textDecorationColor',\n    opacityVariable: false,\n    opacitySection: 'opacity',\n  }),\n\n  // Text Decoration Thickness\n  matchTheme('decoration-', 'textDecorationThickness'),\n\n  // Text Decoration Style\n  withAutocomplete$(\n    match('decoration-', 'textDecorationStyle'),\n    DEV && (() => ['solid', 'double', 'dotted', 'dashed', 'wavy']),\n  ),\n\n  // Text Transform\n  match('(uppercase|lowercase|capitalize)', 'textTransform'),\n  match('normal-case', { textTransform: 'none' }),\n\n  // Text Overflow\n  match('truncate', {\n    overflow: 'hidden',\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis',\n  }),\n\n  // Vertical Alignment\n  withAutocomplete$(\n    match('align-', 'verticalAlign'),\n    DEV &&\n      (() => ['baseline', 'top', 'middle', 'bottom', 'text-top', 'text-bottom', 'sub', 'super']),\n  ),\n\n  // Whitespace\n  withAutocomplete$(\n    match('whitespace-', 'whiteSpace'),\n    DEV && (() => ['normal', 'nowrap', 'pre', 'pre-line', 'pre-wrap']),\n  ),\n\n  // Word Break\n  match('break-normal', { wordBreak: 'normal', overflowWrap: 'normal' }),\n  match('break-words', { overflowWrap: 'break-word' }),\n  match('break-all', { wordBreak: 'break-all' }),\n  match('break-keep', { wordBreak: 'keep-all' }),\n\n  // Caret Color\n  matchColor('caret-', {\n    // section: 'caretColor',\n    opacityVariable: false,\n    opacitySection: 'opacity',\n  }),\n\n  // Accent Color\n  matchColor('accent-', {\n    // section: 'accentColor',\n    opacityVariable: false,\n    opacitySection: 'opacity',\n  }),\n\n  // Gradient Color Stops\n  match(\n    'bg-gradient-to-([trbl]|[tb][rl])',\n    'backgroundImage',\n    ({ 1: $1 }) => `linear-gradient(to ${position($1, ' ')},var(--tw-gradient-stops))`,\n  ),\n\n  matchColor(\n    'from-',\n    {\n      section: 'gradientColorStops',\n      opacityVariable: false,\n      opacitySection: 'opacity',\n    },\n    ({ _ }) => ({\n      '--tw-gradient-from': _.value,\n      '--tw-gradient-to': _.color({ opacityValue: '0' }),\n      '--tw-gradient-stops': `var(--tw-gradient-from),var(--tw-gradient-to)`,\n    }),\n  ),\n  matchColor(\n    'via-',\n\n    {\n      section: 'gradientColorStops',\n      opacityVariable: false,\n      opacitySection: 'opacity',\n    },\n    ({ _ }) => ({\n      '--tw-gradient-to': _.color({ opacityValue: '0' }),\n      '--tw-gradient-stops': `var(--tw-gradient-from),${_.value},var(--tw-gradient-to)`,\n    }),\n  ),\n  matchColor('to-', {\n    section: 'gradientColorStops',\n    property: '--tw-gradient-to',\n    opacityVariable: false,\n    opacitySection: 'opacity',\n  }),\n\n  /* BACKGROUNDS */\n  // Background Attachment\n  match('bg-(fixed|local|scroll)', 'backgroundAttachment'),\n\n  // Background Origin\n  match('bg-origin-(border|padding|content)', 'backgroundOrigin', ({ 1: $1 }) => $1 + '-box'),\n\n  // Background Repeat\n  match(['bg-(no-repeat|repeat(-[xy])?)', 'bg-repeat-(round|space)'], 'backgroundRepeat'),\n\n  // Background Blend Mode\n  withAutocomplete$(\n    match('bg-blend-', 'backgroundBlendMode'),\n    DEV &&\n      (() => [\n        'normal',\n        'multiply',\n        'screen',\n        'overlay',\n        'darken',\n        'lighten',\n        'color-dodge',\n        'color-burn',\n        'hard-light',\n        'soft-light',\n        'difference',\n        'exclusion',\n        'hue',\n        'saturation',\n        'color',\n        'luminosity',\n      ]),\n  ),\n\n  // Background Clip\n  match(\n    'bg-clip-(border|padding|content|text)',\n    'backgroundClip',\n    ({ 1: $1 }) => $1 + ($1 == 'text' ? '' : '-box'),\n  ),\n\n  // Background Opacity\n  matchTheme('bg-opacity-', 'backgroundOpacity', '--tw-bg-opacity'),\n\n  // Background Color\n  // bg-${backgroundColor}/${backgroundOpacity}\n  matchColor('bg-', { section: 'backgroundColor' }),\n\n  // Background Image\n  // supported arbitrary types are: length, color, angle, list\n  matchTheme('bg-', 'backgroundImage'),\n\n  // Background Position\n  matchTheme('bg-', 'backgroundPosition'),\n  match('bg-(top|bottom|center|(left|right)(-(top|bottom))?)', 'backgroundPosition', spacify),\n\n  // Background Size\n  matchTheme('bg-', 'backgroundSize'),\n\n  /* BORDERS */\n  // Border Radius\n  matchTheme('rounded(?:$|-)', 'borderRadius'),\n  matchTheme('rounded-([trbl]|[tb][rl])(?:$|-)', 'borderRadius', ({ 1: $1, _ }) => {\n    const corners = (\n      {\n        t: ['tl', 'tr'],\n        r: ['tr', 'br'],\n        b: ['bl', 'br'],\n        l: ['bl', 'tl'],\n      } as const\n    )[$1] || [$1, $1]\n\n    return {\n      [`border-${position(corners[0])}-radius` as 'border-top-left-radius']: _,\n      [`border-${position(corners[1])}-radius` as 'border-top-right-radius']: _,\n    }\n  }),\n\n  // Border Collapse\n  match('border-(collapse|separate)', 'borderCollapse'),\n\n  // Border Opacity\n  matchTheme('border-opacity(?:$|-)', 'borderOpacity', '--tw-border-opacity'),\n\n  // Border Style\n  match('border-(solid|dashed|dotted|double|none)', 'borderStyle'),\n\n  // Border Spacing\n  matchTheme('border-spacing(-[xy])?(?:$|-)', 'borderSpacing', ({ 1: $1, _ }) => ({\n    ...asDefaults({\n      '--tw-border-spacing-x': '0',\n      '--tw-border-spacing-y': '0',\n    }),\n    [('--tw-border-spacing' + ($1 || '-x')) as '--tw-border-spacing-x']: _,\n    [('--tw-border-spacing' + ($1 || '-y')) as '--tw-border-spacing-y']: _,\n    'border-spacing': 'var(--tw-border-spacing-x) var(--tw-border-spacing-y)',\n  })),\n\n  // Border Color\n  matchColor('border-([xytrbl])-', { section: 'borderColor' }, edge('border', 'Color')),\n  matchColor('border-'),\n\n  // Border Width\n  matchTheme('border-([xytrbl])(?:$|-)', 'borderWidth', edge('border', 'Width')),\n  matchTheme('border(?:$|-)', 'borderWidth'),\n\n  // Divide Opacity\n  matchTheme('divide-opacity(?:$|-)', 'divideOpacity', ({ _ }) => ({\n    '&>:not([hidden])~:not([hidden])': { '--tw-divide-opacity': _ },\n  })),\n\n  // Divide Style\n  match('divide-(solid|dashed|dotted|double|none)', ({ 1: $1 }) => ({\n    '&>:not([hidden])~:not([hidden])': { borderStyle: $1 },\n  })),\n\n  // Divide Width\n  match('divide-([xy]-reverse)', ({ 1: $1 }) => ({\n    '&>:not([hidden])~:not([hidden])': { ['--tw-divide-' + $1]: '1' },\n  })),\n\n  matchTheme('divide-([xy])(?:$|-)', 'divideWidth', ({ 1: $1, _ }) => {\n    const edges = (\n      {\n        x: 'lr',\n        y: 'tb',\n      } as const\n    )[$1 as 'x' | 'y']\n\n    return {\n      '&>:not([hidden])~:not([hidden])': {\n        [`--tw-divide-${$1}-reverse`]: '0',\n        [`border-${position(\n          edges[0],\n        )}Width`]: `calc(${_} * calc(1 - var(--tw-divide-${$1}-reverse)))`,\n        [`border-${position(edges[1])}Width`]: `calc(${_} * var(--tw-divide-${$1}-reverse))`,\n      },\n    }\n  }),\n\n  // Divide Color\n  matchColor('divide-', {\n    // section: $0.replace('-', 'Color') -> 'divideColor'\n    property: 'borderColor',\n    // opacityVariable: '--tw-border-opacity',\n    // opacitySection: section.replace('Color', 'Opacity') -> 'divideOpacity'\n    selector: '&>:not([hidden])~:not([hidden])',\n  }),\n\n  // Ring Offset Opacity\n  matchTheme('ring-opacity(?:$|-)', 'ringOpacity', '--tw-ring-opacity'),\n\n  // Ring Offset Color\n  matchColor('ring-offset-', {\n    // section: 'ringOffsetColor',\n    property: '--tw-ring-offset-color',\n    opacityVariable: false,\n    // opacitySection: section.replace('Color', 'Opacity') -> 'ringOffsetOpacity'\n  }),\n\n  // Ring Offset Width\n  matchTheme('ring-offset(?:$|-)', 'ringOffsetWidth', '--tw-ring-offset-width'),\n\n  // Ring Inset\n  match('ring-inset', { '--tw-ring-inset': 'inset' }),\n\n  // Ring Color\n  matchColor('ring-', {\n    // section: 'ringColor',\n    property: '--tw-ring-color',\n    // opacityVariable: '--tw-ring-opacity',\n    // opacitySection: section.replace('Color', 'Opacity') -> 'ringOpacity'\n  }),\n\n  // Ring Width\n  matchTheme('ring(?:$|-)', 'ringWidth', ({ _ }, { theme }) => ({\n    ...asDefaults({\n      '--tw-ring-offset-shadow': '0 0 #0000',\n      '--tw-ring-shadow': '0 0 #0000',\n      '--tw-shadow': '0 0 #0000',\n      '--tw-shadow-colored': '0 0 #0000',\n      // Within own declaration to have the defaults above to be merged with defaults from shadow\n      '&': {\n        '--tw-ring-inset': 'var(--tw-empty,/*!*/ /*!*/)',\n        '--tw-ring-offset-width': theme('ringOffsetWidth', '', '0px'),\n        '--tw-ring-offset-color': toColorValue(theme('ringOffsetColor', '', '#fff')),\n        '--tw-ring-color': toColorValue(theme('ringColor', '', '#93c5fd'), {\n          opacityVariable: '--tw-ring-opacity',\n        }),\n        '--tw-ring-opacity': theme('ringOpacity', '', '0.5'),\n      },\n    }),\n    '--tw-ring-offset-shadow': `var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color)`,\n    '--tw-ring-shadow': `var(--tw-ring-inset) 0 0 0 calc(${_} + var(--tw-ring-offset-width)) var(--tw-ring-color)`,\n    boxShadow: `var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)`,\n  })),\n\n  /* EFFECTS */\n  // Box Shadow Color\n  matchColor(\n    'shadow-',\n    {\n      section: 'boxShadowColor',\n      opacityVariable: false,\n      opacitySection: 'opacity',\n    },\n    ({ _ }) => ({\n      '--tw-shadow-color': _.value,\n      '--tw-shadow': 'var(--tw-shadow-colored)',\n    }),\n  ),\n\n  // Box Shadow\n  matchTheme('shadow(?:$|-)', 'boxShadow', ({ _ }) => ({\n    ...asDefaults({\n      '--tw-ring-offset-shadow': '0 0 #0000',\n      '--tw-ring-shadow': '0 0 #0000',\n      '--tw-shadow': '0 0 #0000',\n      '--tw-shadow-colored': '0 0 #0000',\n    }),\n    '--tw-shadow': join(_),\n    // replace all colors with reference to --tw-shadow-colored\n    // this matches colors after non-comma char (keyword, offset) before comma or the end\n    '--tw-shadow-colored': (join(_) as string).replace(\n      /([^,]\\s+)(?:#[a-f\\d]+|(?:(?:hsl|rgb)a?|hwb|lab|lch|color|var)\\(.+?\\)|[a-z]+)(,|$)/g,\n      '$1var(--tw-shadow-color)$2',\n    ),\n    boxShadow: `var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)`,\n  })),\n\n  // Opacity\n  matchTheme('(opacity)-' /*, 'opacity' */),\n\n  // Mix Blend Mode\n  withAutocomplete$(\n    match('mix-blend-', 'mixBlendMode'),\n    DEV &&\n      (() => [\n        'normal',\n        'multiply',\n        'screen',\n        'overlay',\n        'darken',\n        'lighten',\n        'color-dodge',\n        'color-burn',\n        'hard-light',\n        'soft-light',\n        'difference',\n        'exclusion',\n        'hue',\n        'saturation',\n        'color',\n        'luminosity',\n      ]),\n  ),\n\n  /* FILTERS */\n  ...filter(),\n  ...filter('backdrop-'),\n\n  /* TRANSITIONS AND ANIMATION */\n  // Transition Property\n  matchTheme('transition(?:$|-)', 'transitionProperty', (match, { theme }) => ({\n    transitionProperty: join(match),\n    transitionTimingFunction:\n      match._ == 'none' ? undefined : join(theme('transitionTimingFunction', '')),\n    transitionDuration: match._ == 'none' ? undefined : join(theme('transitionDuration', '')),\n  })),\n\n  // Transition Duration\n  matchTheme('duration(?:$|-)', 'transitionDuration', 'transitionDuration', join),\n\n  // Transition Timing Function\n  matchTheme('ease(?:$|-)', 'transitionTimingFunction', 'transitionTimingFunction', join),\n\n  // Transition Delay\n  matchTheme('delay(?:$|-)', 'transitionDelay', 'transitionDelay', join),\n\n  matchTheme('animate(?:$|-)', 'animation', (match, { theme, h, e }) => {\n    const animation: string = join(match)\n\n    // Try to auto inject keyframes\n    const parts = animation.split(' ')\n    const keyframeValues = theme('keyframes', parts[0]) as CSSBase\n\n    if (keyframeValues) {\n      return {\n        [('@keyframes ' + (parts[0] = e(h(parts[0])))) as '@keyframes xxx']: keyframeValues,\n        animation: parts.join(' '),\n      }\n    }\n\n    return { animation }\n  }),\n\n  /* TRANSFORMS */\n  // Transform\n  '(transform)-(none)',\n  match('transform', tranformDefaults),\n  match('transform-(cpu|gpu)', ({ 1: $1 }) => ({\n    '--tw-transform': transformValue($1 == 'gpu'),\n  })),\n\n  // Scale\n  matchTheme(\n    'scale(-[xy])?-',\n    'scale',\n    ({ 1: $1, _ }) =>\n      ({\n        [('--tw-scale' + ($1 || '-x')) as '--tw-scale-x']: _,\n        [('--tw-scale' + ($1 || '-y')) as '--tw-scale-y']: _,\n        ...tranformDefaults(),\n      } as CSSObject),\n  ),\n\n  // Rotate\n  matchTheme('-?(rotate)-', 'rotate', transform),\n\n  // Translate\n  matchTheme('-?(translate-[xy])-', 'translate', transform),\n\n  // Skew\n  matchTheme('-?(skew-[xy])-', 'skew', transform),\n\n  // Transform Origin\n  match('origin-(center|((top|bottom)(-(left|right))?)|left|right)', 'transformOrigin', spacify),\n\n  /* INTERACTIVITY */\n  // Appearance\n  withAutocomplete$('(appearance)-', DEV && (() => ['auto', 'none'])),\n\n  // Columns\n  matchTheme('(columns)-' /*, 'columns' */),\n  withAutocomplete$('(columns)-(\\\\d+)', DEV && (() => range({ end: 12 }))),\n\n  // Break Before, After and Inside\n  withAutocomplete$(\n    '(break-(?:before|after|inside))-',\n    DEV &&\n      (({ 1: $1 }) =>\n        $1.endsWith('-inside-')\n          ? ['auto', 'avoid', 'avoid-page', 'avoid-column']\n          : /* before || after */ [\n              'auto',\n              'avoid',\n              'all',\n              'avoid-page',\n              'page',\n              'left',\n              'right',\n              'column',\n            ]),\n  ),\n\n  // Cursor\n  matchTheme('(cursor)-' /*, 'cursor' */),\n  withAutocomplete$(\n    '(cursor)-',\n    DEV &&\n      (() => [\n        'alias',\n        'all-scroll',\n        'auto',\n        'cell',\n        'col-resize',\n        'context-menu',\n        'copy',\n        'crosshair',\n        'default',\n        'e-resize',\n        'ew-resize',\n        'grab',\n        'grabbing',\n        'help',\n        'move',\n        'n-resize',\n        'ne-resize',\n        'nesw-resize',\n        'no-drop',\n        'none',\n        'not-allowed',\n        'ns-resize',\n        'nw-resize',\n        'nwse-resize',\n        'pointer',\n        'progress',\n        'row-resize',\n        's-resize',\n        'se-resize',\n        'sw-resize',\n        'text',\n        'vertical-text',\n        'w-resize',\n        'wait',\n        'zoom-in',\n        'zoom-out',\n      ]),\n  ),\n\n  // Scroll Snap Type\n  match('snap-(none)', 'scroll-snap-type'),\n  match('snap-(x|y|both)', ({ 1: $1 }) => ({\n    ...asDefaults({\n      '--tw-scroll-snap-strictness': 'proximity',\n    }),\n    'scroll-snap-type': $1 + ' var(--tw-scroll-snap-strictness)',\n  })),\n  match('snap-(mandatory|proximity)', '--tw-scroll-snap-strictness'),\n\n  // Scroll Snap Align\n  match('snap-(?:(start|end|center)|align-(none))', 'scroll-snap-align'),\n\n  // Scroll Snap Stop\n  match('snap-(normal|always)', 'scroll-snap-stop'),\n\n  match('scroll-(auto|smooth)', 'scroll-behavior'),\n\n  // Scroll Margin\n  // Padding\n  matchTheme('scroll-p([xytrbl])?(?:$|-)', 'padding', edge('scroll-padding')),\n\n  // Margin\n  matchTheme<TailwindTheme, 'scrollMargin'>(\n    '-?scroll-m([xytrbl])?(?:$|-)',\n    'scroll-margin',\n    edge('scroll-margin'),\n  ),\n\n  // Touch Action\n  match('touch-(auto|none|manipulation)', 'touch-action'),\n  match('touch-(pinch-zoom|pan-(?:(x|left|right)|(y|up|down)))', ({ 1: $1, 2: $2, 3: $3 }) => ({\n    ...asDefaults({\n      '--tw-pan-x': 'var(--tw-empty,/*!*/ /*!*/)',\n      '--tw-pan-y': 'var(--tw-empty,/*!*/ /*!*/)',\n      '--tw-pinch-zoom': 'var(--tw-empty,/*!*/ /*!*/)',\n      '--tw-touch-action': 'var(--tw-pan-x) var(--tw-pan-y) var(--tw-pinch-zoom)',\n    }),\n    // x, left, right -> pan-x\n    // y, up, down -> pan-y\n    // -> pinch-zoom\n    [`--tw-${$2 ? 'pan-x' : $3 ? 'pan-y' : $1}` as '--tw-pan-x']: $1,\n    'touch-action': 'var(--tw-touch-action)',\n  })),\n\n  // Outline Style\n  match('outline-none', {\n    outline: '2px solid transparent',\n    'outline-offset': '2px',\n  }),\n  match('outline', { outlineStyle: 'solid' }),\n  match('outline-(dashed|dotted|double)', 'outlineStyle'),\n\n  // Outline Offset\n  matchTheme('-?(outline-offset)-' /*, 'outlineOffset'*/),\n\n  // Outline Color\n  matchColor('outline-', {\n    opacityVariable: false,\n    opacitySection: 'opacity',\n  }),\n\n  // Outline Width\n  matchTheme('outline-', 'outlineWidth'),\n\n  // Pointer Events\n  withAutocomplete$('(pointer-events)-', DEV && (() => ['auto', 'none'])),\n\n  // Will Change\n  matchTheme('(will-change)-' /*, 'willChange' */),\n  withAutocomplete$('(will-change)-', DEV && (() => ['auto', 'contents', 'transform'])),\n\n  // Resize\n  [\n    'resize(?:-(none|x|y))?',\n    'resize',\n    ({ 1: $1 }) => ({ x: 'horizontal', y: 'vertical' }[$1] || $1 || 'both'),\n  ],\n\n  // User Select\n  match('select-(none|text|all|auto)', 'userSelect'),\n\n  /* SVG */\n  // Fill, Stroke\n  matchColor('fill-', { section: 'fill', opacityVariable: false, opacitySection: 'opacity' }),\n  matchColor('stroke-', { section: 'stroke', opacityVariable: false, opacitySection: 'opacity' }),\n\n  // Stroke Width\n  matchTheme('stroke-', 'strokeWidth'),\n\n  /* ACCESSIBILITY */\n  // Screen Readers\n  match('sr-only', {\n    position: 'absolute',\n    width: '1px',\n    height: '1px',\n    padding: '0',\n    margin: '-1px',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap',\n    clip: 'rect(0,0,0,0)',\n    borderWidth: '0',\n  }),\n\n  match('not-sr-only', {\n    position: 'static',\n    width: 'auto',\n    height: 'auto',\n    padding: '0',\n    margin: '0',\n    overflow: 'visible',\n    whiteSpace: 'normal',\n    clip: 'auto',\n  }),\n]\n\nexport default rules\n\nfunction spacify(value: string | MatchResult): string {\n  return (typeof value == 'string' ? value : value[1]).replace(/-/g, ' ').trim()\n}\n\nfunction columnify(value: string | MatchResult): string {\n  return (typeof value == 'string' ? value : value[1]).replace('col', 'column')\n}\n\nfunction position(shorthand: string, separator = '-'): string {\n  const longhand: string[] = []\n\n  for (const short of shorthand) {\n    longhand.push({ t: 'top', r: 'right', b: 'bottom', l: 'left' }[short] as string)\n  }\n\n  return longhand.join(separator)\n}\n\nfunction join(match: ThemeMatchResult<MaybeArray<string>>): string\nfunction join(value: MaybeArray<string> | undefined): string | undefined\n\nfunction join(\n  value: ThemeMatchResult<MaybeArray<string>> | MaybeArray<string> | undefined,\n): string | undefined {\n  return value && '' + ((value as ThemeMatchResult<MaybeArray<string>>)._ || value)\n}\n\nfunction convertContentValue({ $$ }: MatchResult) {\n  return (\n    ({\n      // /* aut*/ o: '',\n      /* sta*/ r /*t*/: 'flex-',\n      /* end*/ '': 'flex-',\n      // /* cen*/ t /*er*/: '',\n      /* bet*/ w /*een*/: 'space-',\n      /* aro*/ u /*nd*/: 'space-',\n      /* eve*/ n /*ly*/: 'space-',\n      // /* str*/ e /*tch*/: '',\n      // /* bas*/ l /*ine*/: '',\n    }[$$[3] || ''] || '') + $$\n  )\n}\n\nfunction edge(\n  propertyPrefix: string,\n  propertySuffix = '',\n): ThemeRuleResolver<string | ColorFromThemeValue, TailwindTheme> {\n  return ({ 1: $1, _ }) => {\n    const edges =\n      {\n        x: 'lr',\n        y: 'tb',\n      }[$1 as 'x' | 'y'] || $1 + $1\n\n    return edges\n      ? {\n          ...toCSS(propertyPrefix + '-' + position(edges[0]) + propertySuffix, _),\n          ...toCSS(propertyPrefix + '-' + position(edges[1]) + propertySuffix, _),\n        }\n      : toCSS(propertyPrefix + propertySuffix, _)\n  }\n}\n\nfunction filter(prefix = ''): Rule<TailwindTheme>[] {\n  const filters = [\n    'blur',\n    'brightness',\n    'contrast',\n    'grayscale',\n    'hue-rotate',\n    'invert',\n    prefix && 'opacity',\n    'saturate',\n    'sepia',\n    !prefix && 'drop-shadow',\n  ].filter(Boolean) as string[]\n\n  let defaults = {} as CSSObject\n\n  // first create properties defaults\n  for (const key of filters) {\n    defaults[`--tw-${prefix}${key}` as '--tw-blur'] = 'var(--tw-empty,/*!*/ /*!*/)'\n  }\n\n  defaults = {\n    // move defaults\n    ...asDefaults(defaults),\n    // add default filter which allows standalone usage\n    [`${prefix}filter`]: filters.map((key) => `var(--tw-${prefix}${key})`).join(' '),\n  } as CSSObject\n\n  return [\n    `(${prefix}filter)-(none)`,\n\n    match(`${prefix}filter`, defaults),\n\n    ...filters.map((key) =>\n      matchTheme<TailwindTheme, 'hueRotate' | 'dropShadow'>(\n        // hue-rotate can be negated\n        `${key[0] == 'h' ? '-?' : ''}(${prefix}${key})(?:$|-)`,\n\n        key as 'hueRotate' | 'dropShadow',\n        ({ 1: $1, _ }) =>\n          ({\n            [`--tw-${$1}`]: asArray(_)\n              .map((value) => `${key}(${value})`)\n              .join(' '),\n            ...defaults,\n          } as CSSObject),\n      ),\n    ),\n  ]\n}\n\nfunction transform({ 1: $1, _ }: ThemeMatchResult<string>): CSSObject {\n  return {\n    ['--tw-' + $1]: _,\n    ...tranformDefaults(),\n  } as CSSObject\n}\n\nfunction tranformDefaults(): CSSObject {\n  return {\n    ...asDefaults({\n      '--tw-translate-x': '0',\n      '--tw-translate-y': '0',\n      '--tw-rotate': '0',\n      '--tw-skew-x': '0',\n      '--tw-skew-y': '0',\n      '--tw-scale-x': '1',\n      '--tw-scale-y': '1',\n      '--tw-transform': transformValue(),\n    }),\n    transform: 'var(--tw-transform)',\n  }\n}\n\nfunction transformValue(gpu?: boolean): string {\n  return [\n    gpu // -gpu\n      ? 'translate3d(var(--tw-translate-x),var(--tw-translate-y),0)'\n      : 'translateX(var(--tw-translate-x)) translateY(var(--tw-translate-y))',\n    'rotate(var(--tw-rotate))',\n    'skewX(var(--tw-skew-x))',\n    'skewY(var(--tw-skew-y))',\n    'scaleX(var(--tw-scale-x))',\n    'scaleY(var(--tw-scale-y))',\n  ].join(' ')\n}\nfunction span({ 1: $1, 2: $2 }: MatchResult) {\n  return `${$1} ${$2} / ${$1} ${$2}`\n}\n\nfunction gridTemplate({ 1: $1 }: MatchResult) {\n  return `repeat(${$1},minmax(0,1fr))`\n}\n\nfunction range({\n  start = 1,\n  end,\n  step = 1,\n}: {\n  start?: number\n  end: number\n  step?: number\n}): string[] {\n  const result: string[] = []\n\n  for (let index = start; index <= end; index += step) {\n    result.push(`${index}`)\n  }\n\n  return result\n}\n\nfunction asDefaults(props: CSSObject): { '@layer defaults': CSSBase } {\n  return {\n    '@layer defaults': {\n      '*,::before,::after': props,\n      '::backdrop': props,\n    },\n  }\n}\n", "/**\n * @module @twind/preset-tailwind/variants\n */\n\nimport {\n  AutocompleteProvider,\n  VariantResolver,\n  Variant,\n  AutocompleteItem,\n  arbitrary,\n} from '@twind/core'\nimport type { TailwindTheme } from './types'\n\nimport { DEV } from 'distilt/env'\n\nimport { normalize, withAutocomplete } from '@twind/core'\n\n// indirection wrapper to remove autocomplete functions from production bundles\nfunction withAutocomplete$(\n  rule: VariantResolver<TailwindTheme>,\n  autocomplete: AutocompleteProvider<TailwindTheme> | false,\n): VariantResolver<TailwindTheme> {\n  if (DEV) {\n    return withAutocomplete(rule, autocomplete)\n  }\n\n  return rule\n}\n\nconst variants: Variant<TailwindTheme>[] = [\n  ['sticky', '@supports ((position: -webkit-sticky) or (position:sticky))'],\n  ['motion-reduce', '@media (prefers-reduced-motion:reduce)'],\n  ['motion-safe', '@media (prefers-reduced-motion:no-preference)'],\n  ['print', '@media print'],\n  ['(portrait|landscape)', ({ 1: $1 }) => `@media (orientation:${$1})`],\n  ['contrast-(more|less)', ({ 1: $1 }) => `@media (prefers-contrast:${$1})`],\n\n  ['(first-(letter|line)|placeholder|backdrop|before|after)', ({ 1: $1 }) => `&::${$1}`],\n  ['(marker|selection)', ({ 1: $1 }) => `& *::${$1},&::${$1}`],\n  ['file', '&::file-selector-button'],\n\n  ['(first|last|only)', ({ 1: $1 }) => `&:${$1}-child`],\n  ['even', '&:nth-child(2n)'],\n  ['odd', '&:nth-child(odd)'],\n\n  ['open', '&[open]'],\n\n  // All other pseudo classes are already supported by twind\n\n  [\n    '(aria|data)-',\n    withAutocomplete$(\n      ({ 1: $1 /* aria or data */, $$ /* everything after the dash */ }, context) =>\n        $$ &&\n        `&[${$1}-${\n          // aria-asc or data-checked -> from theme\n          context.theme($1, $$) ||\n          // aria-[...] or data-[...]\n          arbitrary($$, '', context) ||\n          // default handling\n          `${$$}=\"true\"`\n        }]`,\n      DEV &&\n        (({ 1: $1 }, { theme }) =>\n          [\n            ...new Set([\n              ...($1 == 'aria'\n                ? [\n                    'checked',\n                    'disabled',\n                    'expanded',\n                    'hidden',\n                    'pressed',\n                    'readonly',\n                    'required',\n                    'selected',\n                  ]\n                : []),\n              ...Object.keys(theme($1 as 'aria' | 'data') || {}),\n            ]),\n          ]\n            .map(\n              (key): AutocompleteItem => ({\n                suffix: key,\n                label: `&[${$1}-${theme($1, key) || `${key}=\"true\"`}]`,\n                theme: { section: $1, key },\n              }),\n            )\n            .concat([{ suffix: '[', label: `&[${$1}-…]` }])),\n    ),\n  ],\n\n  /* Styling based on parent and peer state */\n  // Groups classes like: group-focus and group-hover\n  // these need to add a marker selector with the pseudo class\n  // => '.group:focus .group-focus:selector'\n  [\n    '((group|peer)(~[^-[]+)?)(-\\\\[(.+)]|[-[].+?)(\\\\/.+)?',\n    withAutocomplete$(\n      ({ 2: type, 3: name = '', 4: $4, 5: $5 = '', 6: label = name }, { e, h, v }) => {\n        const selector = normalize($5) || ($4[0] == '[' ? $4 : (v($4.slice(1)) as string))\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        return `${(selector.includes('&') ? selector : '&' + selector).replace(\n          /&/g,\n          `:merge(.${e(h(type + label))})`,\n        )}${type[0] == 'p' ? '~' : ' '}&`\n      },\n      DEV &&\n        ((_, { variants }) =>\n          Object.entries(variants)\n            .filter(([, selector]) => /^&(\\[|:[^:])/.test(selector))\n            .flatMap(([variant, selector]): AutocompleteItem[] => [\n              {\n                prefix: 'group-',\n                suffix: variant,\n                label: `${selector.replace('&', '.group')} &`,\n                modifiers: [],\n              },\n              {\n                prefix: 'peer-',\n                suffix: variant,\n                label: `${selector.replace('&', '.peer')} &`,\n                modifiers: [],\n              },\n            ])),\n    ),\n  ],\n\n  // direction variants\n  [\n    '(ltr|rtl)',\n    withAutocomplete$(\n      ({ 1: $1 }) => `[dir=\"${$1}\"] &`,\n      DEV && (({ 1: $1 }) => [{ prefix: $1, suffix: '', label: `[dir=\"${$1}\"] &` }]),\n    ),\n  ],\n\n  [\n    'supports-',\n    withAutocomplete$(\n      ({ $$ /* everything after the dash */ }, context) => {\n        $$ &&= (context.theme('supports', $$) || arbitrary($$, '', context)) as string\n\n        if ($$) {\n          if (!$$.includes(':')) {\n            $$ += ':var(--tw)'\n          }\n\n          if (!/^\\w*\\s*\\(/.test($$)) {\n            $$ = `(${$$})`\n          }\n\n          // Chrome has a bug where `(condtion1)or(condition2)` is not valid\n          // But `(condition1) or (condition2)` is supported.\n          return `@supports ${$$.replace(/\\b(and|or|not)\\b/g, ' $1 ').trim()}`\n        }\n      },\n      DEV &&\n        ((_, { theme }) =>\n          Object.keys(theme('supports') || {})\n            .map(\n              (key): AutocompleteItem => ({\n                suffix: key,\n                theme: { section: 'supports', key },\n              }),\n            )\n            .concat([{ suffix: '[', label: `@supports …` }])),\n    ),\n  ],\n\n  [\n    'max-',\n    withAutocomplete$(\n      ({ $$ }, context) => {\n        $$ &&= (context.theme('screens', $$) || arbitrary($$, '', context)) as string\n        if (typeof $$ == 'string') {\n          return `@media not all and (min-width:${$$})`\n        }\n      },\n      DEV &&\n        ((_, { theme }) =>\n          Object.entries(theme('screens') || {})\n            .filter(([, value]) => typeof value == 'string')\n            .map(\n              ([key, value]): AutocompleteItem => ({\n                suffix: key,\n                label: `@media not all and (min-width:${value})`,\n                theme: { section: 'screens', key },\n              }),\n            )\n            .concat([{ suffix: '[', label: `@media not all and (min-width: …)` }])),\n    ),\n  ],\n\n  [\n    'min-',\n    withAutocomplete$(({ $$ }, context) => {\n      $$ &&= arbitrary($$, '', context) as string\n      return $$ && `@media (min-width:${$$})`\n    }, DEV && (() => [{ suffix: '[', label: `@media (min-width: …)` }])),\n  ],\n\n  // Arbitrary variants\n  [/^\\[(.+)]$/, ({ 1: $1 }) => /[&@]/.test($1) && normalize($1).replace(/[}]+$/, '').split('{')],\n]\n\nexport default variants\n", "/**\n * @module @twind/preset-tailwind/base\n */\n\nimport type { BaseTheme, Preset } from '@twind/core'\nimport type { TailwindTheme } from './types'\n\nimport theme from './baseTheme'\nimport preflight from './preflight'\nimport rules from './rules'\nimport variants from './variants'\n\nexport * from './types'\n\nexport interface TailwindPresetBaseOptions {\n  colors?: BaseTheme['colors']\n  /** Allows to disable to tailwind preflight (default: `false` eg include the tailwind preflight ) */\n  disablePreflight?: boolean | undefined\n}\n\n/**\n * @experimental\n */\nexport default function presetTailwindBase({\n  colors,\n  disablePreflight,\n}: TailwindPresetBaseOptions = {}): Preset<TailwindTheme> {\n  return {\n    // allow other preflight to run\n    preflight: disablePreflight ? undefined : preflight,\n    theme: {\n      ...theme,\n      colors: {\n        inherit: 'inherit',\n        current: 'currentColor',\n        transparent: 'transparent',\n        black: '#000',\n        white: '#fff',\n        ...colors,\n      },\n    },\n    variants,\n    rules,\n    finalize(rule) {\n      // automatically add `content: ''` to before and after so you don’t have to specify it unless you want a different value\n      if (\n        // ignore global, preflight, and auto added rules\n        rule.n &&\n        // only if there are declarations\n        rule.d &&\n        // and it has a ::before or ::after selector\n        rule.r.some((r) => /^&::(before|after)$/.test(r)) &&\n        // there is no content property yet\n        !/(^|;)content:/.test(rule.d)\n      ) {\n        return { ...rule, d: 'content:var(--tw-content);' + rule.d }\n      }\n\n      return rule\n    },\n  }\n}\n", "// Source from https://github.com/tailwindlabs/tailwindcss/blob/master/src/public/colors.js\n\n/**\n * @module @twind/preset-tailwind/colors\n */\n\nexport const slate = {\n  50: '#f8fafc',\n  100: '#f1f5f9',\n  200: '#e2e8f0',\n  300: '#cbd5e1',\n  400: '#94a3b8',\n  500: '#64748b',\n  600: '#475569',\n  700: '#334155',\n  800: '#1e293b',\n  900: '#0f172a',\n} as const\n\nexport const gray = {\n  50: '#f9fafb',\n  100: '#f3f4f6',\n  200: '#e5e7eb',\n  300: '#d1d5db',\n  400: '#9ca3af',\n  500: '#6b7280',\n  600: '#4b5563',\n  700: '#374151',\n  800: '#1f2937',\n  900: '#111827',\n} as const\n\nexport const zinc = {\n  50: '#fafafa',\n  100: '#f4f4f5',\n  200: '#e4e4e7',\n  300: '#d4d4d8',\n  400: '#a1a1aa',\n  500: '#71717a',\n  600: '#52525b',\n  700: '#3f3f46',\n  800: '#27272a',\n  900: '#18181b',\n} as const\n\nexport const neutral = {\n  50: '#fafafa',\n  100: '#f5f5f5',\n  200: '#e5e5e5',\n  300: '#d4d4d4',\n  400: '#a3a3a3',\n  500: '#737373',\n  600: '#525252',\n  700: '#404040',\n  800: '#262626',\n  900: '#171717',\n} as const\n\nexport const stone = {\n  50: '#fafaf9',\n  100: '#f5f5f4',\n  200: '#e7e5e4',\n  300: '#d6d3d1',\n  400: '#a8a29e',\n  500: '#78716c',\n  600: '#57534e',\n  700: '#44403c',\n  800: '#292524',\n  900: '#1c1917',\n} as const\n\nexport const red = {\n  50: '#fef2f2',\n  100: '#fee2e2',\n  200: '#fecaca',\n  300: '#fca5a5',\n  400: '#f87171',\n  500: '#ef4444',\n  600: '#dc2626',\n  700: '#b91c1c',\n  800: '#991b1b',\n  900: '#7f1d1d',\n} as const\n\nexport const orange = {\n  50: '#fff7ed',\n  100: '#ffedd5',\n  200: '#fed7aa',\n  300: '#fdba74',\n  400: '#fb923c',\n  500: '#f97316',\n  600: '#ea580c',\n  700: '#c2410c',\n  800: '#9a3412',\n  900: '#7c2d12',\n} as const\n\nexport const amber = {\n  50: '#fffbeb',\n  100: '#fef3c7',\n  200: '#fde68a',\n  300: '#fcd34d',\n  400: '#fbbf24',\n  500: '#f59e0b',\n  600: '#d97706',\n  700: '#b45309',\n  800: '#92400e',\n  900: '#78350f',\n} as const\n\nexport const yellow = {\n  50: '#fefce8',\n  100: '#fef9c3',\n  200: '#fef08a',\n  300: '#fde047',\n  400: '#facc15',\n  500: '#eab308',\n  600: '#ca8a04',\n  700: '#a16207',\n  800: '#854d0e',\n  900: '#713f12',\n} as const\n\nexport const lime = {\n  50: '#f7fee7',\n  100: '#ecfccb',\n  200: '#d9f99d',\n  300: '#bef264',\n  400: '#a3e635',\n  500: '#84cc16',\n  600: '#65a30d',\n  700: '#4d7c0f',\n  800: '#3f6212',\n  900: '#365314',\n} as const\n\nexport const green = {\n  50: '#f0fdf4',\n  100: '#dcfce7',\n  200: '#bbf7d0',\n  300: '#86efac',\n  400: '#4ade80',\n  500: '#22c55e',\n  600: '#16a34a',\n  700: '#15803d',\n  800: '#166534',\n  900: '#14532d',\n} as const\n\nexport const emerald = {\n  50: '#ecfdf5',\n  100: '#d1fae5',\n  200: '#a7f3d0',\n  300: '#6ee7b7',\n  400: '#34d399',\n  500: '#10b981',\n  600: '#059669',\n  700: '#047857',\n  800: '#065f46',\n  900: '#064e3b',\n} as const\n\nexport const teal = {\n  50: '#f0fdfa',\n  100: '#ccfbf1',\n  200: '#99f6e4',\n  300: '#5eead4',\n  400: '#2dd4bf',\n  500: '#14b8a6',\n  600: '#0d9488',\n  700: '#0f766e',\n  800: '#115e59',\n  900: '#134e4a',\n} as const\n\nexport const cyan = {\n  50: '#ecfeff',\n  100: '#cffafe',\n  200: '#a5f3fc',\n  300: '#67e8f9',\n  400: '#22d3ee',\n  500: '#06b6d4',\n  600: '#0891b2',\n  700: '#0e7490',\n  800: '#155e75',\n  900: '#164e63',\n} as const\n\nexport const sky = {\n  50: '#f0f9ff',\n  100: '#e0f2fe',\n  200: '#bae6fd',\n  300: '#7dd3fc',\n  400: '#38bdf8',\n  500: '#0ea5e9',\n  600: '#0284c7',\n  700: '#0369a1',\n  800: '#075985',\n  900: '#0c4a6e',\n} as const\n\nexport const blue = {\n  50: '#eff6ff',\n  100: '#dbeafe',\n  200: '#bfdbfe',\n  300: '#93c5fd',\n  400: '#60a5fa',\n  500: '#3b82f6',\n  600: '#2563eb',\n  700: '#1d4ed8',\n  800: '#1e40af',\n  900: '#1e3a8a',\n} as const\n\nexport const indigo = {\n  50: '#eef2ff',\n  100: '#e0e7ff',\n  200: '#c7d2fe',\n  300: '#a5b4fc',\n  400: '#818cf8',\n  500: '#6366f1',\n  600: '#4f46e5',\n  700: '#4338ca',\n  800: '#3730a3',\n  900: '#312e81',\n} as const\n\nexport const violet = {\n  50: '#f5f3ff',\n  100: '#ede9fe',\n  200: '#ddd6fe',\n  300: '#c4b5fd',\n  400: '#a78bfa',\n  500: '#8b5cf6',\n  600: '#7c3aed',\n  700: '#6d28d9',\n  800: '#5b21b6',\n  900: '#4c1d95',\n} as const\n\nexport const purple = {\n  50: '#faf5ff',\n  100: '#f3e8ff',\n  200: '#e9d5ff',\n  300: '#d8b4fe',\n  400: '#c084fc',\n  500: '#a855f7',\n  600: '#9333ea',\n  700: '#7e22ce',\n  800: '#6b21a8',\n  900: '#581c87',\n} as const\n\nexport const fuchsia = {\n  50: '#fdf4ff',\n  100: '#fae8ff',\n  200: '#f5d0fe',\n  300: '#f0abfc',\n  400: '#e879f9',\n  500: '#d946ef',\n  600: '#c026d3',\n  700: '#a21caf',\n  800: '#86198f',\n  900: '#701a75',\n} as const\n\nexport const pink = {\n  50: '#fdf2f8',\n  100: '#fce7f3',\n  200: '#fbcfe8',\n  300: '#f9a8d4',\n  400: '#f472b6',\n  500: '#ec4899',\n  600: '#db2777',\n  700: '#be185d',\n  800: '#9d174d',\n  900: '#831843',\n} as const\n\nexport const rose = {\n  50: '#fff1f2',\n  100: '#ffe4e6',\n  200: '#fecdd3',\n  300: '#fda4af',\n  400: '#fb7185',\n  500: '#f43f5e',\n  600: '#e11d48',\n  700: '#be123c',\n  800: '#9f1239',\n  900: '#881337',\n} as const\n\n// get lightBlue() {\n//   warn({ version: 'v2.2', from: 'lightBlue', to: 'sky' })\n//   return this.sky\n// }\n// get warmGray() {\n//   warn({ version: 'v3.0', from: 'warmGray', to: 'stone' })\n//   return this.stone\n// }\n// get trueGray() {\n//   warn({ version: 'v3.0', from: 'trueGray', to: 'neutral' })\n//   return this.neutral\n// }\n// get coolGray() {\n//   warn({ version: 'v3.0', from: 'coolGray', to: 'gray' })\n//   return this.gray\n// }\n// get blueGray() {\n//   warn({ version: 'v3.0', from: 'blueGray', to: 'slate' })\n//   return this.slate\n// }\n", "import type { Preset } from '@twind/core'\nimport type { TailwindTheme } from './types'\n\nimport presetTailwindBase from './base'\nimport * as colors from './colors'\n\nexport * from './types'\n\nexport interface TailwindPresetOptions {\n  /** Allows to disable to tailwind preflight (default: `false` eg include the tailwind preflight ) */\n  disablePreflight?: boolean | undefined\n}\n\nexport default function presetTailwind({\n  disablePreflight,\n}: TailwindPresetOptions = {}): Preset<TailwindTheme> {\n  return presetTailwindBase({ colors, disablePreflight })\n}\n"],
  "mappings": "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",
  "names": ["theme", "screens", "sm", "md", "lg", "xl", "columns", "auto", "xs", "spacing", "px", "linear", "durations", "animation", "none", "spin", "ping", "pulse", "bounce", "aspectRatio", "square", "video", "backdropBlur", "alias", "backdropBrightness", "backdropContrast", "backdropGrayscale", "backdropHueRotate", "backdropInvert", "backdropOpacity", "backdropSaturate", "backdropSepia", "backgroundColor", "backgroundImage", "backgroundOpacity", "backgroundSize", "cover", "contain", "blur", "DEFAULT", "brightness", "borderColor", "borderOpacity", "borderRadius", "full", "borderSpacing", "borderWidth", "exponential", "boxShadow", "inner", "boxShadowColor", "caretColor", "accentColor", "contrast", "content", "divideColor", "divideOpacity", "divideWidth", "dropShadow", "fill", "grayscale", "hueRotate", "invert", "flex", "initial", "flexBasis", "ratios", "flexGrow", "flexShrink", "fontFamily", "sans", "split", "serif", "mono", "fontSize", "base", "fontWeight", "thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", "gap", "gradientColorStops", "gridAutoColumns", "min", "max", "fr", "gridAutoRows", "gridColumn", "gridRow", "gridTemplateColumns", "gridTemplateRows", "height", "fit", "screen", "inset", "keyframes", "from", "transform", "to", "opacity", "animationTimingFunction", "letterSpacing", "tighter", "tight", "wide", "wider", "widest", "lineHeight", "snug", "relaxed", "loose", "margin", "maxHeight", "maxWidth", "breakpoints", "prose", "minHeight", "minWidth", "order", "first", "last", "padding", "placeholderColor", "placeholderOpacity", "outlineColor", "outlineOffset", "outlineWidth", "ringColor", "ringOffsetColor", "ringOffsetWidth", "ringOpacity", "ringWidth", "rotate", "saturate", "scale", "scrollMargin", "scrollPadding", "sepia", "skew", "space", "stroke", "strokeWidth", "textColor", "textDecorationColor", "textDecorationThickness", "textUnderlineOffset", "textIndent", "textOpacity", "transitionDuration", "transitionDelay", "transitionProperty", "all", "colors", "shadow", "transitionTimingFunction", "in", "out", "translate", "width", "willChange", "scroll", "zIndex", "start", "end", "result", "dividend", "Number", "toFixed", "stop", "unit", "divideBy", "step", "section", "preflight", "boxSizing", "borderWidth", "borderStyle", "borderColor", "html", "lineHeight", "WebkitTextSizeAdjust", "MozTabSize", "tabSize", "fontFamily", "baseTheme", "sans", "fontFeatureSettings", "body", "margin", "hr", "height", "color", "borderTopWidth", "textDecoration", "fontSize", "fontWeight", "a", "mono", "small", "position", "verticalAlign", "sub", "bottom", "sup", "top", "table", "textIndent", "borderCollapse", "padding", "textTransform", "WebkitAppearance", "backgroundColor", "backgroundImage", "outline", "boxShadow", "progress", "outlineOffset", "font", "summary", "display", "fieldset", "legend", "listStyle", "textarea", "resize", "opacity", "cursor", "maxWidth", "active", "toClassName", "rule", "v", "i", "n", "join", "format", "rules", "seperator", "map", "escape", "CSS", "className", "replace", "hash", "value", "h", "index", "length", "Math", "imul", "charCodeAt", "toString", "mql", "screen", "prefix", "asArray", "min", "raw", "Object", "keys", "feature", "Array", "isArray", "noop", "Layer", "d", "b", "c", "a", "u", "o", "seperatorPrecedence", "string", "match", "length", "atRulePrecedence", "css", "Math", "min", "test", "max", "RegExp", "$1", "$2", "PRECEDENCES_BY_PSEUDO_CLASS", "convert", "n", "name", "i", "important", "v", "variants", "context", "precedence", "conditions", "toClassName", "asArray", "variant", "screen", "theme", "condition", "mql", "selector", "push", "indexOf", "slice", "p", "r", "registry", "Map", "stringify", "rule", "groups", "replaceEach", "reduce", "selectorPart", "conditionPart", "mergeMatch", "exec", "selectorIndex", "replaceReference", "escape", "replace", "reduceRight", "body", "grouping", "iteratee", "_", "comma", "reference", "collator", "Intl", "Collator", "numeric", "sortedInsertionIndex", "array", "element", "low", "high", "pivot", "compareTwindRules", "layer", "compare", "byModifier", "byName", "s", "split", "pop", "String", "fromCharCode", "charCodeAt", "parseColorComponent", "chars", "factor", "round", "parseInt", "toColorValue", "color", "options", "opacityValue", "opacityVariable", "opacity", "includes", "size", "substr", "serialize", "style", "rule", "context", "precedence", "conditions", "serialize$", "n", "name", "p", "r", "i", "important", "rules", "declarations", "maxPropertyPrecedence", "numberOfDeclarations", "key", "layer", "property", "value", "push", "translateWith", "parse", "css", "asArray", "Layer", "o", "map", "d", "stringify", "join", "Array", "isArray", "hash", "JSON", "replace", "_", "toLowerCase", "Math", "max", "seperatorPrecedence", "test", "RegExp", "$1", "$2", "s", "resolveThemeFunction", "theme", "includes", "rulePrecedence", "screenKey", "screen", "mql", "atRulePrecedence", "unshift", "min", "sort", "compareTwindRules", "convert", "__", "___", "defaultValue", "toColorValue", "filter", "v", "Object", "merge", "current", "result", "c", "Boolean", "translate", "u", "cssRule", "resolved", "factory", "registry", "get", "toClassName", "splice", "sortedInsertionIndex", "useOrderOfRules", "flatMap", "b", "define", "className", "set", "createRule", "active", "loc", "length", "variants", "negated", "slice", "endsWith", "defineProperties", "uniq", "a", "l", "index", "values", "indexOf", "cache", "Map", "token", "parsed", "startIndex", "skip", "comment", "position", "commit", "isRule", "endOffset", "char", "lastMatch", "lastGroup", "lastIndexOf", "nested", "shift", "pop", "format", "interleave", "strings", "interpolations", "handle", "reduce", "interpolation", "interpolate", "raw", "toString", "trim", "tmp", "apply", "alias", "shortcut", "marker", "Proxy", "alias$", "target", "namedAlias", "astish", "astish$", "newRule", "block", "tree", "exec", "body", "condition", "ast", "find", "label", "animation", "waypoints", "animation$", "namedAnimation", "animationName", "match", "pattern", "resolve", "fromMatch", "maybeNegate", "offset", "$$", "input", "matchTheme", "section", "fromTheme", "withAutocomplete", "themeSection", "camelize", "arbitrary", "isKeyLookup", "entries", "suffix", "color", "opacityValue", "concat", "matchColor", "options", "colorFromTheme", "colorMatch", "opacityMatch", "parseValue", "colorValue", "opacityVariable", "opacitySection", "selector", "create", "properties", "toCSS", "undefined", "dark", "darkColorValue", "opacities", "modifiers", "modifier", "normalize", "x", "toUpperCase", "before", "url", "after", "fullMatch", "characterBefore", "repeat", "kAutocomplete", "Symbol", "autocomplete", "defineProperty", "configurable", "assertActive", "active", "Error", "tw", "Proxy", "noop", "apply", "_target", "_thisArg", "args", "get", "target", "property", "value", "arguments", "keyframes", "bind", "thisArg", "Proxy", "strings", "interpolations", "keyframes$", "get", "target", "name", "namedKeyframes", "toString", "ast", "astish", "keyframeName", "escape", "hash", "JSON", "stringify", "tw$", "css", "rule", "rules", "match", "$1", "$2", "context", "arbitrary", "input", "h", "c", "withAutocomplete", "matchTheme", "_", "theme", "screens", "center", "padding", "width", "marginRight", "marginLeft", "paddingFor", "screen", "value", "mql", "maxWidth", "DEFAULT", "paddingRight", "paddingLeft", "content", "display", "spacify", "top", "right", "bottom", "left", "visibility", "columnify", "range", "end", "gridTemplate", "span", "endsWith", "convertContentValue", "$$", "includes", "edge", "y", "x", "asArray", "fontFamily", "join", "WebkitFontSmoothing", "MozOsxFontSmoothing", "fontStyle", "$3", "fontVariantNumeric", "asDefaults", "matchColor", "property", "selector", "fontSize", "lineHeight", "textDecorationLine", "section", "opacityVariable", "opacitySection", "textTransform", "overflow", "whiteSpace", "textOverflow", "wordBreak", "overflowWrap", "position", "color", "opacityValue", "corners", "t", "r", "b", "l", "borderStyle", "edges", "toColorValue", "boxShadow", "replace", "filter", "transitionProperty", "transitionTimingFunction", "undefined", "transitionDuration", "e", "animation", "parts", "split", "keyframeValues", "tranformDefaults", "transformValue", "transform", "outline", "outlineStyle", "height", "margin", "clip", "borderWidth", "trim", "shorthand", "separator", "longhand", "short", "push", "w", "u", "n", "propertyPrefix", "propertySuffix", "toCSS", "prefix", "filters", "Boolean", "defaults", "key", "map", "gpu", "start", "step", "result", "index", "props", "variants", "$1", "withAutocomplete", "$$", "context", "theme", "arbitrary", "Set", "Object", "keys", "map", "key", "suffix", "label", "section", "concat", "type", "name", "$4", "$5", "e", "h", "v", "selector", "normalize", "slice", "includes", "replace", "_", "entries", "filter", "test", "flatMap", "variant", "prefix", "modifiers", "trim", "value", "DEV", "split", "presetTailwindBase", "colors", "disablePreflight", "preflight", "undefined", "theme", "inherit", "current", "transparent", "black", "white", "variants", "rules", "finalize", "rule", "n", "d", "r", "some", "test", "slate", "gray", "zinc", "neutral", "stone", "red", "orange", "amber", "yellow", "lime", "green", "emerald", "teal", "cyan", "sky", "blue", "indigo", "violet", "purple", "fuchsia", "pink", "rose", "presetTailwind", "disablePreflight", "presetTailwindBase", "colors"]
}
